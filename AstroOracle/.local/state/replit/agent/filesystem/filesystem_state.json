{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Jai Guru Astro Remedy\n\n## Overview\n\nThis is a comprehensive astrology consultation platform built for Astrologer Arup Shastri's personal business. The application offers video/audio/chat consultations, astrology courses, and product sales through a modern web interface with neon glow and glassmorphism design aesthetics. The platform supports multi-language functionality and features a cosmic-themed animated background throughout the user interface.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React with TypeScript using Vite for build tooling\n- **Styling**: Tailwind CSS with custom neon glow and glassmorphism components\n- **UI Components**: Shadcn/ui component library with Radix UI primitives\n- **Routing**: Wouter for client-side routing\n- **State Management**: TanStack Query for server state and React hooks for local state\n- **Design System**: Custom neon-themed components (NeonButton, GlassCard) with cosmic animated backgrounds\n\n### Backend Architecture  \n- **Runtime**: Node.js with Express.js server\n- **Language**: TypeScript with ES modules\n- **Database ORM**: Drizzle ORM for type-safe database operations\n- **Authentication**: JWT-based authentication with bcrypt for password hashing\n- **Real-time Communication**: WebSocket integration for live chat functionality\n- **API Design**: RESTful API endpoints with comprehensive CRUD operations\n\n### Database Schema\n- **Users**: Authentication, profile data, birth details for astrological readings\n- **Consultations**: Booking system for video/audio/chat/in-person sessions\n- **Courses**: Educational content management with enrollment tracking\n- **Products**: E-commerce functionality for astrological remedies\n- **Orders**: Purchase management and order tracking\n- **Chat Messages**: Real-time messaging system for consultations\n- **Notifications**: In-app notification system\n- **Audit Logs**: System activity tracking for security\n\n### Authentication & Authorization\n- **Multi-factor Authentication**: Phone number verification with OTP\n- **Role-based Access**: Admin and client user roles with different permissions\n- **Session Management**: JWT tokens with secure storage and validation\n- **Account Recovery**: Multiple identifier support (phone, email, government ID)\n\n### Communication Features\n- **Video Consultations**: Jitsi Meet integration for secure video calls\n- **Audio Consultations**: Built-in voice call functionality\n- **Chat System**: Real-time messaging with file sharing capabilities\n- **Notifications**: Automated in-app messages and transactional communications\n\n### Internationalization\n- **Multi-language Support**: Comprehensive language support including Hindi, Bengali, and major global languages\n- **Default Language**: English with dynamic language switching\n- **Localized Content**: UI translations and region-specific formatting\n\n## External Dependencies\n\n### Payment Processing\n- **Domestic Payments**: Razorpay and Cashfree for Indian transactions\n- **International Payments**: Stripe and PayPal for global transactions\n- **Payment Security**: Secure payment flow with status tracking\n\n### Communication Services\n- **Video Conferencing**: Jitsi Meet for free video consultations\n- **SMS Services**: Twilio for OTP verification and transactional messaging\n- **Email Services**: Amazon SES for automated email notifications\n\n### Database & Hosting\n- **Database**: PostgreSQL with Neon Database serverless hosting\n- **Application Hosting**: Vercel for serverless deployment\n- **Domain**: Custom domain (jaiguruastroremedy.com) integration\n\n### Development Tools\n- **Build System**: Vite for fast development and optimized production builds\n- **Code Quality**: TypeScript for type safety and ESLint for code standards\n- **Version Control**: Git-based workflow with modern development practices\n\n### Additional APIs\n- **Geolocation**: Free geolocation APIs for user location services\n- **Timezone Management**: IANA timezone database for consultation scheduling\n- **Content Generation**: Gemini API integration for content assistance","size_bytes":4138},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\", \"Inter\", \"sans-serif\"],\n        serif: [\"var(--font-serif)\", \"Georgia\", \"serif\"],\n        mono: [\"var(--font-mono)\", \"Menlo\", \"monospace\"],\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n        \"float\": \"float 6s ease-in-out infinite\",\n        \"glow\": \"glow 2s ease-in-out infinite alternate\",\n        \"orbit\": \"orbit 20s linear infinite\",\n        \"twinkle\": \"twinkle 3s ease-in-out infinite\",\n        \"pulse-neon\": \"pulse-neon 2s ease-in-out infinite\",\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: { height: \"0\" },\n          to: { height: \"var(--radix-accordion-content-height)\" },\n        },\n        \"accordion-up\": {\n          from: { height: \"var(--radix-accordion-content-height)\" },\n          to: { height: \"0\" },\n        },\n        float: {\n          \"0%, 100%\": { transform: \"translateY(0px)\" },\n          \"50%\": { transform: \"translateY(-20px)\" },\n        },\n        glow: {\n          from: { opacity: \"0.5\" },\n          to: { opacity: \"1\" },\n        },\n        orbit: {\n          from: { transform: \"rotate(0deg)\" },\n          to: { transform: \"rotate(360deg)\" },\n        },\n        twinkle: {\n          \"0%, 100%\": { opacity: \"0.3\" },\n          \"50%\": { opacity: \"1\" },\n        },\n        \"pulse-neon\": {\n          \"0%, 100%\": { \n            boxShadow: \"0 0 20px hsl(280, 100%, 70%)\"\n          },\n          \"50%\": { \n            boxShadow: \"0 0 30px hsl(280, 100%, 70%), 0 0 40px hsl(195, 100%, 50%)\"\n          },\n        },\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":3701},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { WebSocketServer, WebSocket } from \"ws\";\nimport { storage } from \"./storage\";\nimport { \n  insertUserSchema, \n  insertConsultationSchema, \n  insertCourseSchema, \n  insertProductSchema, \n  insertOrderSchema, \n  insertChatMessageSchema,\n  insertHomeTuitionCourseSchema,\n  insertHomeTuitionApplicationSchema,\n  insertStudentMessageSchema,\n  insertStudentConversationSchema\n} from \"@shared/schema\";\nimport { ObjectStorageService } from \"./objectStorage\";\nimport { registerConsultationSessionRoutes } from \"./consultation-session\";\nimport { z } from \"zod\";\nimport { randomUUID } from \"crypto\";\nimport bcrypt from \"bcrypt\";\nimport jwt from \"jsonwebtoken\";\nimport { v4 as uuidv4 } from 'uuid';\n\n// Custom validation schemas for multi-step registration\nconst registrationStep1Schema = z.object({\n  step: z.literal(1),\n  username: z.string().min(3, \"Username must be at least 3 characters\"),\n  password: z.string().min(8, \"Password must be at least 8 characters\"),\n  fullName: z.string().min(2, \"Full name must be at least 2 characters\"),\n  email: z.string().email().optional().or(z.literal(\"\")),\n});\n\nconst registrationStep2Schema = z.object({\n  step: z.literal(2),\n  phoneNumber: z.string().min(10, \"Phone number must be at least 10 digits\"),\n  countryCode: z.string().startsWith(\"+\", \"Country code must start with +\"),\n  otp: z.string().length(6, \"OTP must be 6 digits\"),\n});\n\nconst registrationStep3Schema = z.object({\n  step: z.literal(3),\n  dateOfBirth: z.string().optional(),\n  timeOfBirth: z.string().optional(),\n  placeOfBirth: z.string().optional(),\n  whatsappNumber: z.string().optional(),\n  preferredLanguage: z.string().optional(),\n});\n\nconst registrationStep4Schema = z.object({\n  step: z.literal(4),\n  agreements: z.object({\n    terms: z.boolean().refine(val => val === true, \"Terms of service must be accepted\"),\n    privacy: z.boolean().refine(val => val === true, \"Privacy policy must be accepted\"),\n    disclaimer: z.boolean().refine(val => val === true, \"Disclaimer must be accepted\"),\n    returnPolicy: z.boolean().refine(val => val === true, \"Return policy must be accepted\"),\n    dataProcessing: z.boolean().optional(),\n    marketing: z.boolean().optional(),\n  }),\n  // Include all data from previous steps\n  username: z.string(),\n  password: z.string(),\n  fullName: z.string(),\n  email: z.string().optional().or(z.literal(\"\")),\n  phoneNumber: z.string(),\n  countryCode: z.string(),\n  dateOfBirth: z.string().optional(),\n  timeOfBirth: z.string().optional(),\n  placeOfBirth: z.string().optional(),\n  whatsappNumber: z.string().optional(),\n  preferredLanguage: z.string().optional(),\n});\n// import bcrypt from \"bcrypt\"; // Already imported above\n// import jwt from \"jsonwebtoken\"; // Already imported above\nimport Stripe from \"stripe\";\n\n// Initialize Stripe\nconst stripe = process.env.STRIPE_SECRET_KEY ? new Stripe(process.env.STRIPE_SECRET_KEY, {\n  apiVersion: \"2025-08-27.basil\",\n}) : null;\n\nconst JWT_SECRET = process.env.JWT_SECRET || \"your-secret-key\";\n\n// Authentication middleware\nconst authenticateToken = (req: any, res: any, next: any) => {\n  const authHeader = req.headers['authorization'];\n  const token = authHeader && authHeader.split(' ')[1];\n\n  if (!token) {\n    return res.sendStatus(401);\n  }\n\n  jwt.verify(token, JWT_SECRET, (err: any, user: any) => {\n    if (err) return res.sendStatus(403);\n    req.user = user;\n    next();\n  });\n};\n\n// Admin middleware\nconst requireAdmin = (req: any, res: any, next: any) => {\n  if (!req.user?.isAdmin) {\n    return res.status(403).json({ message: \"Admin access required\" });\n  }\n  next();\n};\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // ========== COMPREHENSIVE AUTHENTICATION SYSTEM ==========\n  \n  // Step 1: Send OTP for registration/login\n  app.post(\"/api/auth/send-otp\", async (req, res) => {\n    try {\n      const { phoneNumber, countryCode, purpose } = req.body;\n      \n      // Validate input\n      if (!phoneNumber || !countryCode || !purpose) {\n        return res.status(400).json({ message: \"Phone number, country code, and purpose are required\" });\n      }\n\n      // Generate 6-digit OTP\n      const otp = Math.floor(100000 + Math.random() * 900000).toString();\n      \n      // Store OTP in database\n      await storage.createOtpVerification({\n        phoneNumber,\n        countryCode,\n        otp,\n        purpose,\n        ipAddress: req.ip,\n        userAgent: req.get(\"User-Agent\"),\n      });\n\n      // Log security event\n      await storage.createSecurityEvent({\n        eventType: \"OTP_SENT\",\n        description: `OTP sent for ${purpose} to ${countryCode}${phoneNumber}`,\n        ipAddress: req.ip,\n        userAgent: req.get(\"User-Agent\"),\n        riskLevel: \"low\",\n        details: { phoneNumber, countryCode, purpose },\n      });\n\n      // In production, send SMS via Twilio/other provider\n      console.log(`OTP for ${countryCode}${phoneNumber}: ${otp} (Purpose: ${purpose})`);\n      \n      res.json({ \n        message: \"OTP sent successfully\",\n        expiresIn: 600 // 10 minutes\n      });\n    } catch (error: any) {\n      console.error(\"Error sending OTP:\", error);\n      res.status(500).json({ message: \"Failed to send OTP\" });\n    }\n  });\n\n  // Step 2: Multi-step Registration Process\n  app.post(\"/api/auth/register\", async (req, res) => {\n    try {\n      const { step } = req.body;\n\n      if (step === 1) {\n        // Validate step 1 data\n        const result = registrationStep1Schema.safeParse(req.body);\n        if (!result.success) {\n          return res.status(400).json({ \n            message: \"Validation error\", \n            errors: result.error.errors \n          });\n        }\n\n        const { username } = result.data;\n\n        // Check if username already exists\n        const existingUser = await storage.getUserByUsername(username);\n        if (existingUser) {\n          return res.status(400).json({ message: \"Username already exists\" });\n        }\n\n        return res.json({ message: \"Step 1 validated. Proceed to phone verification.\" });\n      }\n\n      if (step === 2) {\n        // Validate step 2 data\n        const result = registrationStep2Schema.safeParse(req.body);\n        if (!result.success) {\n          return res.status(400).json({ \n            message: \"Validation error\", \n            errors: result.error.errors \n          });\n        }\n\n        const { phoneNumber, countryCode, otp } = result.data;\n\n        const isValidOtp = await storage.verifyOtp(phoneNumber, countryCode, otp, \"registration\");\n        if (!isValidOtp) {\n          return res.status(400).json({ message: \"Invalid or expired OTP\" });\n        }\n\n        // Check if phone number already registered\n        const existingPhone = await storage.getUserByPhone(phoneNumber, countryCode);\n        if (existingPhone) {\n          return res.status(400).json({ message: \"Phone number already registered\" });\n        }\n\n        return res.json({ message: \"Phone verified. Proceed to birth details.\" });\n      }\n\n      if (step === 3) {\n        // Validate step 3 data\n        const result = registrationStep3Schema.safeParse(req.body);\n        if (!result.success) {\n          return res.status(400).json({ \n            message: \"Validation error\", \n            errors: result.error.errors \n          });\n        }\n\n        // Birth details are optional but recommended\n        return res.json({ message: \"Birth details saved. Proceed to legal agreements.\" });\n      }\n\n      if (step === 4) {\n        // Validate step 4 data\n        const result = registrationStep4Schema.safeParse(req.body);\n        if (!result.success) {\n          return res.status(400).json({ \n            message: \"Validation error\", \n            errors: result.error.errors \n          });\n        }\n\n        const { agreements, username, password, fullName, email, phoneNumber, countryCode, dateOfBirth, timeOfBirth, placeOfBirth, whatsappNumber, preferredLanguage } = result.data;\n\n        // Hash password\n        const hashedPassword = await bcrypt.hash(password, 10);\n        \n        // Create user\n        const user = await storage.createUser({\n          username,\n          email: email || null,\n          password: hashedPassword,\n          fullName,\n          phoneNumber,\n          countryCode,\n          whatsappNumber: whatsappNumber || null,\n          dateOfBirth: dateOfBirth ? new Date(dateOfBirth) : null,\n          timeOfBirth: timeOfBirth || null,\n          placeOfBirth: placeOfBirth || null,\n          preferredLanguage: preferredLanguage || \"en\",\n          termsAcceptedAt: new Date(),\n          privacyAcceptedAt: new Date(),\n          disclaimerAcceptedAt: new Date(),\n          returnPolicyAcceptedAt: new Date(),\n          dataProcessingConsent: agreements.dataProcessing || false,\n          marketingConsent: agreements.marketing || false,\n        });\n\n        // Create legal agreement records\n        const agreementTypes = ['terms_of_service', 'privacy_policy', 'disclaimer', 'return_policy'];\n        for (const agreementType of agreementTypes) {\n          await storage.createLegalAgreement({\n            userId: user.id,\n            agreementType,\n            version: \"1.0\",\n            ipAddress: req.ip,\n            userAgent: req.get(\"User-Agent\"),\n            consentMethod: \"checkbox\",\n          });\n        }\n\n        // Generate token and session\n        const token = jwt.sign(\n          { userId: user.id, username: user.username, isAdmin: user.isAdmin },\n          JWT_SECRET,\n          { expiresIn: \"24h\" }\n        );\n\n        // Create auth session\n        await storage.createAuthSession({\n          userId: user.id,\n          token,\n          ipAddress: req.ip,\n          userAgent: req.get(\"User-Agent\"),\n          expiresAt: new Date(Date.now() + 24 * 60 * 60 * 1000), // 24 hours\n        });\n\n        // Log security events\n        await storage.createSecurityEvent({\n          userId: user.id,\n          eventType: \"USER_REGISTERED\",\n          description: \"User registration completed successfully\",\n          ipAddress: req.ip,\n          userAgent: req.get(\"User-Agent\"),\n          riskLevel: \"low\",\n        });\n\n        res.json({ \n          token, \n          user: { \n            id: user.id, \n            username: user.username, \n            fullName: user.fullName,\n            email: user.email,\n            phoneNumber: user.phoneNumber,\n            countryCode: user.countryCode,\n            isAdmin: user.isAdmin,\n            preferredLanguage: user.preferredLanguage\n          },\n          message: \"Registration completed successfully!\"\n        });\n      }\n    } catch (error: any) {\n      console.error(\"Registration error:\", error);\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  // Method A: Mobile + OTP Login (Most Secure)\n  app.post(\"/api/auth/login/mobile-otp\", async (req, res) => {\n    try {\n      const { phoneNumber, countryCode, otp } = req.body;\n      \n      if (!phoneNumber || !countryCode || !otp) {\n        return res.status(400).json({ message: \"Phone number, country code, and OTP are required\" });\n      }\n\n      // Verify OTP\n      const isValidOtp = await storage.verifyOtp(phoneNumber, countryCode, otp, \"login\");\n      if (!isValidOtp) {\n        await storage.createSecurityEvent({\n          eventType: \"LOGIN_FAILED\",\n          description: \"Invalid OTP for mobile login\",\n          ipAddress: req.ip,\n          userAgent: req.get(\"User-Agent\"),\n          riskLevel: \"medium\",\n          details: { phoneNumber, countryCode, reason: \"invalid_otp\" },\n        });\n        return res.status(401).json({ message: \"Invalid or expired OTP\" });\n      }\n\n      // Find user by phone number\n      const user = await storage.getUserByPhone(phoneNumber, countryCode);\n      if (!user) {\n        return res.status(404).json({ message: \"User not found with this phone number\" });\n      }\n\n      // Generate token and create session\n      const token = jwt.sign(\n        { userId: user.id, username: user.username, isAdmin: user.isAdmin },\n        JWT_SECRET,\n        { expiresIn: \"24h\" }\n      );\n\n      await storage.createAuthSession({\n        userId: user.id,\n        token,\n        ipAddress: req.ip,\n        userAgent: req.get(\"User-Agent\"),\n        expiresAt: new Date(Date.now() + 24 * 60 * 60 * 1000),\n      });\n\n      // Log successful login\n      await storage.createSecurityEvent({\n        userId: user.id,\n        eventType: \"LOGIN_SUCCESS\",\n        description: \"Successful mobile + OTP login\",\n        ipAddress: req.ip,\n        userAgent: req.get(\"User-Agent\"),\n        riskLevel: \"low\",\n        details: { method: \"mobile_otp\" },\n      });\n\n      res.json({ \n        token, \n        user: { \n          id: user.id, \n          username: user.username, \n          fullName: user.fullName,\n          email: user.email,\n          phoneNumber: user.phoneNumber,\n          isAdmin: user.isAdmin \n        },\n        method: \"mobile_otp\"\n      });\n    } catch (error: any) {\n      console.error(\"Mobile OTP login error:\", error);\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  // Method B: User ID + Password Login (Quick Login)\n  app.post(\"/api/auth/login/userid-password\", async (req, res) => {\n    try {\n      const { userId, password } = req.body;\n      \n      if (!userId || !password) {\n        return res.status(400).json({ message: \"User ID and password are required\" });\n      }\n\n      const user = await storage.getUserByUserId(userId);\n      if (!user) {\n        await storage.createSecurityEvent({\n          eventType: \"LOGIN_FAILED\",\n          description: \"Login attempt with non-existent user ID\",\n          ipAddress: req.ip,\n          userAgent: req.get(\"User-Agent\"),\n          riskLevel: \"medium\",\n          details: { userId, reason: \"user_not_found\" },\n        });\n        return res.status(401).json({ message: \"Invalid credentials\" });\n      }\n\n      const validPassword = await bcrypt.compare(password, user.password);\n      if (!validPassword) {\n        await storage.createSecurityEvent({\n          userId: user.id,\n          eventType: \"LOGIN_FAILED\",\n          description: \"Invalid password for user ID login\",\n          ipAddress: req.ip,\n          userAgent: req.get(\"User-Agent\"),\n          riskLevel: \"medium\",\n          details: { method: \"userid_password\", reason: \"invalid_password\" },\n        });\n        return res.status(401).json({ message: \"Invalid credentials\" });\n      }\n\n      // Generate token and create session\n      const token = jwt.sign(\n        { userId: user.id, username: user.username, isAdmin: user.isAdmin },\n        JWT_SECRET,\n        { expiresIn: \"24h\" }\n      );\n\n      await storage.createAuthSession({\n        userId: user.id,\n        token,\n        ipAddress: req.ip,\n        userAgent: req.get(\"User-Agent\"),\n        expiresAt: new Date(Date.now() + 24 * 60 * 60 * 1000),\n      });\n\n      await storage.createSecurityEvent({\n        userId: user.id,\n        eventType: \"LOGIN_SUCCESS\",\n        description: \"Successful user ID + password login\",\n        ipAddress: req.ip,\n        userAgent: req.get(\"User-Agent\"),\n        riskLevel: \"low\",\n        details: { method: \"userid_password\" },\n      });\n\n      res.json({ \n        token, \n        user: { \n          id: user.id, \n          username: user.username, \n          fullName: user.fullName,\n          email: user.email,\n          phoneNumber: user.phoneNumber,\n          isAdmin: user.isAdmin \n        },\n        method: \"userid_password\"\n      });\n    } catch (error: any) {\n      console.error(\"User ID password login error:\", error);\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  // Method C: Mobile + Password Login (Alternative)\n  app.post(\"/api/auth/login/mobile-password\", async (req, res) => {\n    try {\n      const { phoneNumber, countryCode, password } = req.body;\n      \n      if (!phoneNumber || !countryCode || !password) {\n        return res.status(400).json({ message: \"Phone number, country code, and password are required\" });\n      }\n\n      const user = await storage.getUserByPhone(phoneNumber, countryCode);\n      if (!user) {\n        await storage.createSecurityEvent({\n          eventType: \"LOGIN_FAILED\",\n          description: \"Login attempt with non-existent phone number\",\n          ipAddress: req.ip,\n          userAgent: req.get(\"User-Agent\"),\n          riskLevel: \"medium\",\n          details: { phoneNumber, countryCode, reason: \"user_not_found\" },\n        });\n        return res.status(401).json({ message: \"Invalid credentials\" });\n      }\n\n      const validPassword = await bcrypt.compare(password, user.password);\n      if (!validPassword) {\n        await storage.createSecurityEvent({\n          userId: user.id,\n          eventType: \"LOGIN_FAILED\",\n          description: \"Invalid password for mobile login\",\n          ipAddress: req.ip,\n          userAgent: req.get(\"User-Agent\"),\n          riskLevel: \"medium\",\n          details: { method: \"mobile_password\", reason: \"invalid_password\" },\n        });\n        return res.status(401).json({ message: \"Invalid credentials\" });\n      }\n\n      // Generate token and create session\n      const token = jwt.sign(\n        { userId: user.id, username: user.username, isAdmin: user.isAdmin },\n        JWT_SECRET,\n        { expiresIn: \"24h\" }\n      );\n\n      await storage.createAuthSession({\n        userId: user.id,\n        token,\n        ipAddress: req.ip,\n        userAgent: req.get(\"User-Agent\"),\n        expiresAt: new Date(Date.now() + 24 * 60 * 60 * 1000),\n      });\n\n      await storage.createSecurityEvent({\n        userId: user.id,\n        eventType: \"LOGIN_SUCCESS\",\n        description: \"Successful mobile + password login\",\n        ipAddress: req.ip,\n        userAgent: req.get(\"User-Agent\"),\n        riskLevel: \"low\",\n        details: { method: \"mobile_password\" },\n      });\n\n      res.json({ \n        token, \n        user: { \n          id: user.id, \n          username: user.username, \n          fullName: user.fullName,\n          email: user.email,\n          phoneNumber: user.phoneNumber,\n          isAdmin: user.isAdmin \n        },\n        method: \"mobile_password\"\n      });\n    } catch (error: any) {\n      console.error(\"Mobile password login error:\", error);\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  // Logout endpoint\n  app.post(\"/api/auth/logout\", authenticateToken, async (req: any, res) => {\n    try {\n      const authHeader = req.headers['authorization'];\n      const token = authHeader && authHeader.split(' ')[1];\n      \n      if (token) {\n        await storage.invalidateAuthSession(token);\n      }\n\n      await storage.createSecurityEvent({\n        userId: req.user.userId,\n        eventType: \"USER_LOGOUT\",\n        description: \"User logged out successfully\",\n        ipAddress: req.ip,\n        userAgent: req.get(\"User-Agent\"),\n        riskLevel: \"low\",\n      });\n\n      res.json({ message: \"Logged out successfully\" });\n    } catch (error: any) {\n      console.error(\"Logout error:\", error);\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  // Password Reset Request\n  app.post(\"/api/auth/forgot-password\", async (req, res) => {\n    try {\n      const { phoneNumber, countryCode } = req.body;\n      \n      if (!phoneNumber || !countryCode) {\n        return res.status(400).json({ message: \"Phone number and country code are required\" });\n      }\n\n      const user = await storage.getUserByPhone(phoneNumber, countryCode);\n      if (!user) {\n        // Don't reveal if user exists for security\n        return res.json({ message: \"If an account exists with this phone number, you will receive an OTP to reset your password.\" });\n      }\n\n      // Generate and send OTP for password reset\n      const otp = Math.floor(100000 + Math.random() * 900000).toString();\n      \n      await storage.createOtpVerification({\n        phoneNumber,\n        countryCode,\n        otp,\n        purpose: \"password_reset\",\n        userId: user.id,\n        ipAddress: req.ip,\n        userAgent: req.get(\"User-Agent\"),\n      });\n\n      await storage.createSecurityEvent({\n        userId: user.id,\n        eventType: \"PASSWORD_RESET_REQUESTED\",\n        description: \"Password reset OTP requested\",\n        ipAddress: req.ip,\n        userAgent: req.get(\"User-Agent\"),\n        riskLevel: \"medium\",\n        details: { phoneNumber, countryCode },\n      });\n\n      // In production, send SMS via Twilio\n      console.log(`Password reset OTP for ${countryCode}${phoneNumber}: ${otp}`);\n\n      res.json({ message: \"If an account exists with this phone number, you will receive an OTP to reset your password.\" });\n    } catch (error: any) {\n      console.error(\"Forgot password error:\", error);\n      res.status(500).json({ message: \"Failed to process password reset request\" });\n    }\n  });\n\n  // Reset Password with OTP\n  app.post(\"/api/auth/reset-password\", async (req, res) => {\n    try {\n      const { phoneNumber, countryCode, otp, newPassword } = req.body;\n      \n      if (!phoneNumber || !countryCode || !otp || !newPassword) {\n        return res.status(400).json({ message: \"Phone number, country code, OTP, and new password are required\" });\n      }\n\n      // Verify OTP\n      const isValidOtp = await storage.verifyOtp(phoneNumber, countryCode, otp, \"password_reset\");\n      if (!isValidOtp) {\n        await storage.createSecurityEvent({\n          eventType: \"PASSWORD_RESET_FAILED\",\n          description: \"Invalid OTP for password reset\",\n          ipAddress: req.ip,\n          userAgent: req.get(\"User-Agent\"),\n          riskLevel: \"high\",\n          details: { phoneNumber, countryCode, reason: \"invalid_otp\" },\n        });\n        return res.status(400).json({ message: \"Invalid or expired OTP\" });\n      }\n\n      const user = await storage.getUserByPhone(phoneNumber, countryCode);\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      // Hash new password\n      const hashedPassword = await bcrypt.hash(newPassword, 10);\n      \n      // Update password\n      await storage.updateUser(user.id, { password: hashedPassword });\n\n      await storage.createSecurityEvent({\n        userId: user.id,\n        eventType: \"PASSWORD_RESET_SUCCESS\",\n        description: \"Password reset completed successfully\",\n        ipAddress: req.ip,\n        userAgent: req.get(\"User-Agent\"),\n        riskLevel: \"medium\",\n      });\n\n      res.json({ message: \"Password reset successfully. You can now login with your new password.\" });\n    } catch (error: any) {\n      console.error(\"Reset password error:\", error);\n      res.status(500).json({ message: \"Failed to reset password\" });\n    }\n  });\n\n  // Change Password (Authenticated users)\n  app.post(\"/api/auth/change-password\", authenticateToken, async (req: any, res) => {\n    try {\n      const { currentPassword, newPassword } = req.body;\n      \n      if (!currentPassword || !newPassword) {\n        return res.status(400).json({ message: \"Current password and new password are required\" });\n      }\n\n      const user = await storage.getUser(req.user.userId);\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      // Verify current password\n      const validPassword = await bcrypt.compare(currentPassword, user.password);\n      if (!validPassword) {\n        await storage.createSecurityEvent({\n          userId: user.id,\n          eventType: \"PASSWORD_CHANGE_FAILED\",\n          description: \"Invalid current password for password change\",\n          ipAddress: req.ip,\n          userAgent: req.get(\"User-Agent\"),\n          riskLevel: \"medium\",\n          details: { reason: \"invalid_current_password\" },\n        });\n        return res.status(401).json({ message: \"Current password is incorrect\" });\n      }\n\n      // Hash new password\n      const hashedPassword = await bcrypt.hash(newPassword, 10);\n      \n      // Update password\n      await storage.updateUser(user.id, { password: hashedPassword });\n\n      await storage.createSecurityEvent({\n        userId: user.id,\n        eventType: \"PASSWORD_CHANGED\",\n        description: \"Password changed successfully\",\n        ipAddress: req.ip,\n        userAgent: req.get(\"User-Agent\"),\n        riskLevel: \"low\",\n      });\n\n      res.json({ message: \"Password changed successfully\" });\n    } catch (error: any) {\n      console.error(\"Change password error:\", error);\n      res.status(500).json({ message: \"Failed to change password\" });\n    }\n  });\n\n  // Account Recovery (Lost mobile access)\n  app.post(\"/api/auth/account-recovery\", async (req, res) => {\n    try {\n      const { username, email, governmentId } = req.body;\n      \n      if (!username && !email && !governmentId) {\n        return res.status(400).json({ message: \"At least one identifier (username, email, or government ID) is required\" });\n      }\n\n      let user;\n      if (username) {\n        user = await storage.getUserByUsername(username);\n      } else if (email) {\n        user = Array.from((storage as any).users.values()).find((u: any) => u.email === email);\n      }\n\n      await storage.createSecurityEvent({\n        userId: user?.id,\n        eventType: \"ACCOUNT_RECOVERY_REQUESTED\",\n        description: \"Account recovery request submitted\",\n        ipAddress: req.ip,\n        userAgent: req.get(\"User-Agent\"),\n        riskLevel: \"high\",\n        details: { username, email, governmentId },\n      });\n\n      // Always return same message for security\n      res.json({ \n        message: \"Account recovery request submitted. Our support team will contact you within 24-48 hours to verify your identity and assist with account recovery.\",\n        supportContact: \"support@jaiguruastroremedy.com\"\n      });\n    } catch (error: any) {\n      console.error(\"Account recovery error:\", error);\n      res.status(500).json({ message: \"Failed to process account recovery request\" });\n    }\n  });\n\n  // Verify user identity for account operations\n  app.post(\"/api/auth/verify-identity\", authenticateToken, async (req: any, res) => {\n    try {\n      const { password, otp, phoneNumber, countryCode } = req.body;\n      \n      const user = await storage.getUser(req.user.userId);\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      let verified = false;\n      \n      // Method 1: Password verification\n      if (password) {\n        verified = await bcrypt.compare(password, user.password);\n      }\n      \n      // Method 2: OTP verification (for high-security operations)\n      if (otp && phoneNumber && countryCode) {\n        verified = await storage.verifyOtp(phoneNumber, countryCode, otp, \"identity_verification\");\n      }\n\n      if (!verified) {\n        await storage.createSecurityEvent({\n          userId: user.id,\n          eventType: \"IDENTITY_VERIFICATION_FAILED\",\n          description: \"Failed identity verification attempt\",\n          ipAddress: req.ip,\n          userAgent: req.get(\"User-Agent\"),\n          riskLevel: \"high\",\n        });\n        return res.status(401).json({ message: \"Identity verification failed\" });\n      }\n\n      await storage.createSecurityEvent({\n        userId: user.id,\n        eventType: \"IDENTITY_VERIFIED\",\n        description: \"Identity verification successful\",\n        ipAddress: req.ip,\n        userAgent: req.get(\"User-Agent\"),\n        riskLevel: \"low\",\n      });\n\n      res.json({ message: \"Identity verified successfully\", verified: true });\n    } catch (error: any) {\n      console.error(\"Identity verification error:\", error);\n      res.status(500).json({ message: \"Failed to verify identity\" });\n    }\n  });\n\n  // User profile routes\n  app.get(\"/api/profile\", authenticateToken, async (req: any, res) => {\n    try {\n      const user = await storage.getUser(req.user.userId);\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      const { password, ...userWithoutPassword } = user;\n      res.json(userWithoutPassword);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.put(\"/api/profile\", authenticateToken, async (req: any, res) => {\n    try {\n      const updates = req.body;\n      delete updates.password; // Don't allow password updates through this endpoint\n      delete updates.isAdmin; // Don't allow admin status changes\n      \n      const updatedUser = await storage.updateUser(req.user.userId, updates);\n      if (!updatedUser) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      await storage.createAuditLog({\n        userId: req.user.userId,\n        action: \"PROFILE_UPDATED\",\n        resourceType: \"USER\",\n        resourceId: req.user.userId,\n        details: updates,\n        ipAddress: req.ip,\n        userAgent: req.get(\"User-Agent\"),\n      });\n\n      const { password, ...userWithoutPassword } = updatedUser;\n      res.json(userWithoutPassword);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  // Consultation routes\n  app.get(\"/api/consultations\", authenticateToken, async (req: any, res) => {\n    try {\n      let consultations;\n      if (req.user.isAdmin) {\n        consultations = Array.from((storage as any).consultations.values());\n      } else {\n        consultations = await storage.getConsultationsByClient(req.user.userId);\n      }\n      res.json(consultations);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.post(\"/api/consultations\", authenticateToken, async (req, res) => {\n    try {\n      const consultationData = insertConsultationSchema.parse({\n        ...req.body,\n        clientId: (req as any).user.userId,\n      });\n\n      const consultation = await storage.createConsultation(consultationData);\n\n      // Create notification\n      await storage.createNotification({\n        userId: consultation.clientId,\n        title: \"Consultation Booked\",\n        message: `Your ${consultation.type} consultation has been scheduled for ${consultation.scheduledAt}`,\n        type: \"consultation\",\n        actionUrl: `/consultation/${consultation.id}`,\n      });\n\n      await storage.createAuditLog({\n        userId: (req as any).user.userId,\n        action: \"CONSULTATION_BOOKED\",\n        resourceType: \"CONSULTATION\",\n        resourceId: consultation.id,\n        details: consultationData,\n        ipAddress: req.ip,\n        userAgent: req.get(\"User-Agent\"),\n      });\n\n      res.json(consultation);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  app.get(\"/api/consultations/:id\", authenticateToken, async (req: any, res) => {\n    try {\n      const consultation = await storage.getConsultation(req.params.id);\n      if (!consultation) {\n        return res.status(404).json({ message: \"Consultation not found\" });\n      }\n\n      // Check if user owns the consultation or is admin\n      if (consultation.clientId !== req.user.userId && !req.user.isAdmin) {\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n\n      res.json(consultation);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.put(\"/api/consultations/:id\", authenticateToken, async (req: any, res) => {\n    try {\n      const consultation = await storage.getConsultation(req.params.id);\n      if (!consultation) {\n        return res.status(404).json({ message: \"Consultation not found\" });\n      }\n\n      // Only admin or client can update (client can only reschedule)\n      if (consultation.clientId !== req.user.userId && !req.user.isAdmin) {\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n\n      const updates = req.body;\n      \n      // Clients can only reschedule\n      if (!req.user.isAdmin) {\n        const allowedUpdates = ['scheduledAt', 'notes'];\n        Object.keys(updates).forEach(key => {\n          if (!allowedUpdates.includes(key)) {\n            delete updates[key];\n          }\n        });\n      }\n\n      const updatedConsultation = await storage.updateConsultation(req.params.id, updates);\n\n      await storage.createAuditLog({\n        userId: req.user.userId,\n        action: \"CONSULTATION_UPDATED\",\n        resourceType: \"CONSULTATION\",\n        resourceId: req.params.id,\n        details: updates,\n        ipAddress: req.ip,\n        userAgent: req.get(\"User-Agent\"),\n      });\n\n      res.json(updatedConsultation);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  // Course routes\n  app.get(\"/api/courses\", async (req, res) => {\n    try {\n      const courses = await storage.getActiveCourses();\n      res.json(courses);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.post(\"/api/courses\", authenticateToken, requireAdmin, async (req: any, res) => {\n    try {\n      const courseData = insertCourseSchema.parse(req.body);\n      const course = await storage.createCourse(courseData);\n\n      await storage.createAuditLog({\n        userId: req.user.userId,\n        action: \"COURSE_CREATED\",\n        resourceType: \"COURSE\",\n        resourceId: course.id,\n        details: courseData,\n        ipAddress: req.ip,\n        userAgent: req.get(\"User-Agent\"),\n      });\n\n      res.json(course);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  app.post(\"/api/courses/:id/enroll\", authenticateToken, async (req: any, res) => {\n    try {\n      const course = await storage.getCourse(req.params.id);\n      if (!course) {\n        return res.status(404).json({ message: \"Course not found\" });\n      }\n\n      if ((course.currentStudents || 0) >= (course.maxStudents || 0)) {\n        return res.status(400).json({ message: \"Course is full\" });\n      }\n\n      const enrollment = await storage.enrollStudent(req.user.userId, req.params.id);\n\n      // Update course student count\n      await storage.updateCourse(req.params.id, {\n        currentStudents: (course.currentStudents || 0) + 1\n      });\n\n      await storage.createNotification({\n        userId: req.user.userId,\n        title: \"Course Enrollment\",\n        message: `You have been enrolled in ${course.title}`,\n        type: \"course\",\n        actionUrl: `/courses/${course.id}`,\n      });\n\n      res.json(enrollment);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  // Product routes\n  app.get(\"/api/products\", async (req, res) => {\n    try {\n      const category = req.query.category as string;\n      let products;\n      \n      if (category) {\n        products = await storage.getProductsByCategory(category);\n      } else {\n        products = await storage.getAllProducts();\n      }\n      \n      res.json(products);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.post(\"/api/products\", authenticateToken, requireAdmin, async (req: any, res) => {\n    try {\n      const productData = insertProductSchema.parse(req.body);\n      const product = await storage.createProduct(productData);\n\n      await storage.createAuditLog({\n        userId: req.user.userId,\n        action: \"PRODUCT_CREATED\",\n        resourceType: \"PRODUCT\",\n        resourceId: product.id,\n        details: productData,\n        ipAddress: req.ip,\n        userAgent: req.get(\"User-Agent\"),\n      });\n\n      res.json(product);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  // Order routes\n  app.get(\"/api/orders\", authenticateToken, async (req: any, res) => {\n    try {\n      let orders;\n      if (req.user.isAdmin) {\n        orders = Array.from((storage as any).orders.values());\n      } else {\n        orders = await storage.getOrdersByCustomer(req.user.userId);\n      }\n      res.json(orders);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.post(\"/api/orders\", authenticateToken, async (req: any, res) => {\n    try {\n      const orderData = insertOrderSchema.parse({\n        ...req.body,\n        customerId: req.user.userId,\n      });\n\n      const order = await storage.createOrder(orderData);\n\n      await storage.createNotification({\n        userId: req.user.userId,\n        title: \"Order Placed\",\n        message: `Your order #${order.id} has been placed successfully`,\n        type: \"order\",\n        actionUrl: `/orders/${order.id}`,\n      });\n\n      res.json(order);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  // Chat message routes\n  app.get(\"/api/consultations/:id/messages\", authenticateToken, async (req: any, res) => {\n    try {\n      const consultation = await storage.getConsultation(req.params.id);\n      if (!consultation) {\n        return res.status(404).json({ message: \"Consultation not found\" });\n      }\n\n      if (consultation.clientId !== req.user.userId && !req.user.isAdmin) {\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n\n      const messages = await storage.getChatMessages(req.params.id);\n      res.json(messages);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.post(\"/api/consultations/:id/messages\", authenticateToken, async (req: any, res) => {\n    try {\n      const consultation = await storage.getConsultation(req.params.id);\n      if (!consultation) {\n        return res.status(404).json({ message: \"Consultation not found\" });\n      }\n\n      if (consultation.clientId !== req.user.userId && !req.user.isAdmin) {\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n\n      const messageData = insertChatMessageSchema.parse({\n        ...req.body,\n        consultationId: req.params.id,\n        senderId: req.user.userId,\n      });\n\n      const message = await storage.createChatMessage(messageData);\n      res.json(message);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  // Notification routes\n  app.get(\"/api/notifications\", authenticateToken, async (req: any, res) => {\n    try {\n      const notifications = await storage.getUserNotifications(req.user.userId);\n      res.json(notifications);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.put(\"/api/notifications/:id/read\", authenticateToken, async (req: any, res) => {\n    try {\n      await storage.markNotificationRead(req.params.id);\n      res.json({ success: true });\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  // Support Chat Routes\n  \n  // Get or create a support chat session\n  app.get(\"/api/support-chat/:sessionId\", async (req: any, res) => {\n    try {\n      const { sessionId } = req.params;\n      \n      let supportChat = await storage.getSupportChat(sessionId);\n      \n      if (!supportChat) {\n        // Create new support chat session\n        supportChat = await storage.createSupportChat({\n          sessionId,\n          userId: req.user?.userId || null,\n          userEmail: req.user?.email || null,\n          userName: req.user?.fullName || null,\n        });\n      }\n      \n      // Get messages for this chat\n      const messages = await storage.getSupportChatMessages(supportChat.id);\n      \n      res.json({ ...supportChat, messages });\n    } catch (error: any) {\n      console.error(\"Error getting support chat:\", error);\n      res.status(500).json({ message: \"Failed to get support chat\" });\n    }\n  });\n\n  // Send a message in support chat\n  app.post(\"/api/support-chat/message\", async (req: any, res) => {\n    try {\n      const { sessionId, message, messageType = \"user\" } = req.body;\n      \n      // Get or create support chat\n      let supportChat = await storage.getSupportChat(sessionId);\n      if (!supportChat) {\n        supportChat = await storage.createSupportChat({\n          sessionId,\n          userId: req.user?.userId || null,\n          userEmail: req.user?.email || null,\n          userName: req.user?.fullName || null,\n        });\n      }\n      \n      // Create user message\n      const userMessage = await storage.createSupportChatMessage({\n        chatId: supportChat.id,\n        message,\n        messageType,\n        sender: req.user?.fullName || \"User\",\n      });\n      \n      // Generate AI response\n      let aiResponse = null;\n      if (messageType === \"user\") {\n        // Use AI with service context for intelligent responses\n        const { generateAIResponse, buildServiceContext } = await import(\"./gemini\");\n        \n        try {\n          // Build context with current service information\n          const context = await buildServiceContext(storage);\n          \n          // Generate AI response with context\n          const aiMessage = await generateAIResponse(message, context);\n          \n          aiResponse = await storage.createSupportChatMessage({\n            chatId: supportChat.id,\n            message: aiMessage,\n            messageType: \"ai\", \n            sender: \"AI Assistant\",\n          });\n          \n        } catch (error: any) {\n          console.error(\"AI response generation failed, falling back to FAQ search:\", error);\n          \n          // Fallback to FAQ search if AI fails\n          const faqs = await storage.searchFaqs(message);\n          \n          if (faqs.length > 0) {\n            const bestMatch = faqs[0];\n            await storage.incrementFaqView(bestMatch.id);\n            \n            aiResponse = await storage.createSupportChatMessage({\n              chatId: supportChat.id,\n              message: bestMatch.answer,\n              messageType: \"ai\",\n              sender: \"AI Assistant\",\n              relatedFaqId: bestMatch.id,\n            });\n          } else {\n            // Final fallback to default response\n            const defaultResponse = \"Thank you for your question. Our expert astrologer Arup Shastri would be happy to help you with personalized guidance. Would you like to book a consultation? You can choose from video, audio, chat, in-person, or home service sessions.\";\n            \n            aiResponse = await storage.createSupportChatMessage({\n              chatId: supportChat.id,\n              message: defaultResponse,\n              messageType: \"ai\",\n              sender: \"AI Assistant\",\n            });\n            \n            await storage.updateSupportChat(supportChat.id, {\n              needsHumanSupport: true\n            });\n          }\n        }\n      }\n      \n      res.json({ \n        userMessage, \n        aiResponse,\n        needsHumanSupport: supportChat.needsHumanSupport \n      });\n      \n    } catch (error: any) {\n      console.error(\"Error sending support chat message:\", error);\n      res.status(500).json({ message: \"Failed to send message\" });\n    }\n  });\n\n  // Rate a chat message as helpful/unhelpful\n  app.post(\"/api/support-chat/rate-message\", async (req: any, res) => {\n    try {\n      const { messageId, isHelpful } = req.body;\n      await storage.rateChatMessage(messageId, isHelpful);\n      res.json({ message: \"Rating recorded\" });\n    } catch (error: any) {\n      console.error(\"Error rating message:\", error);\n      res.status(500).json({ message: \"Failed to rate message\" });\n    }\n  });\n\n  // Request human support\n  app.post(\"/api/support-chat/request-human\", async (req: any, res) => {\n    try {\n      const { sessionId } = req.body;\n      \n      const supportChat = await storage.getSupportChat(sessionId);\n      if (supportChat) {\n        await storage.updateSupportChat(supportChat.id, {\n          humanSupportRequested: true,\n          needsHumanSupport: true\n        });\n        \n        res.json({ message: \"Human support requested. Our team will respond shortly.\" });\n      } else {\n        res.status(404).json({ message: \"Chat session not found\" });\n      }\n    } catch (error: any) {\n      console.error(\"Error requesting human support:\", error);\n      res.status(500).json({ message: \"Failed to request human support\" });\n    }\n  });\n\n  // FAQ Routes\n  \n  // Get all FAQs or search FAQs\n  app.get(\"/api/faqs\", async (req: any, res) => {\n    try {\n      const { search, category } = req.query;\n      \n      let faqs;\n      if (search) {\n        faqs = await storage.searchFaqs(search as string);\n      } else if (category) {\n        faqs = await storage.getFaqsByCategory(category as string);\n      } else {\n        faqs = await storage.getAllFaqs();\n      }\n      \n      res.json(faqs);\n    } catch (error: any) {\n      console.error(\"Error fetching FAQs:\", error);\n      res.status(500).json({ message: \"Failed to fetch FAQs\" });\n    }\n  });\n\n  // Create FAQ (admin only)\n  app.post(\"/api/faqs\", authenticateToken, async (req: any, res) => {\n    try {\n      if (!req.user?.isAdmin) {\n        return res.status(403).json({ message: \"Admin access required\" });\n      }\n      \n      const faq = await storage.createFaq(req.body);\n      res.status(201).json(faq);\n    } catch (error: any) {\n      console.error(\"Error creating FAQ:\", error);\n      res.status(500).json({ message: \"Failed to create FAQ\" });\n    }\n  });\n\n  // Update FAQ (admin only)\n  app.put(\"/api/faqs/:id\", authenticateToken, async (req: any, res) => {\n    try {\n      if (!req.user?.isAdmin) {\n        return res.status(403).json({ message: \"Admin access required\" });\n      }\n      \n      const faq = await storage.updateFaq(req.params.id, req.body);\n      if (!faq) {\n        return res.status(404).json({ message: \"FAQ not found\" });\n      }\n      \n      res.json(faq);\n    } catch (error: any) {\n      console.error(\"Error updating FAQ:\", error);\n      res.status(500).json({ message: \"Failed to update FAQ\" });\n    }\n  });\n\n  // Delete FAQ (admin only)\n  app.delete(\"/api/faqs/:id\", authenticateToken, async (req: any, res) => {\n    try {\n      if (!req.user?.isAdmin) {\n        return res.status(403).json({ message: \"Admin access required\" });\n      }\n      \n      const deleted = await storage.deleteFaq(req.params.id);\n      if (!deleted) {\n        return res.status(404).json({ message: \"FAQ not found\" });\n      }\n      \n      res.json({ message: \"FAQ deleted successfully\" });\n    } catch (error: any) {\n      console.error(\"Error deleting FAQ:\", error);\n      res.status(500).json({ message: \"Failed to delete FAQ\" });\n    }\n  });\n\n  // Rate FAQ as helpful\n  app.post(\"/api/faqs/:id/rate\", async (req: any, res) => {\n    try {\n      const { isHelpful } = req.body;\n      await storage.rateFaqHelpful(req.params.id, isHelpful);\n      res.json({ message: \"Rating recorded\" });\n    } catch (error: any) {\n      console.error(\"Error rating FAQ:\", error);\n      res.status(500).json({ message: \"Failed to rate FAQ\" });\n    }\n  });\n\n  // Payment routes\n  if (stripe) {\n    app.post(\"/api/create-payment-intent\", authenticateToken, async (req, res) => {\n      try {\n        const { amount, currency = \"inr\", metadata } = req.body;\n        \n        const paymentIntent = await stripe.paymentIntents.create({\n          amount: Math.round(amount * 100), // Convert to cents/paise\n          currency,\n          metadata: {\n            userId: (req as any).user.userId,\n            ...metadata\n          },\n        });\n        \n        res.json({ clientSecret: paymentIntent.client_secret });\n      } catch (error: any) {\n        res.status(500).json({ message: \"Error creating payment intent: \" + error.message });\n      }\n    });\n  }\n\n  // Admin routes\n  app.get(\"/api/admin/users\", authenticateToken, requireAdmin, async (req: any, res) => {\n    try {\n      const users = Array.from((storage as any).users.values()).map((user: any) => {\n        const { password, ...userWithoutPassword } = user;\n        return userWithoutPassword;\n      });\n      res.json(users);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.get(\"/api/admin/dashboard\", authenticateToken, requireAdmin, async (req: any, res) => {\n    try {\n      const totalUsers = (storage as any).users.size;\n      const totalConsultations = (storage as any).consultations.size;\n      const totalCourses = (storage as any).courses.size;\n      const totalProducts = (storage as any).products.size;\n      const totalOrders = (storage as any).orders.size;\n      \n      // Calculate monthly revenue\n      const monthlyRevenue = Array.from((storage as any).orders.values())\n        .filter((o: any) => new Date(o.createdAt) > new Date(Date.now() - 30 * 24 * 60 * 60 * 1000))\n        .reduce((sum: number, o: any) => sum + parseFloat(o.totalAmount || 0), 0);\n\n      const upcomingConsultations = await storage.getUpcomingConsultations();\n      \n      res.json({\n        stats: {\n          totalUsers,\n          totalConsultations,\n          totalCourses,\n          totalProducts,\n          totalOrders,\n          monthlyRevenue,\n          homeTuitionApplications: (storage as any).homeTuitionApplications?.size || 0,\n          supportChats: (storage as any).supportChats?.size || 0,\n          faqViews: 1250, // Mock data for FAQ views\n        },\n        upcomingConsultations: upcomingConsultations.slice(0, 5),\n      });\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  // Admin users endpoint\n  app.get(\"/api/admin/users\", authenticateToken, requireAdmin, async (req: any, res) => {\n    try {\n      const users = Array.from((storage as any).users.values());\n      res.json(users);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  // Admin consultations endpoint\n  app.get(\"/api/admin/consultations\", authenticateToken, requireAdmin, async (req: any, res) => {\n    try {\n      const consultations = Array.from((storage as any).consultations.values());\n      res.json(consultations);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  // Admin home tuition applications endpoint\n  app.get(\"/api/admin/home-tuition-applications\", authenticateToken, requireAdmin, async (req: any, res) => {\n    try {\n      const applications = Array.from((storage as any).homeTuitionApplications?.values() || []);\n      res.json(applications);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  // Admin support chats endpoint\n  app.get(\"/api/admin/support-chats\", authenticateToken, requireAdmin, async (req: any, res) => {\n    try {\n      const supportChats = Array.from((storage as any).supportChats?.values() || []);\n      res.json(supportChats);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  // Chat analytics endpoint\n  app.get(\"/api/admin/chat-analytics\", authenticateToken, requireAdmin, async (req: any, res) => {\n    try {\n      const analytics = {\n        avgResponseTime: 2.5,\n        satisfactionRate: 94,\n        resolutionRate: 89\n      };\n      res.json(analytics);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  // ========== HOME TUITION SYSTEM ==========\n  \n  // Get all home tuition courses\n  app.get(\"/api/home-tuition/courses\", async (req, res) => {\n    try {\n      const courses = await storage.getActiveHomeTuitionCourses();\n      res.json(courses);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  // Get specific home tuition course\n  app.get(\"/api/home-tuition/courses/:id\", async (req, res) => {\n    try {\n      const course = await storage.getHomeTuitionCourse(req.params.id);\n      if (!course) {\n        return res.status(404).json({ message: \"Course not found\" });\n      }\n      res.json(course);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  // Create home tuition course (Admin only)\n  app.post(\"/api/home-tuition/courses\", authenticateToken, requireAdmin, async (req, res) => {\n    try {\n      const parsed = insertHomeTuitionCourseSchema.parse(req.body);\n      const course = await storage.createHomeTuitionCourse(parsed);\n      res.status(201).json(course);\n    } catch (error: any) {\n      if (error.name === \"ZodError\") {\n        return res.status(400).json({ message: \"Invalid course data\", errors: error.errors });\n      }\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  // Update home tuition course (Admin only)\n  app.put(\"/api/home-tuition/courses/:id\", authenticateToken, requireAdmin, async (req, res) => {\n    try {\n      const course = await storage.updateHomeTuitionCourse(req.params.id, req.body);\n      if (!course) {\n        return res.status(404).json({ message: \"Course not found\" });\n      }\n      res.json(course);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  // Submit home tuition application\n  app.post(\"/api/home-tuition/applications\", authenticateToken, async (req: any, res) => {\n    try {\n      const applicationData = {\n        ...req.body,\n        applicantId: req.user.userId, // Use authenticated user ID\n      };\n      \n      const parsed = insertHomeTuitionApplicationSchema.parse(applicationData);\n      const application = await storage.createHomeTuitionApplication(parsed);\n      \n      // Log audit event\n      await storage.createAuditLog({\n        userId: req.user.userId,\n        action: \"HOME_TUITION_APPLICATION_SUBMITTED\",\n        resourceType: \"home_tuition_application\",\n        resourceId: application.id,\n        details: { courseId: parsed.courseId, applicationType: parsed.applicationType },\n        ipAddress: req.ip,\n        userAgent: req.get(\"User-Agent\"),\n      });\n      \n      res.status(201).json(application);\n    } catch (error: any) {\n      if (error.name === \"ZodError\") {\n        return res.status(400).json({ message: \"Invalid application data\", errors: error.errors });\n      }\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  // Get user's home tuition applications\n  app.get(\"/api/home-tuition/applications\", authenticateToken, async (req: any, res) => {\n    try {\n      const applications = await storage.getHomeTuitionApplicationsByApplicant(req.user.userId);\n      res.json(applications);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  // Get specific home tuition application\n  app.get(\"/api/home-tuition/applications/:id\", authenticateToken, async (req: any, res) => {\n    try {\n      const application = await storage.getHomeTuitionApplication(req.params.id);\n      if (!application) {\n        return res.status(404).json({ message: \"Application not found\" });\n      }\n      \n      // Check if user is owner or admin\n      if (application.applicantId !== req.user.userId && !req.user.isAdmin) {\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n      \n      res.json(application);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  // Admin: Get all home tuition applications\n  app.get(\"/api/admin/home-tuition/applications\", authenticateToken, requireAdmin, async (req, res) => {\n    try {\n      const { status } = req.query;\n      let applications;\n      \n      if (status) {\n        applications = await storage.getHomeTuitionApplicationsByStatus(status as string);\n      } else {\n        applications = await storage.getAllHomeTuitionApplications();\n      }\n      \n      res.json(applications);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  // Admin: Update home tuition application status\n  app.put(\"/api/admin/home-tuition/applications/:id\", authenticateToken, requireAdmin, async (req, res) => {\n    try {\n      const application = await storage.updateHomeTuitionApplication(req.params.id, req.body);\n      if (!application) {\n        return res.status(404).json({ message: \"Application not found\" });\n      }\n      res.json(application);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  // ========== FILE UPLOAD SYSTEM ==========\n  \n  // Get upload URL for file uploads\n  app.post(\"/api/objects/upload\", async (req, res) => {\n    try {\n      const { fileType = \"aadhar\" } = req.body;\n      const objectStorageService = new ObjectStorageService();\n      const uploadURL = await objectStorageService.getUploadURL(fileType);\n      res.json({ uploadURL });\n    } catch (error: any) {\n      console.error(\"Error getting upload URL:\", error);\n      res.status(500).json({ message: \"Failed to get upload URL\", error: error.message });\n    }\n  });\n\n  // Serve uploaded files\n  app.get(\"/objects/:objectPath(*)\", async (req, res) => {\n    try {\n      const objectStorageService = new ObjectStorageService();\n      const objectFile = await objectStorageService.getObjectFile(req.path);\n      objectStorageService.downloadObject(objectFile, res);\n    } catch (error: any) {\n      console.error(\"Error serving file:\", error);\n      if (error.name === \"ObjectNotFoundError\") {\n        return res.status(404).json({ message: \"File not found\" });\n      }\n      res.status(500).json({ message: \"Error serving file\" });\n    }\n  });\n\n  // ========== STUDENT COMMUNICATION SYSTEM ==========\n  \n  // Get student conversations\n  app.get(\"/api/student/conversations\", authenticateToken, async (req: any, res) => {\n    try {\n      const conversations = await storage.getStudentConversationsByStudent(req.user.userId);\n      res.json(conversations);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  // Create new student conversation\n  app.post(\"/api/student/conversations\", authenticateToken, async (req: any, res) => {\n    try {\n      const conversationData = {\n        ...req.body,\n        studentId: req.user.userId,\n        astrologerId: \"admin-user-id\", // This should be the admin/astrologer ID\n        conversationId: require(\"crypto\").randomUUID(),\n      };\n      \n      const parsed = insertStudentConversationSchema.parse(conversationData);\n      const conversation = await storage.createStudentConversation(parsed);\n      res.status(201).json(conversation);\n    } catch (error: any) {\n      if (error.name === \"ZodError\") {\n        return res.status(400).json({ message: \"Invalid conversation data\", errors: error.errors });\n      }\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  // Get messages in a conversation\n  app.get(\"/api/student/conversations/:conversationId/messages\", authenticateToken, async (req: any, res) => {\n    try {\n      const { conversationId } = req.params;\n      const { limit, offset } = req.query;\n      \n      // Verify user has access to this conversation\n      const conversation = await storage.getStudentConversation(conversationId);\n      if (!conversation) {\n        return res.status(404).json({ message: \"Conversation not found\" });\n      }\n      \n      if (conversation.studentId !== req.user.userId && !req.user.isAdmin) {\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n      \n      const messages = await storage.getStudentMessagesByConversation(\n        conversationId,\n        limit ? parseInt(limit as string) : undefined,\n        offset ? parseInt(offset as string) : undefined\n      );\n      \n      res.json(messages);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  // Send message in conversation\n  app.post(\"/api/student/conversations/:conversationId/messages\", authenticateToken, async (req: any, res) => {\n    try {\n      const { conversationId } = req.params;\n      \n      // Verify user has access to this conversation\n      const conversation = await storage.getStudentConversation(conversationId);\n      if (!conversation) {\n        return res.status(404).json({ message: \"Conversation not found\" });\n      }\n      \n      if (conversation.studentId !== req.user.userId && !req.user.isAdmin) {\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n      \n      const messageData = {\n        ...req.body,\n        conversationId,\n        senderId: req.user.userId,\n        studentId: conversation.studentId,\n        astrologerId: conversation.astrologerId,\n      };\n      \n      const parsed = insertStudentMessageSchema.parse(messageData);\n      const message = await storage.createStudentMessage(parsed);\n      res.status(201).json(message);\n    } catch (error: any) {\n      if (error.name === \"ZodError\") {\n        return res.status(400).json({ message: \"Invalid message data\", errors: error.errors });\n      }\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  // Mark message as read\n  app.put(\"/api/student/messages/:messageId/read\", authenticateToken, async (req: any, res) => {\n    try {\n      await storage.markStudentMessageAsRead(req.params.messageId);\n      res.json({ success: true });\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  // Mark all messages in conversation as read\n  app.put(\"/api/student/conversations/:conversationId/read\", authenticateToken, async (req: any, res) => {\n    try {\n      const { conversationId } = req.params;\n      \n      // Verify user has access to this conversation\n      const conversation = await storage.getStudentConversation(conversationId);\n      if (!conversation) {\n        return res.status(404).json({ message: \"Conversation not found\" });\n      }\n      \n      if (conversation.studentId !== req.user.userId && !req.user.isAdmin) {\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n      \n      await storage.markAllStudentMessagesAsRead(conversationId, req.user.userId);\n      res.json({ success: true });\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  // Admin: Get all student conversations\n  app.get(\"/api/admin/student/conversations\", authenticateToken, requireAdmin, async (req: any, res) => {\n    try {\n      const conversations = await storage.getStudentConversationsByAstrologer(req.user.userId);\n      res.json(conversations);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  // ========== PHONEPE PAYMENT INTEGRATION ==========\n  \n  // Import PhonePe service\n  const { phonePeService } = await import('./phonepe');\n\n  // Create PhonePe payment\n  app.post(\"/api/payments/phonepe/create\", authenticateToken, async (req: any, res) => {\n    try {\n      const { amount, merchantOrderId, merchantUserId, items, paymentMethod, upiId, redirectUrl, callbackUrl } = req.body;\n      \n      const paymentRequest = {\n        amount,\n        merchantOrderId,\n        merchantUserId,\n        redirectUrl,\n        callbackUrl,\n        paymentInstrument: paymentMethod === 'upi_collect' ? {\n          type: 'UPI_COLLECT' as const,\n          targetApp: 'com.phonepe.app'\n        } : {\n          type: 'PAY_PAGE' as const\n        }\n      };\n\n      // Store order in storage\n      const order = {\n        id: merchantOrderId,\n        customerId: req.user.userId,\n        items,\n        totalAmount: (amount / 100).toString(), // Convert from paisa to rupees as string\n        status: 'pending',\n        paymentMethod,\n        paymentGateway: 'phonepe',\n        createdAt: new Date(),\n        updatedAt: new Date(),\n      };\n\n      await storage.createOrder(order);\n\n      const result = await phonePeService.createPayment(paymentRequest);\n      \n      if (result.success) {\n        res.json({\n          success: true,\n          paymentUrl: (result.data as any)?.paymentUrl,\n          transactionId: result.data?.merchantTransactionId,\n          message: result.message\n        });\n      } else {\n        res.status(400).json({\n          success: false,\n          message: result.message\n        });\n      }\n    } catch (error: any) {\n      console.error('Payment creation error:', error);\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  // PhonePe payment callback/webhook\n  app.post(\"/api/payments/phonepe/callback\", async (req, res) => {\n    try {\n      const { transactionId, code, merchantId } = req.body;\n      \n      if (code === 'PAYMENT_SUCCESS') {\n        // Update order status\n        const order = await storage.getOrderByTransactionId(transactionId);\n        if (order) {\n          await storage.updateOrderStatus(order.id, 'completed');\n          \n          // Get user details for notifications  \n          const user = await storage.getUser(order.customerId);\n          if (user) {\n            // Send payment confirmation SMS\n            try {\n              await twilioService.sendPaymentConfirmation(\n                user.phoneNumber, \n                user.countryCode, \n                {\n                  transactionId,\n                  amount: parseFloat(order.totalAmount),\n                  items: Array.isArray(order.items) ? (order.items as any[]).map((item: any) => item.name) : ['Order items']\n                }\n              );\n            } catch (error) {\n              console.error('Failed to send payment confirmation SMS:', error);\n            }\n\n            // Send payment receipt email\n            if (user.email) {\n              try {\n                await emailService.sendPaymentReceiptEmail(\n                  user.email,\n                  user.fullName,\n                  {\n                    transactionId,\n                    amount: parseFloat(order.totalAmount),\n                    items: Array.isArray(order.items) ? order.items : [],\n                    paymentMethod: 'PhonePe UPI'\n                  }\n                );\n              } catch (error) {\n                console.error('Failed to send payment receipt email:', error);\n              }\n            }\n\n            // If order contains consultations, send booking confirmation\n            const consultationItems = Array.isArray(order.items) ? order.items.filter((item: any) => item.type === 'consultation') : [];\n            for (const consultation of consultationItems) {\n              try {\n                // Send booking confirmation SMS\n                await twilioService.sendBookingConfirmation(\n                  user.phoneNumber,\n                  user.countryCode,\n                  {\n                    bookingId: order.id,\n                    consultationType: consultation.name,\n                    dateTime: 'To be scheduled',\n                    astrologer: 'Arup Shastri',\n                    amount: consultation.price\n                  }\n                );\n\n                // Send booking confirmation email\n                if (user.email) {\n                  await emailService.sendBookingConfirmationEmail(\n                    user.email,\n                    user.fullName,\n                    {\n                      bookingId: order.id,\n                      consultationType: consultation.name,\n                      dateTime: 'To be scheduled - you will be contacted shortly',\n                      astrologer: 'Astrologer Arup Shastri',\n                      amount: consultation.price,\n                      paymentId: transactionId\n                    }\n                  );\n                }\n              } catch (error) {\n                console.error('Failed to send booking confirmation:', error);\n              }\n            }\n\n            // If order contains courses, send enrollment confirmation  \n            const courseItems = Array.isArray(order.items) ? order.items.filter((item: any) => item.type === 'course') : [];\n            for (const course of courseItems) {\n              try {\n                // Send course enrollment SMS\n                await twilioService.sendCourseEnrollmentConfirmation(\n                  user.phoneNumber,\n                  user.countryCode,\n                  {\n                    courseName: course.name,\n                    startDate: 'To be announced',\n                    duration: course.duration || 'As specified'\n                  }\n                );\n\n                // Send course enrollment email\n                if (user.email) {\n                  await emailService.sendCourseEnrollmentEmail(\n                    user.email,\n                    user.fullName,\n                    {\n                      courseName: course.name,\n                      startDate: 'To be announced - you will be notified',\n                      duration: course.duration || 'As specified in course details',\n                      courseId: course.id\n                    }\n                  );\n                }\n              } catch (error) {\n                console.error('Failed to send course enrollment confirmation:', error);\n              }\n            }\n          }\n        }\n      }\n      \n      res.json({ success: true });\n    } catch (error: any) {\n      console.error('PhonePe callback error:', error);\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  // Verify PhonePe payment\n  app.get(\"/api/payments/phonepe/verify/:transactionId\", authenticateToken, async (req: any, res) => {\n    try {\n      const { transactionId } = req.params;\n      const result = await phonePeService.verifyPayment(transactionId);\n      \n      if (result.success && result.data) {\n        // Update order status based on payment status\n        const order = await storage.getOrderByTransactionId(transactionId);\n        if (order) {\n          const status = result.data.state === 'COMPLETED' ? 'completed' : \n                        result.data.state === 'FAILED' ? 'failed' : 'pending';\n          await storage.updateOrderStatus(order.id, status);\n        }\n      }\n      \n      res.json(result);\n    } catch (error: any) {\n      console.error('Payment verification error:', error);\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  // Get payment details\n  app.get(\"/api/payments/details/:transactionId\", authenticateToken, async (req: any, res) => {\n    try {\n      const { transactionId } = req.params;\n      const order = await storage.getOrderByTransactionId(transactionId);\n      \n      if (!order) {\n        return res.status(404).json({ message: \"Order not found\" });\n      }\n      \n      // Verify user owns this order\n      if (order.userId !== req.user.userId) {\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n      \n      res.json(order);\n    } catch (error: any) {\n      console.error('Payment details error:', error);\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  // Get user orders\n  app.get(\"/api/orders\", authenticateToken, async (req: any, res) => {\n    try {\n      const orders = await storage.getUserOrders(req.user.userId);\n      res.json(orders);\n    } catch (error: any) {\n      console.error('Get orders error:', error);\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  // ========== MOBILE OTP AUTHENTICATION ==========\n\n  // Import communication services\n  const { twilioService } = await import('./twilio-service');\n  const { emailService } = await import('./email-service');\n\n  // Send OTP for registration/login\n  app.post(\"/api/auth/send-otp\", async (req, res) => {\n    try {\n      const { phoneNumber, countryCode, purpose } = req.body;\n      \n      // Generate 6-digit OTP\n      const otp = Math.floor(100000 + Math.random() * 900000).toString();\n      \n      // Store OTP (expires in 10 minutes)\n      const otpData = {\n        id: uuidv4(),\n        phoneNumber,\n        countryCode,\n        otp,\n        purpose, // registration, login, mobile_change, recovery\n        isUsed: false,\n        expiresAt: new Date(Date.now() + 10 * 60 * 1000), // 10 minutes\n        ipAddress: req.ip,\n        userAgent: req.get('User-Agent'),\n        createdAt: new Date(),\n      };\n      \n      await storage.createOtpVerification(otpData);\n      \n      // Send OTP via Twilio SMS\n      const smsResult = await twilioService.sendOTP(phoneNumber, countryCode, otp, purpose);\n      \n      if (!smsResult.success) {\n        console.error('Failed to send SMS OTP:', smsResult.error);\n      }\n      \n      res.json({ \n        message: \"OTP sent successfully\",\n        smsDelivered: smsResult.success,\n        // Show OTP only in development mode\n        otp: process.env.NODE_ENV === 'development' ? otp : undefined\n      });\n    } catch (error: any) {\n      console.error('Send OTP error:', error);\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  // Verify OTP and login/register\n  app.post(\"/api/auth/verify-otp\", async (req, res) => {\n    try {\n      const { phoneNumber, countryCode, otp, purpose, userData } = req.body;\n      \n      // Verify OTP\n      const otpRecord = await storage.verifyOtp(phoneNumber, countryCode, otp, purpose);\n      if (!otpRecord) {\n        return res.status(400).json({ message: \"Invalid or expired OTP\" });\n      }\n      \n      let user;\n      if (purpose === 'registration') {\n        // Create new user\n        const hashedPassword = await bcrypt.hash(userData.password || Math.random().toString(), 10);\n        \n        user = await storage.createUser({\n          ...userData,\n          phoneNumber,\n          countryCode,\n          password: hashedPassword,\n          isVerified: true,\n          phoneVerified: true,\n          createdAt: new Date(),\n          updatedAt: new Date(),\n        });\n\n        // Send welcome email after successful registration\n        if (user && user.email) {\n          try {\n            await emailService.sendWelcomeEmail(user.email, user.fullName);\n          } catch (emailError) {\n            console.error('Failed to send welcome email:', emailError);\n          }\n        }\n      } else if (purpose === 'login') {\n        // Find existing user\n        user = await storage.getUserByPhone(phoneNumber, countryCode);\n        if (!user) {\n          return res.status(404).json({ message: \"User not found\" });\n        }\n      }\n      \n      if (user) {\n        // Generate JWT token\n        const token = jwt.sign({ userId: user.id }, JWT_SECRET, { expiresIn: \"30d\" });\n        \n        // Update last login\n        await storage.updateUserLoginInfo(user.id, req.ip, req.get('User-Agent'));\n        \n        res.json({\n          token,\n          user: {\n            id: user.id,\n            fullName: user.fullName,\n            email: user.email,\n            phoneNumber: user.phoneNumber,\n            isVerified: user.isVerified,\n            isAdmin: user.isAdmin\n          }\n        });\n      } else {\n        res.status(400).json({ message: \"User verification failed\" });\n      }\n    } catch (error: any) {\n      console.error('Verify OTP error:', error);\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  // ========== NOTIFICATION AND REMINDER ENDPOINTS ==========\n\n  // Send consultation reminder (can be triggered by cron job)\n  app.post(\"/api/notifications/consultation-reminder\", authenticateToken, async (req: any, res) => {\n    try {\n      const { consultationId, reminderType } = req.body; // reminderType: '24hours' | '1hour'\n      \n      const consultation = await storage.getConsultation(consultationId);\n      if (!consultation) {\n        return res.status(404).json({ message: \"Consultation not found\" });\n      }\n      \n      const user = await storage.getUser(consultation.clientId);\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n      \n      const consultationDetails = {\n        consultationType: consultation.type,\n        dateTime: consultation.scheduledAt ? new Date(consultation.scheduledAt).toLocaleString('en-IN') : 'To be scheduled',\n        astrologer: 'Astrologer Arup Shastri',\n        meetingLink: consultation.meetingId || undefined\n      };\n      \n      // Send SMS reminder\n      try {\n        await twilioService.sendConsultationReminder(\n          user.phoneNumber,\n          user.countryCode,\n          consultationDetails\n        );\n      } catch (error) {\n        console.error('Failed to send SMS reminder:', error);\n      }\n      \n      // Send email reminder\n      if (user.email) {\n        try {\n          await emailService.sendConsultationReminderEmail(\n            user.email,\n            user.fullName,\n            {\n              ...consultationDetails,\n              reminderType: reminderType || '24hours'\n            }\n          );\n        } catch (error) {\n          console.error('Failed to send email reminder:', error);\n        }\n      }\n      \n      res.json({ message: \"Reminder sent successfully\" });\n    } catch (error: any) {\n      console.error('Send reminder error:', error);\n      res.status(500).json({ message: error.message });\n    }\n  });\n  \n  // Get notification service status\n  app.get(\"/api/notifications/status\", (req, res) => {\n    res.json({\n      twilioConfigured: twilioService.isConfigured(),\n      emailConfigured: emailService.isConfigured(),\n      services: {\n        sms: {\n          provider: 'Twilio',\n          configured: twilioService.isConfigured(),\n          features: ['OTP', 'Booking confirmations', 'Payment notifications', 'Reminders']\n        },\n        email: {\n          provider: 'Amazon SES',\n          configured: emailService.isConfigured(),\n          features: ['Welcome emails', 'Booking confirmations', 'Payment receipts', 'Course enrollment', 'Reminders']\n        }\n      }\n    });\n  });\n\n  // Register consultation session routes\n  registerConsultationSessionRoutes(app);\n\n  const httpServer = createServer(app);\n\n  // WebSocket server for real-time chat\n  const wss = new WebSocketServer({ server: httpServer, path: '/ws' });\n\n  wss.on('connection', (ws: WebSocket, req) => {\n    console.log('New WebSocket connection');\n\n    ws.on('message', async (data: Buffer) => {\n      try {\n        const message = JSON.parse(data.toString());\n        \n        if (message.type === 'chat_message') {\n          // Broadcast message to all clients in the same consultation\n          wss.clients.forEach((client) => {\n            if (client !== ws && client.readyState === WebSocket.OPEN) {\n              client.send(JSON.stringify({\n                type: 'chat_message',\n                consultationId: message.consultationId,\n                senderId: message.senderId,\n                message: message.message,\n                timestamp: new Date().toISOString(),\n              }));\n            }\n          });\n        }\n      } catch (error) {\n        console.error('WebSocket message error:', error);\n      }\n    });\n\n    ws.on('close', () => {\n      console.log('WebSocket connection closed');\n    });\n  });\n\n  return httpServer;\n}\n","size_bytes":78354},"server/storage.ts":{"content":"import { \n  type User, \n  type InsertUser, \n  type Consultation, \n  type InsertConsultation,\n  type Course,\n  type InsertCourse,\n  type Product,\n  type InsertProduct,\n  type Order,\n  type InsertOrder,\n  type ChatMessage,\n  type InsertChatMessage,\n  type CourseEnrollment,\n  type Notification,\n  type AuditLog,\n  type Faq,\n  type InsertFaq,\n  type SupportChat,\n  type InsertSupportChat,\n  type SupportChatMessage,\n  type InsertSupportChatMessage,\n  type HomeTuitionApplication,\n  type InsertHomeTuitionApplication,\n  type HomeTuitionCourse,\n  type InsertHomeTuitionCourse,\n  type StudentMessage,\n  type InsertStudentMessage,\n  type StudentConversation,\n  type InsertStudentConversation\n} from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\n\nexport interface IStorage {\n  // User management\n  getUser(id: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  getUserByPhone(phoneNumber: string, countryCode?: string): Promise<User | undefined>;\n  getUserByUserId(userId: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  updateUser(id: string, updates: Partial<User>): Promise<User | undefined>;\n  updateStripeCustomerId(id: string, stripeCustomerId: string): Promise<User | undefined>;\n  updateUserStripeInfo(id: string, info: { customerId: string; subscriptionId: string }): Promise<User | undefined>;\n  \n  // OTP verification\n  createOtpVerification(otp: { phoneNumber: string; countryCode: string; otp: string; purpose: string; userId?: string; ipAddress?: string; userAgent?: string }): Promise<any>;\n  getOtpVerification(phoneNumber: string, countryCode: string, purpose: string): Promise<any | undefined>;\n  verifyOtp(phoneNumber: string, countryCode: string, otp: string, purpose: string): Promise<boolean>;\n  \n  // Security events\n  createSecurityEvent(event: { userId?: string; eventType: string; description: string; ipAddress?: string; userAgent?: string; riskLevel?: string; details?: any }): Promise<any>;\n  \n  // Auth sessions\n  createAuthSession(session: { userId: string; token: string; refreshToken?: string; deviceId?: string; deviceInfo?: any; ipAddress?: string; userAgent?: string; expiresAt: Date }): Promise<any>;\n  getAuthSession(token: string): Promise<any | undefined>;\n  invalidateAuthSession(token: string): Promise<void>;\n  \n  // Legal agreements\n  createLegalAgreement(agreement: { userId: string; agreementType: string; version: string; ipAddress?: string; userAgent?: string; consentMethod: string }): Promise<any>;\n  \n  // Consultation management\n  getConsultation(id: string): Promise<Consultation | undefined>;\n  getConsultationsByClient(clientId: string): Promise<Consultation[]>;\n  createConsultation(consultation: InsertConsultation): Promise<Consultation>;\n  updateConsultation(id: string, updates: Partial<Consultation>): Promise<Consultation | undefined>;\n  getUpcomingConsultations(): Promise<Consultation[]>;\n  \n  // Course management\n  getCourse(id: string): Promise<Course | undefined>;\n  getAllCourses(): Promise<Course[]>;\n  getActiveCourses(): Promise<Course[]>;\n  createCourse(course: InsertCourse): Promise<Course>;\n  updateCourse(id: string, updates: Partial<Course>): Promise<Course | undefined>;\n  \n  // Course enrollment\n  enrollStudent(studentId: string, courseId: string): Promise<CourseEnrollment>;\n  getStudentEnrollments(studentId: string): Promise<CourseEnrollment[]>;\n  getCourseEnrollments(courseId: string): Promise<CourseEnrollment[]>;\n  updateEnrollmentProgress(id: string, progress: number): Promise<CourseEnrollment | undefined>;\n  \n  // Product management\n  getProduct(id: string): Promise<Product | undefined>;\n  getAllProducts(): Promise<Product[]>;\n  getProductsByCategory(category: string): Promise<Product[]>;\n  createProduct(product: InsertProduct): Promise<Product>;\n  updateProduct(id: string, updates: Partial<Product>): Promise<Product | undefined>;\n  \n  // Order management\n  getOrder(id: string): Promise<Order | undefined>;\n  getOrdersByCustomer(customerId: string): Promise<Order[]>;\n  createOrder(order: InsertOrder): Promise<Order>;\n  updateOrder(id: string, updates: Partial<Order>): Promise<Order | undefined>;\n  \n  // Chat messages\n  getChatMessages(consultationId: string): Promise<ChatMessage[]>;\n  createChatMessage(message: InsertChatMessage): Promise<ChatMessage>;\n  \n  // Notifications\n  getUserNotifications(userId: string): Promise<Notification[]>;\n  createNotification(notification: { userId: string; title: string; message: string; type: string; actionUrl?: string }): Promise<Notification>;\n  markNotificationRead(id: string): Promise<void>;\n  \n  // Audit logs\n  createAuditLog(log: { userId?: string; action: string; resourceType: string; resourceId?: string; details?: any; ipAddress?: string; userAgent?: string }): Promise<AuditLog>;\n  \n  // FAQ management\n  getAllFaqs(): Promise<Faq[]>;\n  getFaqsByCategory(category: string): Promise<Faq[]>;\n  searchFaqs(query: string): Promise<Faq[]>;\n  createFaq(faq: InsertFaq): Promise<Faq>;\n  updateFaq(id: string, updates: Partial<Faq>): Promise<Faq | undefined>;\n  deleteFaq(id: string): Promise<boolean>;\n  incrementFaqView(id: string): Promise<void>;\n  rateFaqHelpful(id: string, isHelpful: boolean): Promise<void>;\n  \n  // Support chat management\n  getSupportChat(sessionId: string): Promise<SupportChat | undefined>;\n  createSupportChat(chat: InsertSupportChat): Promise<SupportChat>;\n  updateSupportChat(id: string, updates: Partial<SupportChat>): Promise<SupportChat | undefined>;\n  getSupportChatMessages(chatId: string): Promise<SupportChatMessage[]>;\n  createSupportChatMessage(message: InsertSupportChatMessage): Promise<SupportChatMessage>;\n  rateChatMessage(messageId: string, isHelpful: boolean): Promise<void>;\n  \n  // Home Tuition Course management\n  getHomeTuitionCourse(id: string): Promise<HomeTuitionCourse | undefined>;\n  getAllHomeTuitionCourses(): Promise<HomeTuitionCourse[]>;\n  getActiveHomeTuitionCourses(): Promise<HomeTuitionCourse[]>;\n  createHomeTuitionCourse(course: InsertHomeTuitionCourse): Promise<HomeTuitionCourse>;\n  updateHomeTuitionCourse(id: string, updates: Partial<HomeTuitionCourse>): Promise<HomeTuitionCourse | undefined>;\n  \n  // Home Tuition Application management\n  getHomeTuitionApplication(id: string): Promise<HomeTuitionApplication | undefined>;\n  getHomeTuitionApplicationsByApplicant(applicantId: string): Promise<HomeTuitionApplication[]>;\n  getHomeTuitionApplicationsByCourse(courseId: string): Promise<HomeTuitionApplication[]>;\n  getAllHomeTuitionApplications(): Promise<HomeTuitionApplication[]>;\n  getHomeTuitionApplicationsByStatus(status: string): Promise<HomeTuitionApplication[]>;\n  createHomeTuitionApplication(application: InsertHomeTuitionApplication): Promise<HomeTuitionApplication>;\n  updateHomeTuitionApplication(id: string, updates: Partial<HomeTuitionApplication>): Promise<HomeTuitionApplication | undefined>;\n  \n  // Student Communication management\n  getStudentConversation(conversationId: string): Promise<StudentConversation | undefined>;\n  getStudentConversationsByStudent(studentId: string): Promise<StudentConversation[]>;\n  getStudentConversationsByAstrologer(astrologerId: string): Promise<StudentConversation[]>;\n  createStudentConversation(conversation: InsertStudentConversation): Promise<StudentConversation>;\n  updateStudentConversation(id: string, updates: Partial<StudentConversation>): Promise<StudentConversation | undefined>;\n  \n  getStudentMessages(conversationId: string): Promise<StudentMessage[]>;\n  createStudentMessage(message: InsertStudentMessage): Promise<StudentMessage>;\n  markStudentMessageAsRead(messageId: string): Promise<void>;\n  getUnreadStudentMessagesCount(conversationId: string, userId: string): Promise<number>;\n  markAllStudentMessagesAsRead(conversationId: string, userId: string): Promise<void>;\n  getStudentMessagesByConversation(conversationId: string, limit?: number, offset?: number): Promise<StudentMessage[]>;\n  \n  // Order and Payment management\n  getUserOrders(userId: string): Promise<Order[]>;\n  getOrderByTransactionId(transactionId: string): Promise<Order | undefined>;\n  updateOrderStatus(orderId: string, status: string): Promise<Order | undefined>;\n  \n  // Login and Authentication\n  updateUserLoginInfo(userId: string, ipAddress?: string, userAgent?: string): Promise<void>;\n  \n  // OTP Verification specific methods\n  createOtpVerification(otp: { id?: string; phoneNumber: string; countryCode: string; otp: string; purpose: string; isUsed?: boolean; expiresAt: Date; ipAddress?: string; userAgent?: string; createdAt?: Date }): Promise<any>;\n  verifyOtp(phoneNumber: string, countryCode: string, otp: string, purpose: string): Promise<any>;\n}\n\nexport class MemStorage implements IStorage {\n  private users: Map<string, User>;\n  private consultations: Map<string, Consultation>;\n  private courses: Map<string, Course>;\n  private courseEnrollments: Map<string, CourseEnrollment>;\n  private products: Map<string, Product>;\n  private orders: Map<string, Order>;\n  private chatMessages: Map<string, ChatMessage>;\n  private notifications: Map<string, Notification>;\n  private auditLogs: Map<string, AuditLog>;\n  private faqs: Map<string, Faq>;\n  private supportChats: Map<string, SupportChat>;\n  private supportChatMessages: Map<string, SupportChatMessage>;\n  \n  // Home tuition and student communication\n  private homeTuitionCourses: Map<string, HomeTuitionCourse>;\n  private homeTuitionApplications: Map<string, HomeTuitionApplication>;\n  private studentConversations: Map<string, StudentConversation>;\n  private studentMessages: Map<string, StudentMessage>;\n  private otpVerifications: Map<string, any>;\n  private authSessions: Map<string, any>;\n  private securityEvents: Map<string, any>;\n  private legalAgreements: Map<string, any>;\n\n  constructor() {\n    this.users = new Map();\n    this.consultations = new Map();\n    this.courses = new Map();\n    this.courseEnrollments = new Map();\n    this.products = new Map();\n    this.orders = new Map();\n    this.chatMessages = new Map();\n    this.notifications = new Map();\n    this.auditLogs = new Map();\n    this.faqs = new Map();\n    this.supportChats = new Map();\n    this.supportChatMessages = new Map();\n    \n    // Home tuition and student communication\n    this.homeTuitionCourses = new Map();\n    this.homeTuitionApplications = new Map();\n    this.studentConversations = new Map();\n    this.studentMessages = new Map();\n    this.otpVerifications = new Map();\n    this.authSessions = new Map();\n    this.securityEvents = new Map();\n    this.legalAgreements = new Map();\n    \n    // Initialize with sample data\n    this.initializeSampleData();\n    this.initializeSampleFAQs();\n    this.initializeHomeTuitionData();\n  }\n\n  private initializeSampleData() {\n    // Create admin user\n    const adminUser: User = {\n      id: randomUUID(),\n      username: \"arupshastri\",\n      email: \"arup@jaiguruastroremedy.com\",\n      password: \"$2b$10$8v0Eb6M4DnK//5e01KoxEuODs5c47suALGBShQPYFcHPHgFaR.lzi\", // admin123\n      fullName: \"Arup Shastri\",\n      phoneNumber: \"9999999999\",\n      countryCode: \"+91\",\n      phoneVerified: true,\n      emailVerified: true,\n      whatsappNumber: \"9999999999\",\n      dateOfBirth: null,\n      timeOfBirth: null,\n      placeOfBirth: \"Kolkata, West Bengal, India\",\n      isVerified: true,\n      isAdmin: true,\n      stripeCustomerId: null,\n      stripeSubscriptionId: null,\n      preferredLanguage: \"en\",\n      notes: \"Master Astrologer with 18+ years of experience\",\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n    this.users.set(adminUser.id, adminUser);\n\n    // Create sample courses\n    const beginnerCourse: Course = {\n      id: randomUUID(),\n      title: \"Astrology Fundamentals\",\n      description: \"Perfect for beginners. Learn the basics of Vedic astrology, zodiac signs, houses, and planetary influences.\",\n      price: \"15999\",\n      maxStudents: 100,\n      currentStudents: 25,\n      level: \"beginner\",\n      teachingLanguage: \"en\",\n      modules: [\n        { title: \"Introduction to Vedic Astrology\", duration: 60, videoUrl: \"\", materials: [] },\n        { title: \"Understanding Zodiac Signs\", duration: 90, videoUrl: \"\", materials: [] },\n        { title: \"Houses and Their Meanings\", duration: 75, videoUrl: \"\", materials: [] }\n      ],\n      isActive: true,\n      startDate: new Date(),\n      endDate: new Date(Date.now() + 90 * 24 * 60 * 60 * 1000),\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n    this.courses.set(beginnerCourse.id, beginnerCourse);\n\n    // Create sample products\n    const gemstoneProduct: Product = {\n      id: randomUUID(),\n      name: \"Astrological Ruby Gemstone\",\n      description: \"Authentic certified ruby gemstone for Sun planet remedy\",\n      category: \"gemstones\",\n      price: \"2500\",\n      currency: \"INR\",\n      images: [\"/api/placeholder/gemstone-ruby.jpg\"],\n      stock: 10,\n      isActive: true,\n      specifications: {\n        weight: \"3 carats\",\n        origin: \"Burma\",\n        certification: \"GIA Certified\",\n        treatment: \"Natural, Unheated\"\n      },\n      countryPricing: {\n        \"US\": { price: \"30\", currency: \"USD\" },\n        \"UK\": { price: \"25\", currency: \"GBP\" },\n        \"IN\": { price: \"2500\", currency: \"INR\" }\n      },\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n    this.products.set(gemstoneProduct.id, gemstoneProduct);\n  }\n\n  private async initializeSampleFAQs() {\n    const sampleFAQs = [\n      // Consultation FAQs\n      {\n        question: \"How do I book a consultation?\",\n        answer: \"You can book a consultation by visiting our booking page and selecting your preferred consultation type (Video, Audio, Chat, or In-Person). Choose your date and time, then complete the payment to confirm your booking.\",\n        category: \"consultation\",\n        keywords: [\"book\", \"booking\", \"appointment\", \"schedule\", \"consultation\"],\n        priority: 10,\n        isActive: true,\n      },\n      {\n        question: \"What are the different types of consultations available?\",\n        answer: \"We offer 4 types of consultations: Video Call (₹2,500) for face-to-face sessions, Audio Call (₹1,800) for voice-only guidance, Chat Session (₹1,200) for text-based consultation, and In-Person (₹5,000) for traditional meetings at our Kolkata location.\",\n        category: \"consultation\",\n        keywords: [\"types\", \"video\", \"audio\", \"chat\", \"in-person\", \"price\", \"cost\"],\n        priority: 9,\n        isActive: true,\n      },\n      {\n        question: \"How long does each consultation last?\",\n        answer: \"Our consultations vary by plan: Quick Consultation (15 minutes), Focused Session (30 minutes), In-Depth Reading (60 minutes), and Comprehensive Analysis (90 minutes). Topic-based consultations are 6 minutes per topic.\",\n        category: \"consultation\",\n        keywords: [\"duration\", \"time\", \"length\", \"minutes\", \"how long\"],\n        priority: 8,\n        isActive: true,\n      },\n      \n      // Course FAQs\n      {\n        question: \"What astrology courses do you offer?\",\n        answer: \"We offer comprehensive Vedic astrology courses for all levels - Beginner, Intermediate, and Expert. Our courses cover birth chart analysis, planetary movements, remedial measures, and practical application of astrological principles.\",\n        category: \"courses\",\n        keywords: [\"courses\", \"learning\", \"vedic\", \"astrology\", \"beginner\", \"expert\"],\n        priority: 10,\n        isActive: true,\n      },\n      {\n        question: \"Are the courses online or offline?\",\n        answer: \"We offer both online and offline courses. Online courses provide flexibility to learn from anywhere, while offline courses offer direct interaction at our center in Kolkata. Both formats include comprehensive study materials.\",\n        category: \"courses\",\n        keywords: [\"online\", \"offline\", \"format\", \"location\", \"study\"],\n        priority: 7,\n        isActive: true,\n      },\n      \n      // Product FAQs\n      {\n        question: \"What kind of products do you sell?\",\n        answer: \"We offer authentic cosmic remedies including gemstones, yantras, rudraksha beads, spiritual books, and other astrological products. All items are energized and blessed for maximum effectiveness.\",\n        category: \"products\",\n        keywords: [\"products\", \"gemstones\", \"yantras\", \"rudraksha\", \"spiritual\", \"remedies\"],\n        priority: 8,\n        isActive: true,\n      },\n      {\n        question: \"How do I know which gemstone is right for me?\",\n        answer: \"The right gemstone depends on your birth chart analysis. We recommend booking a consultation first, where Arup Shastri will analyze your planetary positions and suggest the most suitable gemstones for your specific needs.\",\n        category: \"products\",\n        keywords: [\"gemstone\", \"birth chart\", \"suitable\", \"recommendation\", \"planetary\"],\n        priority: 9,\n        isActive: true,\n      },\n      \n      // Billing FAQs\n      {\n        question: \"What payment methods do you accept?\",\n        answer: \"We accept multiple payment methods including credit/debit cards, UPI, net banking, and digital wallets. For international clients, we also accept PayPal and Stripe payments.\",\n        category: \"billing\",\n        keywords: [\"payment\", \"methods\", \"card\", \"upi\", \"paypal\", \"stripe\", \"international\"],\n        priority: 7,\n        isActive: true,\n      },\n      {\n        question: \"Is my payment secure?\",\n        answer: \"Yes, all payments are processed through secure, encrypted gateways. We use industry-standard security measures and do not store your payment information on our servers.\",\n        category: \"billing\",\n        keywords: [\"secure\", \"payment\", \"safety\", \"encryption\", \"security\"],\n        priority: 6,\n        isActive: true,\n      },\n      \n      // Technical FAQs\n      {\n        question: \"I'm having trouble joining my video consultation. What should I do?\",\n        answer: \"For video consultation issues, please check your internet connection and browser. We recommend using Chrome or Firefox. If problems persist, you can switch to audio consultation or contact our technical support.\",\n        category: \"technical\",\n        keywords: [\"video\", \"trouble\", \"joining\", \"technical\", \"browser\", \"connection\"],\n        priority: 8,\n        isActive: true,\n      },\n      {\n        question: \"Can I reschedule my consultation?\",\n        answer: \"Yes, you can reschedule your consultation up to 24 hours before the scheduled time. Please contact us through the chat or call our support team to reschedule without any additional charges.\",\n        category: \"consultation\",\n        keywords: [\"reschedule\", \"change\", \"appointment\", \"24 hours\", \"cancel\"],\n        priority: 6,\n        isActive: true,\n      },\n      \n      // General FAQs\n      {\n        question: \"Who is Astrologer Arup Shastri?\",\n        answer: \"Arup Shastri is a renowned Vedic astrologer with 18+ years of experience. He has guided over 5000+ clients worldwide and specializes in Vedic astrology, palmistry, numerology, Vastu Shastra, and cosmic remedies.\",\n        category: \"general\",\n        keywords: [\"arup\", \"shastri\", \"astrologer\", \"experience\", \"background\", \"about\"],\n        priority: 10,\n        isActive: true,\n      },\n      {\n        question: \"Do you provide services internationally?\",\n        answer: \"Yes, we serve clients in 100+ countries worldwide. Our online consultations (video, audio, chat) are available globally. We also ship cosmic remedies and products internationally.\",\n        category: \"general\",\n        keywords: [\"international\", \"worldwide\", \"global\", \"countries\", \"shipping\"],\n        priority: 5,\n        isActive: true,\n      }\n    ];\n\n    for (const faqData of sampleFAQs) {\n      await this.createFaq(faqData);\n    }\n  }\n\n  // User methods\n  async getUser(id: string): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(user => user.username === username);\n  }\n\n  async getUserByPhone(phoneNumber: string, countryCode?: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(user => \n      user.phoneNumber === phoneNumber && \n      (!countryCode || user.countryCode === countryCode)\n    );\n  }\n\n  async getUserByUserId(userId: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(user => user.username === userId);\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const id = randomUUID();\n    const user: User = { \n      ...insertUser, \n      id,\n      email: insertUser.email || null,\n      whatsappNumber: insertUser.whatsappNumber || null,\n      dateOfBirth: insertUser.dateOfBirth || null,\n      timeOfBirth: insertUser.timeOfBirth || null,\n      placeOfBirth: insertUser.placeOfBirth || null,\n      preferredLanguage: insertUser.preferredLanguage || \"en\",\n      isVerified: false,\n      isAdmin: false,\n      stripeCustomerId: null,\n      stripeSubscriptionId: null,\n      notes: null,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n    this.users.set(id, user);\n    return user;\n  }\n\n  async updateUser(id: string, updates: Partial<User>): Promise<User | undefined> {\n    const user = this.users.get(id);\n    if (!user) return undefined;\n    \n    const updatedUser = { ...user, ...updates, updatedAt: new Date() };\n    this.users.set(id, updatedUser);\n    return updatedUser;\n  }\n\n  async updateStripeCustomerId(id: string, stripeCustomerId: string): Promise<User | undefined> {\n    return this.updateUser(id, { stripeCustomerId });\n  }\n\n  async updateUserStripeInfo(id: string, info: { customerId: string; subscriptionId: string }): Promise<User | undefined> {\n    return this.updateUser(id, { \n      stripeCustomerId: info.customerId, \n      stripeSubscriptionId: info.subscriptionId \n    });\n  }\n\n  // Consultation methods\n  async getConsultation(id: string): Promise<Consultation | undefined> {\n    return this.consultations.get(id);\n  }\n\n  async getConsultationsByClient(clientId: string): Promise<Consultation[]> {\n    return Array.from(this.consultations.values()).filter(c => c.clientId === clientId);\n  }\n\n  async createConsultation(insertConsultation: InsertConsultation): Promise<Consultation> {\n    const id = randomUUID();\n    const consultation: Consultation = {\n      ...insertConsultation,\n      id,\n      status: \"scheduled\",\n      meetingId: null,\n      notes: insertConsultation.notes || null,\n      language: insertConsultation.language || \"en\",\n      paymentStatus: \"pending\",\n      paymentId: null,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n    this.consultations.set(id, consultation);\n    return consultation;\n  }\n\n  async updateConsultation(id: string, updates: Partial<Consultation>): Promise<Consultation | undefined> {\n    const consultation = this.consultations.get(id);\n    if (!consultation) return undefined;\n    \n    const updatedConsultation = { ...consultation, ...updates, updatedAt: new Date() };\n    this.consultations.set(id, updatedConsultation);\n    return updatedConsultation;\n  }\n\n  async getUpcomingConsultations(): Promise<Consultation[]> {\n    const now = new Date();\n    return Array.from(this.consultations.values())\n      .filter(c => c.scheduledAt > now && c.status === \"scheduled\")\n      .sort((a, b) => a.scheduledAt.getTime() - b.scheduledAt.getTime());\n  }\n\n  // Course methods\n  async getCourse(id: string): Promise<Course | undefined> {\n    return this.courses.get(id);\n  }\n\n  async getAllCourses(): Promise<Course[]> {\n    return Array.from(this.courses.values());\n  }\n\n  async getActiveCourses(): Promise<Course[]> {\n    return Array.from(this.courses.values()).filter(c => c.isActive);\n  }\n\n  async createCourse(insertCourse: InsertCourse): Promise<Course> {\n    const id = randomUUID();\n    const course: Course = {\n      ...insertCourse,\n      id,\n      maxStudents: insertCourse.maxStudents || 100,\n      currentStudents: 0,\n      teachingLanguage: insertCourse.teachingLanguage || \"en\",\n      modules: insertCourse.modules || null,\n      startDate: insertCourse.startDate || null,\n      endDate: insertCourse.endDate || null,\n      isActive: true,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n    this.courses.set(id, course);\n    return course;\n  }\n\n  async updateCourse(id: string, updates: Partial<Course>): Promise<Course | undefined> {\n    const course = this.courses.get(id);\n    if (!course) return undefined;\n    \n    const updatedCourse = { ...course, ...updates, updatedAt: new Date() };\n    this.courses.set(id, updatedCourse);\n    return updatedCourse;\n  }\n\n  // Course enrollment methods\n  async enrollStudent(studentId: string, courseId: string): Promise<CourseEnrollment> {\n    const id = randomUUID();\n    const enrollment: CourseEnrollment = {\n      id,\n      studentId,\n      courseId,\n      enrolledAt: new Date(),\n      progress: 0,\n      completedAt: null,\n      paymentStatus: \"pending\",\n      paymentId: null,\n      notes: null,\n    };\n    this.courseEnrollments.set(id, enrollment);\n    return enrollment;\n  }\n\n  async getStudentEnrollments(studentId: string): Promise<CourseEnrollment[]> {\n    return Array.from(this.courseEnrollments.values()).filter(e => e.studentId === studentId);\n  }\n\n  async getCourseEnrollments(courseId: string): Promise<CourseEnrollment[]> {\n    return Array.from(this.courseEnrollments.values()).filter(e => e.courseId === courseId);\n  }\n\n  async updateEnrollmentProgress(id: string, progress: number): Promise<CourseEnrollment | undefined> {\n    const enrollment = this.courseEnrollments.get(id);\n    if (!enrollment) return undefined;\n    \n    const updatedEnrollment = { \n      ...enrollment, \n      progress,\n      completedAt: progress >= 100 ? new Date() : null\n    };\n    this.courseEnrollments.set(id, updatedEnrollment);\n    return updatedEnrollment;\n  }\n\n  // Product methods\n  async getProduct(id: string): Promise<Product | undefined> {\n    return this.products.get(id);\n  }\n\n  async getAllProducts(): Promise<Product[]> {\n    return Array.from(this.products.values()).filter(p => p.isActive);\n  }\n\n  async getProductsByCategory(category: string): Promise<Product[]> {\n    return Array.from(this.products.values()).filter(p => p.category === category && p.isActive);\n  }\n\n  async createProduct(insertProduct: InsertProduct): Promise<Product> {\n    const id = randomUUID();\n    const product: Product = {\n      ...insertProduct,\n      id,\n      currency: insertProduct.currency || \"INR\",\n      images: insertProduct.images || [],\n      stock: insertProduct.stock || 0,\n      specifications: insertProduct.specifications || null,\n      countryPricing: insertProduct.countryPricing || null,\n      isActive: true,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n    this.products.set(id, product);\n    return product;\n  }\n\n  async updateProduct(id: string, updates: Partial<Product>): Promise<Product | undefined> {\n    const product = this.products.get(id);\n    if (!product) return undefined;\n    \n    const updatedProduct = { ...product, ...updates, updatedAt: new Date() };\n    this.products.set(id, updatedProduct);\n    return updatedProduct;\n  }\n\n  // Order methods\n  async getOrder(id: string): Promise<Order | undefined> {\n    return this.orders.get(id);\n  }\n\n  async getOrdersByCustomer(customerId: string): Promise<Order[]> {\n    return Array.from(this.orders.values()).filter(o => o.customerId === customerId);\n  }\n\n  async createOrder(insertOrder: InsertOrder): Promise<Order> {\n    const id = randomUUID();\n    const order: Order = {\n      ...insertOrder,\n      id,\n      currency: insertOrder.currency || \"INR\",\n      shippingAddress: insertOrder.shippingAddress || null,\n      status: \"pending\",\n      paymentStatus: \"pending\",\n      paymentId: null,\n      trackingNumber: null,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n    this.orders.set(id, order);\n    return order;\n  }\n\n  async updateOrder(id: string, updates: Partial<Order>): Promise<Order | undefined> {\n    const order = this.orders.get(id);\n    if (!order) return undefined;\n    \n    const updatedOrder = { ...order, ...updates, updatedAt: new Date() };\n    this.orders.set(id, updatedOrder);\n    return updatedOrder;\n  }\n\n  // Chat methods\n  async getChatMessages(consultationId: string): Promise<ChatMessage[]> {\n    return Array.from(this.chatMessages.values())\n      .filter(m => m.consultationId === consultationId)\n      .sort((a, b) => a.timestamp.getTime() - b.timestamp.getTime());\n  }\n\n  async createChatMessage(insertMessage: InsertChatMessage): Promise<ChatMessage> {\n    const id = randomUUID();\n    const message: ChatMessage = {\n      ...insertMessage,\n      id,\n      timestamp: new Date(),\n    };\n    this.chatMessages.set(id, message);\n    return message;\n  }\n\n  // Notification methods\n  async getUserNotifications(userId: string): Promise<Notification[]> {\n    return Array.from(this.notifications.values())\n      .filter(n => n.userId === userId)\n      .sort((a, b) => b.createdAt.getTime() - a.createdAt.getTime());\n  }\n\n  async createNotification(notification: { userId: string; title: string; message: string; type: string; actionUrl?: string }): Promise<Notification> {\n    const id = randomUUID();\n    const newNotification: Notification = {\n      ...notification,\n      id,\n      isRead: false,\n      createdAt: new Date(),\n    };\n    this.notifications.set(id, newNotification);\n    return newNotification;\n  }\n\n  async markNotificationRead(id: string): Promise<void> {\n    const notification = this.notifications.get(id);\n    if (notification) {\n      this.notifications.set(id, { ...notification, isRead: true });\n    }\n  }\n\n  // Audit log methods\n  async createAuditLog(log: { userId?: string; action: string; resourceType: string; resourceId?: string; details?: any; ipAddress?: string; userAgent?: string }): Promise<AuditLog> {\n    const id = randomUUID();\n    const auditLog: AuditLog = {\n      ...log,\n      id,\n      timestamp: new Date(),\n    };\n    this.auditLogs.set(id, auditLog);\n    return auditLog;\n  }\n\n  // FAQ methods\n  async getAllFaqs(): Promise<Faq[]> {\n    return Array.from(this.faqs.values())\n      .filter(faq => faq.isActive)\n      .sort((a, b) => b.priority - a.priority);\n  }\n\n  async getFaqsByCategory(category: string): Promise<Faq[]> {\n    return Array.from(this.faqs.values())\n      .filter(faq => faq.isActive && faq.category === category)\n      .sort((a, b) => b.priority - a.priority);\n  }\n\n  async searchFaqs(query: string): Promise<Faq[]> {\n    const searchTerms = query.toLowerCase().split(' ');\n    return Array.from(this.faqs.values())\n      .filter(faq => {\n        if (!faq.isActive) return false;\n        const searchText = `${faq.question} ${faq.answer} ${faq.keywords?.join(' ') || ''}`.toLowerCase();\n        return searchTerms.some(term => searchText.includes(term));\n      })\n      .sort((a, b) => b.priority - a.priority);\n  }\n\n  async createFaq(faq: InsertFaq): Promise<Faq> {\n    const id = randomUUID();\n    const newFaq: Faq = {\n      ...faq,\n      id,\n      viewCount: 0,\n      helpfulCount: 0,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n    this.faqs.set(id, newFaq);\n    return newFaq;\n  }\n\n  async updateFaq(id: string, updates: Partial<Faq>): Promise<Faq | undefined> {\n    const faq = this.faqs.get(id);\n    if (!faq) return undefined;\n    \n    const updatedFaq = { ...faq, ...updates, updatedAt: new Date() };\n    this.faqs.set(id, updatedFaq);\n    return updatedFaq;\n  }\n\n  async deleteFaq(id: string): Promise<boolean> {\n    return this.faqs.delete(id);\n  }\n\n  async incrementFaqView(id: string): Promise<void> {\n    const faq = this.faqs.get(id);\n    if (faq) {\n      this.faqs.set(id, { ...faq, viewCount: faq.viewCount + 1 });\n    }\n  }\n\n  async rateFaqHelpful(id: string, isHelpful: boolean): Promise<void> {\n    const faq = this.faqs.get(id);\n    if (faq && isHelpful) {\n      this.faqs.set(id, { ...faq, helpfulCount: faq.helpfulCount + 1 });\n    }\n  }\n\n  // Support chat methods\n  async getSupportChat(sessionId: string): Promise<SupportChat | undefined> {\n    return Array.from(this.supportChats.values()).find(chat => chat.sessionId === sessionId);\n  }\n\n  async createSupportChat(chat: InsertSupportChat): Promise<SupportChat> {\n    const id = randomUUID();\n    const newChat: SupportChat = {\n      ...chat,\n      id,\n      status: \"active\",\n      needsHumanSupport: false,\n      humanSupportRequested: false,\n      satisfactionRating: null,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n    this.supportChats.set(id, newChat);\n    return newChat;\n  }\n\n  async updateSupportChat(id: string, updates: Partial<SupportChat>): Promise<SupportChat | undefined> {\n    const chat = this.supportChats.get(id);\n    if (!chat) return undefined;\n    \n    const updatedChat = { ...chat, ...updates, updatedAt: new Date() };\n    this.supportChats.set(id, updatedChat);\n    return updatedChat;\n  }\n\n  async getSupportChatMessages(chatId: string): Promise<SupportChatMessage[]> {\n    return Array.from(this.supportChatMessages.values())\n      .filter(msg => msg.chatId === chatId)\n      .sort((a, b) => a.createdAt.getTime() - b.createdAt.getTime());\n  }\n\n  async createSupportChatMessage(message: InsertSupportChatMessage): Promise<SupportChatMessage> {\n    const id = randomUUID();\n    const newMessage: SupportChatMessage = {\n      ...message,\n      id,\n      isHelpful: null,\n      relatedFaqId: null,\n      createdAt: new Date(),\n    };\n    this.supportChatMessages.set(id, newMessage);\n    return newMessage;\n  }\n\n  async rateChatMessage(messageId: string, isHelpful: boolean): Promise<void> {\n    const message = this.supportChatMessages.get(messageId);\n    if (message) {\n      this.supportChatMessages.set(messageId, { ...message, isHelpful });\n    }\n  }\n\n  // OTP Verification methods\n  async createOtpVerification(otpData: { \n    phoneNumber: string; \n    countryCode: string; \n    otp: string; \n    purpose: string; \n    userId?: string; \n    ipAddress?: string; \n    userAgent?: string \n  }): Promise<any> {\n    const id = randomUUID();\n    const verification = {\n      id,\n      ...otpData,\n      isUsed: false,\n      expiresAt: new Date(Date.now() + 10 * 60 * 1000), // 10 minutes\n      createdAt: new Date(),\n    };\n    this.otpVerifications.set(id, verification);\n    return verification;\n  }\n\n  async getOtpVerification(phoneNumber: string, countryCode: string, purpose: string): Promise<any | undefined> {\n    return Array.from(this.otpVerifications.values()).find(otp => \n      otp.phoneNumber === phoneNumber && \n      otp.countryCode === countryCode && \n      otp.purpose === purpose &&\n      !otp.isUsed &&\n      otp.expiresAt > new Date()\n    );\n  }\n\n  async verifyOtp(phoneNumber: string, countryCode: string, otp: string, purpose: string): Promise<boolean> {\n    const verification = await this.getOtpVerification(phoneNumber, countryCode, purpose);\n    if (verification && verification.otp === otp) {\n      verification.isUsed = true;\n      this.otpVerifications.set(verification.id, verification);\n      return true;\n    }\n    return false;\n  }\n\n  // Security Events methods\n  async createSecurityEvent(eventData: { \n    userId?: string; \n    eventType: string; \n    description: string; \n    ipAddress?: string; \n    userAgent?: string; \n    riskLevel?: string; \n    details?: any \n  }): Promise<any> {\n    const id = randomUUID();\n    const event = {\n      id,\n      ...eventData,\n      riskLevel: eventData.riskLevel || \"low\",\n      timestamp: new Date(),\n    };\n    this.securityEvents.set(id, event);\n    return event;\n  }\n\n  // Auth Sessions methods\n  async createAuthSession(sessionData: { \n    userId: string; \n    token: string; \n    refreshToken?: string; \n    deviceId?: string; \n    deviceInfo?: any; \n    ipAddress?: string; \n    userAgent?: string; \n    expiresAt: Date \n  }): Promise<any> {\n    const id = randomUUID();\n    const session = {\n      id,\n      ...sessionData,\n      isActive: true,\n      lastAccessedAt: new Date(),\n      createdAt: new Date(),\n    };\n    this.authSessions.set(id, session);\n    return session;\n  }\n\n  async getAuthSession(token: string): Promise<any | undefined> {\n    return Array.from(this.authSessions.values()).find(session => \n      session.token === token && \n      session.isActive && \n      session.expiresAt > new Date()\n    );\n  }\n\n  async invalidateAuthSession(token: string): Promise<void> {\n    const session = await this.getAuthSession(token);\n    if (session) {\n      session.isActive = false;\n      this.authSessions.set(session.id, session);\n    }\n  }\n\n  // Legal Agreements methods\n  async createLegalAgreement(agreementData: { \n    userId: string; \n    agreementType: string; \n    version: string; \n    ipAddress?: string; \n    userAgent?: string; \n    consentMethod: string \n  }): Promise<any> {\n    const id = randomUUID();\n    const agreement = {\n      id,\n      ...agreementData,\n      acceptedAt: new Date(),\n    };\n    this.legalAgreements.set(id, agreement);\n    return agreement;\n  }\n\n  // Initialize sample home tuition data\n  private async initializeHomeTuitionData() {\n    // Create sample home tuition courses\n    const beginnerHomeTuition: HomeTuitionCourse = {\n      id: randomUUID(),\n      title: \"Fundamental Astrology - Home Tuition\",\n      description: \"Comprehensive one-on-one or group astrology learning at your home. Perfect for beginners who want personalized attention and flexible learning schedules.\",\n      shortDescription: \"Learn astrology fundamentals at your home with personalized guidance\",\n      oneToOnePrice: \"25000\",\n      groupLearningPrice: \"18000\",\n      maxGroupSize: 4,\n      duration: \"3 months\",\n      level: \"beginner\",\n      curriculum: [\n        { module: \"Introduction to Vedic Astrology\", topics: [\"History and principles\", \"Zodiac system\", \"Basic concepts\"], duration: \"2 weeks\" },\n        { module: \"Understanding Planets\", topics: [\"9 Grahas\", \"Planetary influences\", \"Strengths and weaknesses\"], duration: \"3 weeks\" },\n        { module: \"Houses and Signs\", topics: [\"12 Houses significance\", \"Zodiac signs\", \"House-sign combinations\"], duration: \"3 weeks\" },\n        { module: \"Chart Reading Basics\", topics: [\"Birth chart construction\", \"Basic predictions\", \"Remedial measures\"], duration: \"4 weeks\" }\n      ],\n      prerequisites: \"No prior knowledge required. Basic English/Hindi reading ability.\",\n      availableSeats: 15,\n      occupiedSeats: 3,\n      isActive: true,\n      applicationDeadline: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000), // 30 days from now\n      courseStartDate: new Date(Date.now() + 45 * 24 * 60 * 60 * 1000), // 45 days from now\n      courseEndDate: new Date(Date.now() + 135 * 24 * 60 * 60 * 1000), // 135 days from now (3 months)\n      coverageArea: \"Within 25km of Kolkata city center\",\n      specialInstructions: \"Students must arrange for a quiet study space. All study materials will be provided.\",\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n    this.homeTuitionCourses.set(beginnerHomeTuition.id, beginnerHomeTuition);\n\n    const advancedHomeTuition: HomeTuitionCourse = {\n      id: randomUUID(),\n      title: \"Advanced Astrology & Palmistry - Home Tuition\",\n      description: \"Advanced level home tuition covering deep astrology, palmistry, and remedial astrology. Suitable for students with basic astrology knowledge.\",\n      shortDescription: \"Advanced astrology and palmistry training at your home\",\n      oneToOnePrice: \"40000\",\n      groupLearningPrice: \"30000\",\n      maxGroupSize: 3,\n      duration: \"6 months\",\n      level: \"advanced\",\n      curriculum: [\n        { module: \"Advanced Chart Analysis\", topics: [\"Divisional charts\", \"Dasha systems\", \"Transit analysis\"], duration: \"6 weeks\" },\n        { module: \"Palmistry Fundamentals\", topics: [\"Hand types\", \"Major lines\", \"Minor lines\", \"Mounts\"], duration: \"8 weeks\" },\n        { module: \"Predictive Astrology\", topics: [\"Time prediction\", \"Event timing\", \"Career analysis\"], duration: \"8 weeks\" },\n        { module: \"Remedial Astrology\", topics: [\"Gemstone therapy\", \"Yantra therapy\", \"Mantra remedies\"], duration: \"6 weeks\" }\n      ],\n      prerequisites: \"Basic knowledge of astrology required. Must have completed beginner level or equivalent.\",\n      availableSeats: 8,\n      occupiedSeats: 2,\n      isActive: true,\n      applicationDeadline: new Date(Date.now() + 25 * 24 * 60 * 60 * 1000),\n      courseStartDate: new Date(Date.now() + 50 * 24 * 60 * 60 * 1000),\n      courseEndDate: new Date(Date.now() + 230 * 24 * 60 * 60 * 1000), // 6 months\n      coverageArea: \"Within 25km of Kolkata city center\",\n      specialInstructions: \"Students should have their own palm prints ready for analysis practice.\",\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n    this.homeTuitionCourses.set(advancedHomeTuition.id, advancedHomeTuition);\n  }\n\n  // Home Tuition Course methods\n  async getHomeTuitionCourse(id: string): Promise<HomeTuitionCourse | undefined> {\n    return this.homeTuitionCourses.get(id);\n  }\n\n  async getAllHomeTuitionCourses(): Promise<HomeTuitionCourse[]> {\n    return Array.from(this.homeTuitionCourses.values());\n  }\n\n  async getActiveHomeTuitionCourses(): Promise<HomeTuitionCourse[]> {\n    return Array.from(this.homeTuitionCourses.values()).filter(c => c.isActive);\n  }\n\n  async createHomeTuitionCourse(insertCourse: InsertHomeTuitionCourse): Promise<HomeTuitionCourse> {\n    const id = randomUUID();\n    const course: HomeTuitionCourse = {\n      ...insertCourse,\n      id,\n      maxGroupSize: insertCourse.maxGroupSize || 5,\n      availableSeats: insertCourse.availableSeats || 10,\n      occupiedSeats: 0,\n      isActive: true,\n      applicationDeadline: insertCourse.applicationDeadline || null,\n      courseStartDate: insertCourse.courseStartDate || null,\n      courseEndDate: insertCourse.courseEndDate || null,\n      coverageArea: insertCourse.coverageArea || \"Within 25km of Kolkata\",\n      specialInstructions: insertCourse.specialInstructions || null,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n    this.homeTuitionCourses.set(id, course);\n    return course;\n  }\n\n  async updateHomeTuitionCourse(id: string, updates: Partial<HomeTuitionCourse>): Promise<HomeTuitionCourse | undefined> {\n    const course = this.homeTuitionCourses.get(id);\n    if (!course) return undefined;\n    \n    const updatedCourse = { ...course, ...updates, updatedAt: new Date() };\n    this.homeTuitionCourses.set(id, updatedCourse);\n    return updatedCourse;\n  }\n\n  // Home Tuition Application methods\n  async getHomeTuitionApplication(id: string): Promise<HomeTuitionApplication | undefined> {\n    return this.homeTuitionApplications.get(id);\n  }\n\n  async getHomeTuitionApplicationsByApplicant(applicantId: string): Promise<HomeTuitionApplication[]> {\n    return Array.from(this.homeTuitionApplications.values()).filter(app => app.applicantId === applicantId);\n  }\n\n  async getHomeTuitionApplicationsByCourse(courseId: string): Promise<HomeTuitionApplication[]> {\n    return Array.from(this.homeTuitionApplications.values()).filter(app => app.courseId === courseId);\n  }\n\n  async getAllHomeTuitionApplications(): Promise<HomeTuitionApplication[]> {\n    return Array.from(this.homeTuitionApplications.values())\n      .sort((a, b) => b.createdAt.getTime() - a.createdAt.getTime());\n  }\n\n  async getHomeTuitionApplicationsByStatus(status: string): Promise<HomeTuitionApplication[]> {\n    return Array.from(this.homeTuitionApplications.values())\n      .filter(app => app.status === status)\n      .sort((a, b) => b.createdAt.getTime() - a.createdAt.getTime());\n  }\n\n  async createHomeTuitionApplication(insertApplication: InsertHomeTuitionApplication): Promise<HomeTuitionApplication> {\n    const id = randomUUID();\n    const application: HomeTuitionApplication = {\n      ...insertApplication,\n      id,\n      status: \"submitted\",\n      interviewScheduledAt: null,\n      interviewNotes: null,\n      selectionReason: null,\n      rejectionReason: null,\n      admissionDate: null,\n      paymentStatus: \"pending\",\n      paymentId: null,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n    this.homeTuitionApplications.set(id, application);\n    return application;\n  }\n\n  async updateHomeTuitionApplication(id: string, updates: Partial<HomeTuitionApplication>): Promise<HomeTuitionApplication | undefined> {\n    const application = this.homeTuitionApplications.get(id);\n    if (!application) return undefined;\n    \n    const updatedApplication = { ...application, ...updates, updatedAt: new Date() };\n    this.homeTuitionApplications.set(id, updatedApplication);\n    return updatedApplication;\n  }\n\n  // Student Communication methods\n  async getStudentConversation(conversationId: string): Promise<StudentConversation | undefined> {\n    return Array.from(this.studentConversations.values()).find(conv => conv.conversationId === conversationId);\n  }\n\n  async getStudentConversationsByStudent(studentId: string): Promise<StudentConversation[]> {\n    return Array.from(this.studentConversations.values())\n      .filter(conv => conv.studentId === studentId)\n      .sort((a, b) => b.lastMessageAt.getTime() - a.lastMessageAt.getTime());\n  }\n\n  async getStudentConversationsByAstrologer(astrologerId: string): Promise<StudentConversation[]> {\n    return Array.from(this.studentConversations.values())\n      .filter(conv => conv.astrologerId === astrologerId)\n      .sort((a, b) => b.lastMessageAt.getTime() - a.lastMessageAt.getTime());\n  }\n\n  async createStudentConversation(insertConversation: InsertStudentConversation): Promise<StudentConversation> {\n    const id = randomUUID();\n    const conversation: StudentConversation = {\n      ...insertConversation,\n      id,\n      lastMessageAt: new Date(),\n      lastMessageBy: null,\n      unreadCount: 0,\n      status: \"active\",\n      priority: insertConversation.priority || \"normal\",\n      tags: insertConversation.tags || [],\n      isArchived: false,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n    this.studentConversations.set(id, conversation);\n    return conversation;\n  }\n\n  async updateStudentConversation(id: string, updates: Partial<StudentConversation>): Promise<StudentConversation | undefined> {\n    const conversation = this.studentConversations.get(id);\n    if (!conversation) return undefined;\n    \n    const updatedConversation = { ...conversation, ...updates, updatedAt: new Date() };\n    this.studentConversations.set(id, updatedConversation);\n    return updatedConversation;\n  }\n\n  async getStudentMessages(conversationId: string): Promise<StudentMessage[]> {\n    return Array.from(this.studentMessages.values())\n      .filter(msg => msg.conversationId === conversationId)\n      .sort((a, b) => a.createdAt.getTime() - b.createdAt.getTime());\n  }\n\n  async createStudentMessage(insertMessage: InsertStudentMessage): Promise<StudentMessage> {\n    const id = randomUUID();\n    const message: StudentMessage = {\n      ...insertMessage,\n      id,\n      messageType: insertMessage.messageType || \"text\",\n      fileUrl: insertMessage.fileUrl || null,\n      fileName: insertMessage.fileName || null,\n      fileSize: insertMessage.fileSize || null,\n      isRead: false,\n      readAt: null,\n      priority: insertMessage.priority || \"normal\",\n      replyToMessageId: insertMessage.replyToMessageId || null,\n      isStarred: false,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n    this.studentMessages.set(id, message);\n\n    // Update conversation's last message info\n    const conversation = await this.getStudentConversation(insertMessage.conversationId);\n    if (conversation) {\n      await this.updateStudentConversation(conversation.id, {\n        lastMessageAt: new Date(),\n        lastMessageBy: insertMessage.senderId,\n        unreadCount: conversation.unreadCount + 1,\n      });\n    }\n\n    return message;\n  }\n\n  async markStudentMessageAsRead(messageId: string): Promise<void> {\n    const message = this.studentMessages.get(messageId);\n    if (message && !message.isRead) {\n      const updatedMessage = { ...message, isRead: true, readAt: new Date() };\n      this.studentMessages.set(messageId, updatedMessage);\n    }\n  }\n\n  async getUnreadStudentMessagesCount(conversationId: string, userId: string): Promise<number> {\n    return Array.from(this.studentMessages.values())\n      .filter(msg => \n        msg.conversationId === conversationId && \n        msg.senderId !== userId && \n        !msg.isRead\n      ).length;\n  }\n\n  async markAllStudentMessagesAsRead(conversationId: string, userId: string): Promise<void> {\n    const messages = Array.from(this.studentMessages.values())\n      .filter(msg => \n        msg.conversationId === conversationId && \n        msg.senderId !== userId && \n        !msg.isRead\n      );\n\n    for (const message of messages) {\n      await this.markStudentMessageAsRead(message.id);\n    }\n\n    // Update conversation's unread count\n    const conversation = await this.getStudentConversation(conversationId);\n    if (conversation) {\n      await this.updateStudentConversation(conversation.id, {\n        unreadCount: 0,\n      });\n    }\n  }\n\n  async getStudentMessagesByConversation(conversationId: string, limit?: number, offset?: number): Promise<StudentMessage[]> {\n    const messages = Array.from(this.studentMessages.values())\n      .filter(msg => msg.conversationId === conversationId)\n      .sort((a, b) => b.createdAt.getTime() - a.createdAt.getTime());\n\n    if (limit) {\n      const start = offset || 0;\n      return messages.slice(start, start + limit);\n    }\n\n    return messages;\n  }\n\n  // ================ NEW PAYMENT AND OTP METHODS ================\n\n  async getUserOrders(userId: string): Promise<Order[]> {\n    return Array.from(this.orders.values()).filter(order => order.customerId === userId)\n      .sort((a, b) => new Date(b.createdAt || 0).getTime() - new Date(a.createdAt || 0).getTime());\n  }\n\n  async getOrderByTransactionId(transactionId: string): Promise<Order | undefined> {\n    return Array.from(this.orders.values()).find(order => \n      order.id === transactionId || (order as any).transactionId === transactionId\n    );\n  }\n\n  async updateOrderStatus(orderId: string, status: string): Promise<Order | undefined> {\n    const order = this.orders.get(orderId);\n    if (order) {\n      const updatedOrder = {\n        ...order,\n        status: status as any,\n        updatedAt: new Date(),\n      };\n      this.orders.set(orderId, updatedOrder);\n      return updatedOrder;\n    }\n    return undefined;\n  }\n\n  async updateUserLoginInfo(userId: string, ipAddress?: string, userAgent?: string): Promise<void> {\n    const user = this.users.get(userId);\n    if (user) {\n      const updatedUser = {\n        ...user,\n        lastLoginAt: new Date(),\n        lastLoginIp: ipAddress || null,\n        lastLoginUserAgent: userAgent || null,\n        updatedAt: new Date(),\n      };\n      this.users.set(userId, updatedUser);\n    }\n  }\n\n  async createOtpVerification(otpData: {\n    id?: string;\n    phoneNumber: string;\n    countryCode: string;\n    otp: string;\n    purpose: string;\n    isUsed?: boolean;\n    expiresAt: Date;\n    ipAddress?: string;\n    userAgent?: string;\n    createdAt?: Date;\n  }): Promise<any> {\n    const otp = {\n      id: otpData.id || randomUUID(),\n      phoneNumber: otpData.phoneNumber,\n      countryCode: otpData.countryCode,\n      otp: otpData.otp,\n      purpose: otpData.purpose,\n      isUsed: otpData.isUsed || false,\n      expiresAt: otpData.expiresAt,\n      ipAddress: otpData.ipAddress,\n      userAgent: otpData.userAgent,\n      createdAt: otpData.createdAt || new Date(),\n    };\n    this.otpVerifications.set(otp.id, otp);\n    return otp;\n  }\n\n  async verifyOtp(phoneNumber: string, countryCode: string, otp: string, purpose: string): Promise<any> {\n    const otpRecord = Array.from(this.otpVerifications.values()).find(record =>\n      record.phoneNumber === phoneNumber &&\n      record.countryCode === countryCode &&\n      record.otp === otp &&\n      record.purpose === purpose &&\n      !record.isUsed &&\n      new Date() < new Date(record.expiresAt)\n    );\n\n    if (otpRecord) {\n      // Mark OTP as used\n      otpRecord.isUsed = true;\n      this.otpVerifications.set(otpRecord.id, otpRecord);\n      return otpRecord;\n    }\n\n    return null;\n  }\n\n  // Security and auth methods\n  async createSecurityEvent(event: {\n    userId?: string;\n    eventType: string;\n    description: string;\n    ipAddress?: string;\n    userAgent?: string;\n    riskLevel?: string;\n    details?: any;\n  }): Promise<any> {\n    const securityEvent = {\n      id: randomUUID(),\n      userId: event.userId,\n      eventType: event.eventType,\n      description: event.description,\n      ipAddress: event.ipAddress,\n      userAgent: event.userAgent,\n      riskLevel: event.riskLevel,\n      details: event.details,\n      createdAt: new Date(),\n    };\n    this.securityEvents.set(securityEvent.id, securityEvent);\n    return securityEvent;\n  }\n\n  async createAuthSession(session: {\n    userId: string;\n    token: string;\n    refreshToken?: string;\n    deviceId?: string;\n    deviceInfo?: any;\n    ipAddress?: string;\n    userAgent?: string;\n    expiresAt: Date;\n  }): Promise<any> {\n    const authSession = {\n      id: randomUUID(),\n      userId: session.userId,\n      token: session.token,\n      refreshToken: session.refreshToken,\n      deviceId: session.deviceId,\n      deviceInfo: session.deviceInfo,\n      ipAddress: session.ipAddress,\n      userAgent: session.userAgent,\n      expiresAt: session.expiresAt,\n      createdAt: new Date(),\n    };\n    this.authSessions.set(authSession.id, authSession);\n    return authSession;\n  }\n\n  async getAuthSession(token: string): Promise<any | undefined> {\n    return Array.from(this.authSessions.values()).find(session => session.token === token);\n  }\n\n  async invalidateAuthSession(token: string): Promise<void> {\n    const session = Array.from(this.authSessions.values()).find(s => s.token === token);\n    if (session) {\n      this.authSessions.delete(session.id);\n    }\n  }\n\n  async createLegalAgreement(agreement: {\n    userId: string;\n    agreementType: string;\n    version: string;\n    ipAddress?: string;\n    userAgent?: string;\n    consentMethod: string;\n  }): Promise<any> {\n    const legalAgreement = {\n      id: randomUUID(),\n      userId: agreement.userId,\n      agreementType: agreement.agreementType,\n      version: agreement.version,\n      ipAddress: agreement.ipAddress,\n      userAgent: agreement.userAgent,\n      consentMethod: agreement.consentMethod,\n      createdAt: new Date(),\n    };\n    this.legalAgreements.set(legalAgreement.id, legalAgreement);\n    return legalAgreement;\n  }\n\n  // Additional user management\n  async getUserByPhone(phoneNumber: string, countryCode?: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(user =>\n      user.phoneNumber === phoneNumber &&\n      (countryCode ? user.countryCode === countryCode : true)\n    );\n  }\n\n  async getUserByUserId(userId: string): Promise<User | undefined> {\n    return this.users.get(userId);\n  }\n\n  async updateStripeCustomerId(id: string, stripeCustomerId: string): Promise<User | undefined> {\n    const user = this.users.get(id);\n    if (user) {\n      const updatedUser = { ...user, updatedAt: new Date() };\n      this.users.set(id, updatedUser);\n      return updatedUser;\n    }\n    return undefined;\n  }\n\n  async updateUserStripeInfo(id: string, info: { customerId: string; subscriptionId: string }): Promise<User | undefined> {\n    const user = this.users.get(id);\n    if (user) {\n      const updatedUser = { ...user, updatedAt: new Date() };\n      this.users.set(id, updatedUser);\n      return updatedUser;\n    }\n    return undefined;\n  }\n\n  // Existing method overrides for additional functionality\n  async getOtpVerification(phoneNumber: string, countryCode: string, purpose: string): Promise<any | undefined> {\n    return Array.from(this.otpVerifications.values()).find(record =>\n      record.phoneNumber === phoneNumber &&\n      record.countryCode === countryCode &&\n      record.purpose === purpose &&\n      !record.isUsed &&\n      new Date() < new Date(record.expiresAt)\n    );\n  }\n}\n\nexport const storage = new MemStorage();\n","size_bytes":56264},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, integer, timestamp, boolean, decimal, jsonb, uuid } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Users table - Enhanced for comprehensive authentication\nexport const users = pgTable(\"users\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  username: text(\"username\").notNull().unique(),\n  email: text(\"email\"),\n  password: text(\"password\").notNull(),\n  fullName: text(\"full_name\").notNull(),\n  phoneNumber: text(\"phone_number\").notNull().unique(),\n  countryCode: text(\"country_code\").notNull().default(\"+91\"),\n  whatsappNumber: text(\"whatsapp_number\"),\n  dateOfBirth: timestamp(\"date_of_birth\"),\n  timeOfBirth: text(\"time_of_birth\"),\n  placeOfBirth: text(\"place_of_birth\"),\n  \n  // Verification status\n  isVerified: boolean(\"is_verified\").default(false),\n  phoneVerified: boolean(\"phone_verified\").default(false),\n  emailVerified: boolean(\"email_verified\").default(false),\n  \n  // Security fields\n  isAdmin: boolean(\"is_admin\").default(false),\n  accountStatus: text(\"account_status\").default(\"active\"), // active, suspended, recovery_mode, frozen\n  governmentId: text(\"government_id\"), // Aadhaar/Passport for high-risk actions\n  governmentIdType: text(\"government_id_type\"), // aadhaar, passport, driving_license\n  \n  // Payment integration\n  stripeCustomerId: text(\"stripe_customer_id\"),\n  stripeSubscriptionId: text(\"stripe_subscription_id\"),\n  \n  // Preferences\n  preferredLanguage: text(\"preferred_language\").default(\"en\"),\n  notes: text(\"notes\"),\n  \n  // Legal compliance\n  termsAcceptedAt: timestamp(\"terms_accepted_at\"),\n  privacyAcceptedAt: timestamp(\"privacy_accepted_at\"),\n  disclaimerAcceptedAt: timestamp(\"disclaimer_accepted_at\"),\n  returnPolicyAcceptedAt: timestamp(\"return_policy_accepted_at\"),\n  marketingConsent: boolean(\"marketing_consent\").default(false),\n  dataProcessingConsent: boolean(\"data_processing_consent\").default(false),\n  \n  // Security tracking\n  lastLoginAt: timestamp(\"last_login_at\"),\n  lastLoginIp: text(\"last_login_ip\"),\n  failedLoginAttempts: integer(\"failed_login_attempts\").default(0),\n  lockoutUntil: timestamp(\"lockout_until\"),\n  \n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// OTP Verification table\nexport const otpVerifications = pgTable(\"otp_verifications\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  phoneNumber: text(\"phone_number\").notNull(),\n  countryCode: text(\"country_code\").notNull(),\n  otp: text(\"otp\").notNull(),\n  purpose: text(\"purpose\").notNull(), // registration, login, mobile_change, recovery\n  isUsed: boolean(\"is_used\").default(false),\n  expiresAt: timestamp(\"expires_at\").notNull(),\n  userId: uuid(\"user_id\").references(() => users.id),\n  ipAddress: text(\"ip_address\"),\n  userAgent: text(\"user_agent\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// User Contacts table for managing multiple contact methods\nexport const userContacts = pgTable(\"user_contacts\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: uuid(\"user_id\").references(() => users.id).notNull(),\n  contactType: text(\"contact_type\").notNull(), // mobile, email, government_id\n  contactValue: text(\"contact_value\").notNull(),\n  countryCode: text(\"country_code\"), // for mobile numbers\n  isVerified: boolean(\"is_verified\").default(false),\n  isPrimary: boolean(\"is_primary\").default(false),\n  verifiedAt: timestamp(\"verified_at\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Security Events table for audit logging\nexport const securityEvents = pgTable(\"security_events\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: uuid(\"user_id\").references(() => users.id),\n  eventType: text(\"event_type\").notNull(), // login_success, login_failed, password_change, mobile_change, etc.\n  description: text(\"description\").notNull(),\n  ipAddress: text(\"ip_address\"),\n  userAgent: text(\"user_agent\"),\n  deviceInfo: jsonb(\"device_info\"),\n  location: jsonb(\"location\"), // geolocation data\n  riskLevel: text(\"risk_level\").default(\"low\"), // low, medium, high, critical\n  details: jsonb(\"details\"), // additional event-specific data\n  timestamp: timestamp(\"timestamp\").defaultNow(),\n});\n\n// Auth Sessions table for session management\nexport const authSessions = pgTable(\"auth_sessions\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: uuid(\"user_id\").references(() => users.id).notNull(),\n  token: text(\"token\").notNull().unique(),\n  refreshToken: text(\"refresh_token\").unique(),\n  deviceId: text(\"device_id\"),\n  deviceInfo: jsonb(\"device_info\"),\n  ipAddress: text(\"ip_address\"),\n  userAgent: text(\"user_agent\"),\n  isActive: boolean(\"is_active\").default(true),\n  expiresAt: timestamp(\"expires_at\").notNull(),\n  lastAccessedAt: timestamp(\"last_accessed_at\").defaultNow(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Mobile Number Changes table for security tracking\nexport const mobileNumberChanges = pgTable(\"mobile_number_changes\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: uuid(\"user_id\").references(() => users.id).notNull(),\n  oldPhoneNumber: text(\"old_phone_number\").notNull(),\n  oldCountryCode: text(\"old_country_code\").notNull(),\n  newPhoneNumber: text(\"new_phone_number\").notNull(),\n  newCountryCode: text(\"new_country_code\").notNull(),\n  status: text(\"status\").default(\"pending\"), // pending, approved, rejected, expired\n  requestedAt: timestamp(\"requested_at\").defaultNow(),\n  approvedAt: timestamp(\"approved_at\"),\n  holdingPeriodEnds: timestamp(\"holding_period_ends\"), // 7-day holding period\n  verificationMethod: text(\"verification_method\"), // password_otp, security_questions, manual_review\n  ipAddress: text(\"ip_address\"),\n  userAgent: text(\"user_agent\"),\n});\n\n// Legal Agreements tracking\nexport const legalAgreements = pgTable(\"legal_agreements\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: uuid(\"user_id\").references(() => users.id).notNull(),\n  agreementType: text(\"agreement_type\").notNull(), // terms_of_service, privacy_policy, disclaimer, return_policy\n  version: text(\"version\").notNull(), // version of the agreement\n  acceptedAt: timestamp(\"accepted_at\").defaultNow(),\n  ipAddress: text(\"ip_address\"),\n  userAgent: text(\"user_agent\"),\n  consentMethod: text(\"consent_method\").notNull(), // checkbox, digital_signature, verbal\n});\n\n// Consultations table\nexport const consultations = pgTable(\"consultations\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  clientId: uuid(\"client_id\").references(() => users.id).notNull(),\n  type: text(\"type\").notNull(), // video, audio, chat, in-person\n  consultationMode: text(\"consultation_mode\").notNull(), // online, offline\n  topics: jsonb(\"topics\"), // Array of selected topics for topic-based consultations\n  plan: text(\"plan\").notNull(), // quick, focused, in-depth, comprehensive, topic-based\n  duration: integer(\"duration\").notNull(), // in minutes\n  price: decimal(\"price\", { precision: 10, scale: 2 }).notNull(),\n  scheduledAt: timestamp(\"scheduled_at\").notNull(),\n  status: text(\"status\").default(\"scheduled\"), // scheduled, ongoing, completed, cancelled\n  meetingId: text(\"meeting_id\"),\n  timerStarted: boolean(\"timer_started\").default(false),\n  timerStartTime: timestamp(\"timer_start_time\"),\n  timerEndTime: timestamp(\"timer_end_time\"),\n  actualDuration: integer(\"actual_duration\"), // actual time spent in minutes\n  notes: text(\"notes\"),\n  preConsultationNotes: text(\"pre_consultation_notes\"), // Admin notes before consultation\n  language: text(\"language\").default(\"en\"),\n  paymentStatus: text(\"payment_status\").default(\"pending\"), // pending, paid, failed, refunded\n  paymentId: text(\"payment_id\"),\n  location: text(\"location\"), // For offline consultations - Kolkata Chamber\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Courses table\nexport const courses = pgTable(\"courses\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  title: text(\"title\").notNull(),\n  description: text(\"description\").notNull(),\n  price: decimal(\"price\", { precision: 10, scale: 2 }).notNull(),\n  maxStudents: integer(\"max_students\").default(100),\n  currentStudents: integer(\"current_students\").default(0),\n  level: text(\"level\").notNull(), // beginner, intermediate, expert\n  teachingLanguage: text(\"teaching_language\").default(\"en\"),\n  modules: jsonb(\"modules\"), // Array of module objects\n  isActive: boolean(\"is_active\").default(true),\n  startDate: timestamp(\"start_date\"),\n  endDate: timestamp(\"end_date\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Course Enrollments table\nexport const courseEnrollments = pgTable(\"course_enrollments\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  studentId: uuid(\"student_id\").references(() => users.id).notNull(),\n  courseId: uuid(\"course_id\").references(() => courses.id).notNull(),\n  enrolledAt: timestamp(\"enrolled_at\").defaultNow(),\n  progress: integer(\"progress\").default(0), // percentage\n  completedAt: timestamp(\"completed_at\"),\n  paymentStatus: text(\"payment_status\").default(\"pending\"),\n  paymentId: text(\"payment_id\"),\n  notes: text(\"notes\"),\n});\n\n// Products table\nexport const products = pgTable(\"products\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  description: text(\"description\").notNull(),\n  category: text(\"category\").notNull(), // gemstones, yantras, malas, books, kits\n  price: decimal(\"price\", { precision: 10, scale: 2 }).notNull(),\n  currency: text(\"currency\").default(\"INR\"),\n  images: jsonb(\"images\"), // Array of image URLs\n  stock: integer(\"stock\").default(0),\n  isActive: boolean(\"is_active\").default(true),\n  specifications: jsonb(\"specifications\"),\n  countryPricing: jsonb(\"country_pricing\"), // Dynamic pricing by country\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Orders table\nexport const orders = pgTable(\"orders\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  customerId: uuid(\"customer_id\").references(() => users.id).notNull(),\n  items: jsonb(\"items\").notNull(), // Array of order items\n  totalAmount: decimal(\"total_amount\", { precision: 10, scale: 2 }).notNull(),\n  currency: text(\"currency\").default(\"INR\"),\n  status: text(\"status\").default(\"pending\"), // pending, paid, shipped, delivered, cancelled\n  paymentStatus: text(\"payment_status\").default(\"pending\"),\n  paymentId: text(\"payment_id\"),\n  shippingAddress: jsonb(\"shipping_address\"),\n  trackingNumber: text(\"tracking_number\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Chat Messages table\nexport const chatMessages = pgTable(\"chat_messages\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  consultationId: uuid(\"consultation_id\").references(() => consultations.id).notNull(),\n  senderId: uuid(\"sender_id\").references(() => users.id).notNull(),\n  message: text(\"message\").notNull(),\n  messageType: text(\"message_type\").default(\"text\"), // text, image, video, voice\n  fileUrl: text(\"file_url\"),\n  timestamp: timestamp(\"timestamp\").defaultNow(),\n});\n\n// Audit Logs table\nexport const auditLogs = pgTable(\"audit_logs\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: uuid(\"user_id\").references(() => users.id),\n  action: text(\"action\").notNull(),\n  resourceType: text(\"resource_type\").notNull(),\n  resourceId: text(\"resource_id\"),\n  details: jsonb(\"details\"),\n  ipAddress: text(\"ip_address\"),\n  userAgent: text(\"user_agent\"),\n  timestamp: timestamp(\"timestamp\").defaultNow(),\n});\n\n// Notifications table\nexport const notifications = pgTable(\"notifications\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: uuid(\"user_id\").references(() => users.id).notNull(),\n  title: text(\"title\").notNull(),\n  message: text(\"message\").notNull(),\n  type: text(\"type\").notNull(), // consultation, course, order, system\n  isRead: boolean(\"is_read\").default(false),\n  actionUrl: text(\"action_url\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Insert schemas\nexport const insertUserSchema = createInsertSchema(users).pick({\n  username: true,\n  email: true,\n  password: true,\n  fullName: true,\n  phoneNumber: true,\n  countryCode: true,\n  whatsappNumber: true,\n  dateOfBirth: true,\n  timeOfBirth: true,\n  placeOfBirth: true,\n  preferredLanguage: true,\n});\n\nexport const insertConsultationSchema = createInsertSchema(consultations).pick({\n  clientId: true,\n  type: true,\n  consultationMode: true,\n  topics: true,\n  plan: true,\n  duration: true,\n  price: true,\n  scheduledAt: true,\n  notes: true,\n  preConsultationNotes: true,\n  language: true,\n  location: true,\n});\n\nexport const insertCourseSchema = createInsertSchema(courses).pick({\n  title: true,\n  description: true,\n  price: true,\n  maxStudents: true,\n  level: true,\n  teachingLanguage: true,\n  modules: true,\n  startDate: true,\n  endDate: true,\n});\n\nexport const insertProductSchema = createInsertSchema(products).pick({\n  name: true,\n  description: true,\n  category: true,\n  price: true,\n  currency: true,\n  images: true,\n  stock: true,\n  specifications: true,\n});\n\nexport const insertOrderSchema = createInsertSchema(orders).pick({\n  customerId: true,\n  items: true,\n  totalAmount: true,\n  currency: true,\n  shippingAddress: true,\n});\n\nexport const insertChatMessageSchema = createInsertSchema(chatMessages).pick({\n  consultationId: true,\n  senderId: true,\n  message: true,\n  messageType: true,\n  fileUrl: true,\n});\n\n// FAQs table for AI chatbot\nexport const faqs = pgTable(\"faqs\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  question: text(\"question\").notNull(),\n  answer: text(\"answer\").notNull(),\n  category: text(\"category\").notNull(), // consultation, courses, products, billing, technical, general\n  keywords: text(\"keywords\").array(), // Array of keywords for better matching\n  priority: integer(\"priority\").default(0), // Higher priority appears first in search\n  isActive: boolean(\"is_active\").default(true),\n  viewCount: integer(\"view_count\").default(0),\n  helpfulCount: integer(\"helpful_count\").default(0),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Support chats table for AI chatbot conversations\nexport const supportChats = pgTable(\"support_chats\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  sessionId: text(\"session_id\").notNull().unique(), // For tracking chat sessions\n  userId: uuid(\"user_id\").references(() => users.id), // null for anonymous users\n  userEmail: text(\"user_email\"), // For anonymous users\n  userName: text(\"user_name\"), // For anonymous users\n  status: text(\"status\").default(\"active\"), // active, closed, escalated\n  needsHumanSupport: boolean(\"needs_human_support\").default(false),\n  humanSupportRequested: boolean(\"human_support_requested\").default(false),\n  satisfactionRating: integer(\"satisfaction_rating\"), // 1-5 rating\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Support chat messages\nexport const supportChatMessages = pgTable(\"support_chat_messages\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  chatId: uuid(\"chat_id\").references(() => supportChats.id).notNull(),\n  message: text(\"message\").notNull(),\n  sender: text(\"sender\").notNull(), // \"user\", \"bot\", \"agent\"\n  messageType: text(\"message_type\").default(\"text\"), // text, image, file\n  isHelpful: boolean(\"is_helpful\"), // User feedback on bot responses\n  relatedFaqId: uuid(\"related_faq_id\").references(() => faqs.id), // If response came from FAQ\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// FAQ insert schema\nexport const insertFaqSchema = createInsertSchema(faqs).pick({\n  question: true,\n  answer: true,\n  category: true,\n  keywords: true,\n  priority: true,\n  isActive: true,\n});\n\n// Support chat insert schema\nexport const insertSupportChatSchema = createInsertSchema(supportChats).pick({\n  sessionId: true,\n  userId: true,\n  userEmail: true,\n  userName: true,\n});\n\n// Support chat message insert schema\nexport const insertSupportChatMessageSchema = createInsertSchema(supportChatMessages).pick({\n  chatId: true,\n  message: true,\n  sender: true,\n  messageType: true,\n  isHelpful: true,\n  relatedFaqId: true,\n});\n\n// Home Tuition Applications table\nexport const homeTuitionApplications = pgTable(\"home_tuition_applications\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  applicantId: uuid(\"applicant_id\").references(() => users.id).notNull(),\n  applicationType: text(\"application_type\").notNull(), // \"one_to_one\", \"group_learning\"\n  courseId: uuid(\"course_id\").references(() => courses.id).notNull(),\n  studentDetails: jsonb(\"student_details\").notNull(), // Array of student objects with name, phone, email, etc.\n  aadharCardUrls: jsonb(\"aadhar_card_urls\").notNull(), // Array of uploaded Aadhar card file URLs\n  birthDetails: jsonb(\"birth_details\").notNull(), // Array of birth details for each student\n  tuitionAddress: jsonb(\"tuition_address\").notNull(), // Complete address where tuition will be conducted\n  preferredTimings: jsonb(\"preferred_timings\"), // Preferred schedule\n  additionalNotes: text(\"additional_notes\"),\n  status: text(\"status\").default(\"submitted\"), // \"submitted\", \"under_review\", \"interview_scheduled\", \"selected\", \"rejected\", \"admitted\"\n  interviewScheduledAt: timestamp(\"interview_scheduled_at\"),\n  interviewNotes: text(\"interview_notes\"),\n  selectionReason: text(\"selection_reason\"),\n  rejectionReason: text(\"rejection_reason\"),\n  admissionDate: timestamp(\"admission_date\"),\n  paymentStatus: text(\"payment_status\").default(\"pending\"), // \"pending\", \"paid\", \"failed\", \"refunded\"\n  paymentId: text(\"payment_id\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Home Tuition Courses table (separate from regular courses)\nexport const homeTuitionCourses = pgTable(\"home_tuition_courses\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  title: text(\"title\").notNull(),\n  description: text(\"description\").notNull(),\n  shortDescription: text(\"short_description\").notNull(),\n  oneToOnePrice: decimal(\"one_to_one_price\", { precision: 10, scale: 2 }).notNull(),\n  groupLearningPrice: decimal(\"group_learning_price\", { precision: 10, scale: 2 }).notNull(),\n  maxGroupSize: integer(\"max_group_size\").default(5),\n  duration: text(\"duration\").notNull(), // \"3 months\", \"6 months\", etc.\n  level: text(\"level\").notNull(), // \"beginner\", \"intermediate\", \"advanced\"\n  curriculum: jsonb(\"curriculum\").notNull(), // Detailed course curriculum\n  prerequisites: text(\"prerequisites\"),\n  availableSeats: integer(\"available_seats\").default(10),\n  occupiedSeats: integer(\"occupied_seats\").default(0),\n  isActive: boolean(\"is_active\").default(true),\n  applicationDeadline: timestamp(\"application_deadline\"),\n  courseStartDate: timestamp(\"course_start_date\"),\n  courseEndDate: timestamp(\"course_end_date\"),\n  coverageArea: text(\"coverage_area\").default(\"Within 25km of Kolkata\"),\n  specialInstructions: text(\"special_instructions\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Student Messages table (Private messaging between admitted students and astrologer)\nexport const studentMessages = pgTable(\"student_messages\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  conversationId: uuid(\"conversation_id\").notNull(), // Groups messages in a conversation\n  studentId: uuid(\"student_id\").references(() => users.id).notNull(),\n  astrologerId: uuid(\"astrologer_id\").references(() => users.id).notNull(),\n  senderId: uuid(\"sender_id\").references(() => users.id).notNull(),\n  message: text(\"message\").notNull(),\n  messageType: text(\"message_type\").default(\"text\"), // \"text\", \"image\", \"file\", \"voice\"\n  fileUrl: text(\"file_url\"),\n  fileName: text(\"file_name\"),\n  fileSize: integer(\"file_size\"),\n  isRead: boolean(\"is_read\").default(false),\n  readAt: timestamp(\"read_at\"),\n  priority: text(\"priority\").default(\"normal\"), // \"low\", \"normal\", \"high\", \"urgent\"\n  replyToMessageId: uuid(\"reply_to_message_id\").references(() => studentMessages.id),\n  isStarred: boolean(\"is_starred\").default(false),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Student Conversations table (To track conversation metadata)\nexport const studentConversations = pgTable(\"student_conversations\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  studentId: uuid(\"student_id\").references(() => users.id).notNull(),\n  astrologerId: uuid(\"astrologer_id\").references(() => users.id).notNull(),\n  conversationId: uuid(\"conversation_id\").notNull().unique(),\n  subject: text(\"subject\").notNull(),\n  lastMessageAt: timestamp(\"last_message_at\").defaultNow(),\n  lastMessageBy: uuid(\"last_message_by\").references(() => users.id),\n  unreadCount: integer(\"unread_count\").default(0),\n  status: text(\"status\").default(\"active\"), // \"active\", \"archived\", \"closed\"\n  priority: text(\"priority\").default(\"normal\"),\n  tags: text(\"tags\").array(), // Array of tags for categorization\n  isArchived: boolean(\"is_archived\").default(false),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Insert schemas for new tables\nexport const insertHomeTuitionApplicationSchema = createInsertSchema(homeTuitionApplications).pick({\n  applicantId: true,\n  applicationType: true,\n  courseId: true,\n  studentDetails: true,\n  aadharCardUrls: true,\n  birthDetails: true,\n  tuitionAddress: true,\n  preferredTimings: true,\n  additionalNotes: true,\n});\n\nexport const insertHomeTuitionCourseSchema = createInsertSchema(homeTuitionCourses).pick({\n  title: true,\n  description: true,\n  shortDescription: true,\n  oneToOnePrice: true,\n  groupLearningPrice: true,\n  maxGroupSize: true,\n  duration: true,\n  level: true,\n  curriculum: true,\n  prerequisites: true,\n  availableSeats: true,\n  applicationDeadline: true,\n  courseStartDate: true,\n  courseEndDate: true,\n  coverageArea: true,\n  specialInstructions: true,\n});\n\nexport const insertStudentMessageSchema = createInsertSchema(studentMessages).pick({\n  conversationId: true,\n  studentId: true,\n  astrologerId: true,\n  senderId: true,\n  message: true,\n  messageType: true,\n  fileUrl: true,\n  fileName: true,\n  fileSize: true,\n  priority: true,\n  replyToMessageId: true,\n});\n\nexport const insertStudentConversationSchema = createInsertSchema(studentConversations).pick({\n  studentId: true,\n  astrologerId: true,\n  conversationId: true,\n  subject: true,\n  priority: true,\n  tags: true,\n});\n\n// Types\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\nexport type InsertConsultation = z.infer<typeof insertConsultationSchema>;\nexport type Consultation = typeof consultations.$inferSelect;\nexport type InsertCourse = z.infer<typeof insertCourseSchema>;\nexport type Course = typeof courses.$inferSelect;\nexport type InsertProduct = z.infer<typeof insertProductSchema>;\nexport type Product = typeof products.$inferSelect;\nexport type InsertOrder = z.infer<typeof insertOrderSchema>;\nexport type Order = typeof orders.$inferSelect;\nexport type InsertChatMessage = z.infer<typeof insertChatMessageSchema>;\nexport type ChatMessage = typeof chatMessages.$inferSelect;\nexport type CourseEnrollment = typeof courseEnrollments.$inferSelect;\nexport type Notification = typeof notifications.$inferSelect;\nexport type AuditLog = typeof auditLogs.$inferSelect;\nexport type InsertFaq = z.infer<typeof insertFaqSchema>;\nexport type Faq = typeof faqs.$inferSelect;\nexport type InsertSupportChat = z.infer<typeof insertSupportChatSchema>;\nexport type SupportChat = typeof supportChats.$inferSelect;\nexport type InsertSupportChatMessage = z.infer<typeof insertSupportChatMessageSchema>;\nexport type SupportChatMessage = typeof supportChatMessages.$inferSelect;\n\n// New home tuition and messaging types\nexport type InsertHomeTuitionApplication = z.infer<typeof insertHomeTuitionApplicationSchema>;\nexport type HomeTuitionApplication = typeof homeTuitionApplications.$inferSelect;\nexport type InsertHomeTuitionCourse = z.infer<typeof insertHomeTuitionCourseSchema>;\nexport type HomeTuitionCourse = typeof homeTuitionCourses.$inferSelect;\nexport type InsertStudentMessage = z.infer<typeof insertStudentMessageSchema>;\nexport type StudentMessage = typeof studentMessages.$inferSelect;\nexport type InsertStudentConversation = z.infer<typeof insertStudentConversationSchema>;\nexport type StudentConversation = typeof studentConversations.$inferSelect;\n\n// New authentication-related types\nexport type OtpVerification = typeof otpVerifications.$inferSelect;\nexport type InsertOtpVerification = typeof otpVerifications.$inferInsert;\nexport type UserContact = typeof userContacts.$inferSelect;\nexport type InsertUserContact = typeof userContacts.$inferInsert;\nexport type SecurityEvent = typeof securityEvents.$inferSelect;\nexport type InsertSecurityEvent = typeof securityEvents.$inferInsert;\nexport type AuthSession = typeof authSessions.$inferSelect;\nexport type InsertAuthSession = typeof authSessions.$inferInsert;\nexport type MobileNumberChange = typeof mobileNumberChanges.$inferSelect;\nexport type InsertMobileNumberChange = typeof mobileNumberChanges.$inferInsert;\nexport type LegalAgreement = typeof legalAgreements.$inferSelect;\nexport type InsertLegalAgreement = typeof legalAgreements.$inferInsert;\n","size_bytes":25860},"client/src/App.tsx":{"content":"import { Switch, Route, useLocation } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { LanguageProvider } from \"@/contexts/LanguageContext\";\nimport NotFound from \"@/pages/not-found\";\nimport Home from \"@/pages/home\";\nimport Login from \"@/pages/auth/login\";\nimport Register from \"@/pages/auth/register\";\nimport Booking from \"@/pages/booking\";\nimport Courses from \"@/pages/courses\";\nimport Products from \"@/pages/products\";\nimport Consultation from \"@/pages/consultation\";\nimport HomeTuition from \"@/pages/home-tuition\";\nimport OneToOneApplication from \"@/pages/home-tuition/apply/one-to-one/[courseId]\";\nimport GroupApplication from \"@/pages/home-tuition/apply/group/[courseId]\";\nimport AdminWorking from \"@/pages/admin-working\";\nimport AdminClients from \"@/pages/admin/clients\";\nimport AdminCourses from \"@/pages/admin/courses\";\nimport AdminProducts from \"@/pages/admin/products\";\nimport AdminFAQs from \"@/pages/admin/faqs\";\nimport AdminConsultations from \"@/pages/admin/consultations\";\nimport AdminHomeTuition from \"@/pages/admin/home-tuition-management\";\nimport AdminSupportChat from \"@/pages/admin/support-chat\";\nimport AdminAnalytics from \"@/pages/admin/analytics\";\nimport AdminNotifications from \"@/pages/admin/notifications\";\nimport Checkout from \"@/pages/checkout\";\nimport PaymentSuccess from \"@/pages/payment/success\";\nimport PaymentFailed from \"@/pages/payment/failed\";\nimport MobileLogin from \"@/pages/mobile-login\";\nimport ConsultationSession from \"@/pages/consultation-session\";\nimport ConsultationFeedback from \"@/pages/consultation-feedback\";\nimport Navigation from \"@/components/layout/navigation\";\nimport Footer from \"@/components/layout/footer\";\nimport CosmicBackground from \"@/components/layout/cosmic-background\";\nimport AIChatbot from \"@/components/support/ai-chatbot\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={Home} />\n      <Route path=\"/login\" component={Login} />\n      <Route path=\"/register\" component={Register} />\n      <Route path=\"/booking\" component={Booking} />\n      <Route path=\"/courses\" component={Courses} />\n      <Route path=\"/home-tuition\" component={HomeTuition} />\n      <Route path=\"/home-tuition/apply/one-to-one/:courseId\" component={OneToOneApplication} />\n      <Route path=\"/home-tuition/apply/group/:courseId\" component={GroupApplication} />\n      <Route path=\"/products\" component={Products} />\n      <Route path=\"/consultation/:id\" component={Consultation} />\n      <Route path=\"/admin\" component={AdminWorking} />\n      <Route path=\"/admin/clients\" component={AdminClients} />\n      <Route path=\"/admin/courses\" component={AdminCourses} />\n      <Route path=\"/admin/products\" component={AdminProducts} />\n      <Route path=\"/admin/faqs\" component={AdminFAQs} />\n      <Route path=\"/admin/consultations\" component={AdminConsultations} />\n      <Route path=\"/admin/home-tuition\" component={AdminHomeTuition} />\n      <Route path=\"/admin/support-chat\" component={AdminSupportChat} />\n      <Route path=\"/admin/analytics\" component={AdminAnalytics} />\n      <Route path=\"/admin/notifications\" component={AdminNotifications} />\n      <Route path=\"/checkout\" component={Checkout} />\n      <Route path=\"/payment/success\" component={PaymentSuccess} />\n      <Route path=\"/payment/failed\" component={PaymentFailed} />\n      <Route path=\"/mobile-login\" component={MobileLogin} />\n      <Route path=\"/consultation-session\" component={ConsultationSession} />\n      <Route path=\"/consultation-feedback\" component={ConsultationFeedback} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  const [location] = useLocation();\n  const isAdminRoute = location.startsWith('/admin');\n\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <LanguageProvider>\n          <div className=\"min-h-screen bg-background text-foreground\">\n            <CosmicBackground />\n            <Navigation />\n            <main className=\"relative z-10\">\n              <Router />\n            </main>\n            {!isAdminRoute && <Footer />}\n            <AIChatbot />\n            <Toaster />\n          </div>\n        </LanguageProvider>\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":4423},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:wght@100..900&display=swap');\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  /* Background colors */\n  --background: rgba(8, 5, 13, 0.01);\n  --foreground: hsl(300, 20%, 99%);\n  --card: rgba(255, 255, 255, 0.02);\n  --card-foreground: hsl(300, 20%, 99%);\n  --popover: rgba(255, 255, 255, 0.02);\n  --popover-foreground: hsl(300, 20%, 99%);\n  \n  /* Primary theme colors */\n  --primary: hsl(42, 92%, 56%);\n  --primary-foreground: hsl(240, 100%, 4%);\n  --secondary: hsl(195, 100%, 50%);\n  --secondary-foreground: hsl(240, 100%, 4%);\n  --muted: rgba(255, 255, 255, 0.05);\n  --muted-foreground: hsl(300, 10%, 70%);\n  --accent: rgba(255, 193, 7, 0.08);\n  --accent-foreground: hsl(240, 100%, 4%);\n  \n  /* Utility colors */\n  --destructive: hsl(0, 62%, 30%);\n  --destructive-foreground: hsl(300, 20%, 99%);\n  --border: rgba(255, 193, 7, 0.1);\n  --input: rgba(255, 255, 255, 0.05);\n  --ring: hsl(42, 92%, 56%);\n  \n  /* Chart colors */\n  --chart-1: hsl(42, 92%, 56%);\n  --chart-2: hsl(195, 100%, 50%);\n  --chart-3: hsl(280, 100%, 70%);\n  --chart-4: hsl(147, 78%, 42%);\n  --chart-5: hsl(341, 75%, 51%);\n  \n  /* Sidebar colors */\n  --sidebar: rgba(255, 255, 255, 0.02);\n  --sidebar-foreground: hsl(300, 20%, 99%);\n  --sidebar-primary: hsl(42, 92%, 56%);\n  --sidebar-primary-foreground: hsl(240, 100%, 4%);\n  --sidebar-accent: hsl(42, 92%, 56%);\n  --sidebar-accent-foreground: hsl(240, 100%, 4%);\n  --sidebar-border: rgba(255, 193, 7, 0.08);\n  --sidebar-ring: hsl(42, 92%, 56%);\n  \n  /* Font families */\n  --font-sans: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  \n  /* Border radius */\n  --radius: 12px;\n  \n  /* Shadows */\n  --shadow-2xs: 0px 2px 0px 0px hsl(42, 92%, 56%, 0.1);\n  --shadow-xs: 0px 2px 0px 0px hsl(42, 92%, 56%, 0.1);\n  --shadow-sm: 0px 2px 0px 0px hsl(42, 92%, 56%, 0.1), 0px 1px 2px -1px hsl(42, 92%, 56%, 0.1);\n  --shadow: 0px 2px 0px 0px hsl(42, 92%, 56%, 0.1), 0px 1px 2px -1px hsl(42, 92%, 56%, 0.1);\n  --shadow-md: 0px 2px 0px 0px hsl(42, 92%, 56%, 0.1), 0px 2px 4px -1px hsl(42, 92%, 56%, 0.1);\n  --shadow-lg: 0px 2px 0px 0px hsl(42, 92%, 56%, 0.1), 0px 4px 6px -1px hsl(42, 92%, 56%, 0.1);\n  --shadow-xl: 0px 2px 0px 0px hsl(42, 92%, 56%, 0.1), 0px 8px 10px -1px hsl(42, 92%, 56%, 0.1);\n  --shadow-2xl: 0px 2px 0px 0px hsl(42, 92%, 56%, 0.1);\n  \n  /* Spacing and typography */\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n}\n\nbody {\n  font-family: var(--font-sans);\n  background: linear-gradient(135deg, #05050f 0%, #0c0618 20%, #14081f 40%, #1a0b2e 60%, #0f0820 80%, #08050d 100%);\n  min-height: 100vh;\n  overflow-x: hidden;\n}\n\n/* Glassmorphism styles */\n.glass {\n  background: rgba(255, 255, 255, 0.01);\n  backdrop-filter: blur(30px) saturate(1.8);\n  border: 1px solid rgba(255, 255, 255, 0.03);\n  box-shadow: 0 8px 32px rgba(0, 0, 0, 0.08);\n}\n\n.glass-card {\n  background: linear-gradient(135deg, \n    rgba(255, 193, 7, 0.04) 0%, \n    rgba(255, 255, 255, 0.01) 50%, \n    rgba(255, 193, 7, 0.02) 100%);\n  backdrop-filter: blur(30px) saturate(2.0);\n  border: 1px solid;\n  border-image: linear-gradient(135deg, \n    rgba(255, 193, 7, 0.12) 0%, \n    rgba(255, 255, 255, 0.06) 50%, \n    rgba(255, 193, 7, 0.08) 100%) 1;\n  box-shadow: \n    0 8px 32px rgba(255, 193, 7, 0.04),\n    0 0 20px rgba(255, 193, 7, 0.02),\n    inset 0 1px 0 rgba(255, 255, 255, 0.05);\n}\n\n/* Neon glow effects */\n.neon-text {\n  -webkit-text-stroke: 1.5px rgba(255, 193, 7, 0.4);\n  text-shadow: \n    0 0 2px hsl(42, 100%, 85%),\n    0 0 5px hsl(42, 100%, 70%),\n    0 0 10px hsl(42, 92%, 56%),\n    0 0 15px hsl(42, 92%, 56%),\n    0 0 20px hsl(42, 100%, 60%),\n    0 0 30px hsl(42, 95%, 55%),\n    0 0 40px hsl(42, 90%, 50%),\n    0 0 50px hsl(42, 85%, 45%),\n    inset 0 0 3px rgba(255, 255, 255, 0.3);\n  filter: brightness(1.4) saturate(1.3) contrast(1.2) drop-shadow(0 0 5px rgba(255, 193, 7, 1.0)) drop-shadow(0 0 15px rgba(255, 193, 7, 0.6));\n  color: hsl(42, 100%, 75%) !important;\n  font-weight: 700;\n  letter-spacing: 0.02em;\n}\n\n.neon-border {\n  box-shadow: 0 0 10px var(--primary), 0 0 20px var(--primary), 0 0 30px var(--primary);\n}\n\n.neon-button {\n  background: linear-gradient(45deg, hsl(42, 92%, 56%), hsl(195, 100%, 50%));\n  box-shadow: 0 0 20px hsl(42, 92%, 56%), 0 4px 15px rgba(0, 0, 0, 0.3);\n  transition: all 0.3s ease;\n}\n\n.neon-button:hover {\n  transform: translateY(-2px);\n  box-shadow: 0 0 30px hsl(42, 92%, 56%), 0 6px 20px rgba(0, 0, 0, 0.4);\n}\n\n/* Navigation styles */\n.nav-glass {\n  background: rgba(26, 11, 46, 0.2);\n  backdrop-filter: blur(30px) saturate(1.8);\n  border-bottom: 1px solid rgba(255, 193, 7, 0.06);\n}\n\n/* Form styling */\n.form-input {\n  background: rgba(255, 255, 255, 0.01);\n  border: 1px solid rgba(255, 193, 7, 0.08);\n  backdrop-filter: blur(20px) saturate(1.5);\n  color: hsl(300, 20%, 99%);\n}\n\n/* Hide native date/time input icons to show our custom ones */\n.form-input::-webkit-calendar-picker-indicator,\n.form-input::-webkit-inner-spin-button,\n.form-input::-webkit-datetime-edit-fields-wrapper {\n  opacity: 0;\n  cursor: pointer;\n}\n\n.form-input:focus {\n  border-color: hsl(42, 92%, 56%);\n  box-shadow: 0 0 0 2px rgba(255, 193, 7, 0.2);\n  outline: none;\n}\n\n.form-input::placeholder {\n  color: hsl(300, 10%, 70%);\n}\n\n/* Custom scrollbar */\n::-webkit-scrollbar {\n  width: 8px;\n}\n\n::-webkit-scrollbar-track {\n  background: rgba(255, 193, 7, 0.1);\n}\n\n::-webkit-scrollbar-thumb {\n  background: linear-gradient(45deg, hsl(42, 92%, 56%), hsl(195, 100%, 50%));\n  border-radius: 4px;\n}\n\n/* Animations */\n@keyframes float {\n  0%, 100% { transform: translateY(0px) translateX(0px); }\n  25% { transform: translateY(-15px) translateX(5px); }\n  50% { transform: translateY(-30px) translateX(0px); }\n  75% { transform: translateY(-15px) translateX(-5px); }\n}\n\n@keyframes glow {\n  0%, 100% { opacity: 0.8; filter: brightness(1); }\n  50% { opacity: 1; filter: brightness(1.3); }\n}\n\n@keyframes orbit {\n  0% { transform: rotate(0deg) translateX(150px) rotate(0deg); }\n  100% { transform: rotate(360deg) translateX(150px) rotate(-360deg); }\n}\n\n@keyframes twinkle {\n  0%, 100% { opacity: 0.4; transform: scale(1); }\n  50% { opacity: 1; transform: scale(1.2); }\n}\n\n@keyframes comet {\n  0% { \n    transform: translateX(-100vw) translateY(-100vh) rotate(-45deg);\n    opacity: 0;\n  }\n  10% { opacity: 1; }\n  90% { opacity: 1; }\n  100% { \n    transform: translateX(100vw) translateY(100vh) rotate(-45deg);\n    opacity: 0;\n  }\n}\n\n@keyframes nebula-drift {\n  0%, 100% { transform: translateX(0) translateY(0) scale(1); }\n  25% { transform: translateX(20px) translateY(-10px) scale(1.1); }\n  50% { transform: translateX(-10px) translateY(15px) scale(0.9); }\n  75% { transform: translateX(15px) translateY(20px) scale(1.05); }\n}\n\n@keyframes pulse-neon {\n  0%, 100% { \n    box-shadow: 0 0 20px hsl(42, 92%, 56%);\n  }\n  50% { \n    box-shadow: 0 0 30px hsl(42, 92%, 56%), 0 0 40px hsl(195, 100%, 50%);\n  }\n}\n\n/* Utility classes */\n.animate-float {\n  animation: float 6s ease-in-out infinite;\n}\n\n.animate-glow {\n  animation: glow 2s ease-in-out infinite alternate;\n}\n\n.animate-orbit {\n  animation: orbit 20s linear infinite;\n}\n\n.animate-twinkle {\n  animation: twinkle 3s ease-in-out infinite;\n}\n\n.animate-pulse-neon {\n  animation: pulse-neon 2s ease-in-out infinite;\n}\n\n.animate-comet {\n  animation: comet 8s linear infinite;\n}\n\n.animate-nebula-drift {\n  animation: nebula-drift 15s ease-in-out infinite;\n}\n\n/* Mobile menu animation */\n.mobile-menu {\n  transform: translateX(-100%);\n  transition: transform 0.3s ease-in-out;\n}\n\n.mobile-menu.open {\n  transform: translateX(0);\n}\n\n/* Cosmic background elements */\n.cosmic-bg {\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  z-index: -1;\n  overflow: hidden;\n}\n\n.star {\n  position: absolute;\n  width: 2px;\n  height: 2px;\n  background: white;\n  border-radius: 50%;\n  animation: twinkle 3s ease-in-out infinite;\n}\n\n.planet {\n  position: absolute;\n  border-radius: 50%;\n  animation: orbit 20s linear infinite;\n}\n\n.comet {\n  position: absolute;\n  width: 3px;\n  height: 3px;\n  background: linear-gradient(45deg, #00f5ff, #ffffff);\n  border-radius: 50%;\n  box-shadow: 0 0 10px #00f5ff;\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n  \n  h1, h2, h3, h4, h5, h6 {\n    @apply font-semibold;\n  }\n  \n  button {\n    @apply transition-all duration-200;\n  }\n  \n  input, textarea, select {\n    @apply transition-colors duration-200;\n  }\n}\n\n@layer utilities {\n  .text-gradient {\n    background: linear-gradient(45deg, hsl(42, 92%, 56%), hsl(195, 100%, 50%));\n    background-clip: text;\n    -webkit-background-clip: text;\n    -webkit-text-fill-color: transparent;\n  }\n  \n  .border-gradient {\n    border: 2px solid transparent;\n    background: linear-gradient(var(--background), var(--background)) padding-box,\n                linear-gradient(45deg, hsl(42, 92%, 56%), hsl(195, 100%, 50%)) border-box;\n  }\n}\n","size_bytes":8993},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/hooks/use-websocket.tsx":{"content":"import { useEffect, useRef, useState } from \"react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useLanguage } from \"@/contexts/LanguageContext\";\n\ninterface WebSocketMessage {\n  type: string;\n  [key: string]: any;\n}\n\ninterface UseWebSocketProps {\n  onMessage?: (message: WebSocketMessage) => void;\n  onConnect?: () => void;\n  onDisconnect?: () => void;\n  reconnectAttempts?: number;\n  reconnectInterval?: number;\n}\n\nexport function useWebSocket({\n  onMessage,\n  onConnect,\n  onDisconnect,\n  reconnectAttempts = 5,\n  reconnectInterval = 3000,\n}: UseWebSocketProps = {}) {\n  const [isConnected, setIsConnected] = useState(false);\n  const [connectionState, setConnectionState] = useState<'connecting' | 'connected' | 'disconnected' | 'error'>('disconnected');\n  const socketRef = useRef<WebSocket | null>(null);\n  const reconnectTimeoutRef = useRef<NodeJS.Timeout | null>(null);\n  const attemptCountRef = useRef(0);\n  const { toast } = useToast();\n  const { t } = useLanguage();\n\n  const connect = () => {\n    if (socketRef.current?.readyState === WebSocket.OPEN) {\n      return;\n    }\n\n    setConnectionState('connecting');\n\n    try {\n      // Determine the WebSocket protocol and URL\n      // Fix for localhost:undefined error\n      const host = window.location.host || 'localhost:5000';\n      const protocol = window.location.protocol === \"https:\" ? \"wss:\" : \"ws:\";\n      const wsUrl = `${protocol}//${host}/ws`;\n      \n      const socket = new WebSocket(wsUrl);\n      socketRef.current = socket;\n\n      socket.onopen = () => {\n        setIsConnected(true);\n        setConnectionState('connected');\n        attemptCountRef.current = 0;\n        onConnect?.();\n        \n        toast({\n          title: t(\"connected\") || \"Connected\",\n          description: t(\"connectionEstablished\") || \"Real-time connection established\",\n        });\n      };\n\n      socket.onmessage = (event) => {\n        try {\n          const message = JSON.parse(event.data);\n          onMessage?.(message);\n        } catch (error) {\n          console.error(\"Failed to parse WebSocket message:\", error);\n        }\n      };\n\n      socket.onclose = (event) => {\n        setIsConnected(false);\n        setConnectionState('disconnected');\n        onDisconnect?.();\n\n        // Only attempt reconnection if it wasn't a manual close\n        if (event.code !== 1000 && attemptCountRef.current < reconnectAttempts) {\n          scheduleReconnect();\n        } else if (attemptCountRef.current >= reconnectAttempts) {\n          toast({\n            title: \"Connection Failed\",\n            description: \"Unable to establish real-time connection. Please refresh the page.\",\n            variant: \"destructive\",\n          });\n        }\n      };\n\n      socket.onerror = () => {\n        setConnectionState('error');\n        console.error(\"WebSocket connection error\");\n      };\n\n    } catch (error) {\n      console.error(\"Failed to create WebSocket connection:\", error);\n      setConnectionState('error');\n      scheduleReconnect();\n    }\n  };\n\n  const scheduleReconnect = () => {\n    if (attemptCountRef.current < reconnectAttempts) {\n      attemptCountRef.current += 1;\n      \n      reconnectTimeoutRef.current = setTimeout(() => {\n        console.log(`Reconnection attempt ${attemptCountRef.current}/${reconnectAttempts}`);\n        connect();\n      }, reconnectInterval * attemptCountRef.current); // Exponential backoff\n    }\n  };\n\n  const disconnect = () => {\n    if (reconnectTimeoutRef.current) {\n      clearTimeout(reconnectTimeoutRef.current);\n      reconnectTimeoutRef.current = null;\n    }\n\n    if (socketRef.current) {\n      socketRef.current.close(1000, \"Manual disconnect\");\n      socketRef.current = null;\n    }\n\n    setIsConnected(false);\n    setConnectionState('disconnected');\n  };\n\n  const sendMessage = (message: WebSocketMessage) => {\n    if (socketRef.current?.readyState === WebSocket.OPEN) {\n      try {\n        socketRef.current.send(JSON.stringify(message));\n        return true;\n      } catch (error) {\n        console.error(\"Failed to send WebSocket message:\", error);\n        toast({\n          title: \"Send Failed\",\n          description: \"Failed to send message. Please try again.\",\n          variant: \"destructive\",\n        });\n        return false;\n      }\n    } else {\n      toast({\n        title: \"Not Connected\",\n        description: \"Real-time connection is not available. Trying to reconnect...\",\n        variant: \"destructive\",\n      });\n      \n      // Attempt to reconnect\n      if (connectionState !== 'connecting') {\n        connect();\n      }\n      \n      return false;\n    }\n  };\n\n  // Auto-connect on mount\n  useEffect(() => {\n    connect();\n\n    // Cleanup on unmount\n    return () => {\n      disconnect();\n    };\n  }, []); // eslint-disable-line react-hooks/exhaustive-deps\n\n  // Handle page visibility changes\n  useEffect(() => {\n    const handleVisibilityChange = () => {\n      if (document.visibilityState === 'visible' && !isConnected) {\n        // Reconnect when page becomes visible and not connected\n        connect();\n      }\n    };\n\n    document.addEventListener('visibilitychange', handleVisibilityChange);\n    return () => document.removeEventListener('visibilitychange', handleVisibilityChange);\n  }, [isConnected]);\n\n  // Handle online/offline events\n  useEffect(() => {\n    const handleOnline = () => {\n      if (!isConnected) {\n        connect();\n      }\n    };\n\n    const handleOffline = () => {\n      toast({\n        title: \"Connection Lost\",\n        description: \"You are offline. Connection will resume when online.\",\n        variant: \"destructive\",\n      });\n    };\n\n    window.addEventListener('online', handleOnline);\n    window.addEventListener('offline', handleOffline);\n\n    return () => {\n      window.removeEventListener('online', handleOnline);\n      window.removeEventListener('offline', handleOffline);\n    };\n  }, [isConnected, toast]);\n\n  return {\n    isConnected,\n    connectionState,\n    connect,\n    disconnect,\n    sendMessage,\n  };\n}\n","size_bytes":5980},"client/src/lib/i18n.ts":{"content":"// Internationalization configuration and utilities\nexport interface TranslationResource {\n  [key: string]: string | TranslationResource;\n}\n\nexport interface LanguageConfig {\n  code: string;\n  name: string;\n  nativeName: string;\n  flag: string;\n  rtl?: boolean;\n}\n\n// Supported languages configuration\nexport const supportedLanguages: LanguageConfig[] = [\n  { code: 'en', name: 'English', nativeName: 'English', flag: '🇺🇸' },\n  { code: 'hi', name: 'Hindi', nativeName: 'हिंदी', flag: '🇮🇳' },\n  { code: 'bn', name: 'Bengali', nativeName: 'বাংলা', flag: '🇧🇩' },\n  { code: 'es', name: 'Spanish', nativeName: 'Español', flag: '🇪🇸' },\n  { code: 'fr', name: 'French', nativeName: 'Français', flag: '🇫🇷' },\n  { code: 'de', name: 'German', nativeName: 'Deutsch', flag: '🇩🇪' },\n  { code: 'it', name: 'Italian', nativeName: 'Italiano', flag: '🇮🇹' },\n  { code: 'pt', name: 'Portuguese', nativeName: 'Português', flag: '🇵🇹' },\n  { code: 'ru', name: 'Russian', nativeName: 'Русский', flag: '🇷🇺' },\n  { code: 'zh', name: 'Chinese', nativeName: '中文', flag: '🇨🇳' },\n  { code: 'ja', name: 'Japanese', nativeName: '日本語', flag: '🇯🇵' },\n  { code: 'ko', name: 'Korean', nativeName: '한국어', flag: '🇰🇷' },\n  { code: 'ar', name: 'Arabic', nativeName: 'العربية', flag: '🇸🇦', rtl: true },\n];\n\n// Translation resources\nconst translations: Record<string, TranslationResource> = {\n  en: {\n    navigation: {\n      home: 'Home',\n      services: 'Services',\n      courses: 'Courses',\n      products: 'Products',\n      about: 'About',\n      login: 'Login',\n      logout: 'Logout',\n      bookConsultation: 'Book Consultation',\n      dashboard: 'Dashboard',\n    },\n    home: {\n      title: 'Discover Your Cosmic Destiny',\n      subtitle: 'Unlock the secrets of the universe with expert Vedic astrology consultations by Astrologer Arup Shastri - 18+ years of transformative guidance',\n      bookReading: 'Book Your Reading Now',\n      exploreCourses: 'Explore Courses',\n      yearsExperience: 'Years Experience',\n      satisfiedClients: 'Satisfied Clients',\n      countriesServed: 'Countries Served',\n    },\n    consultation: {\n      types: {\n        video: 'Video Call',\n        audio: 'Audio Call',\n        chat: 'Chat Session',\n        inPerson: 'In-Person',\n      },\n      plans: {\n        quickGuidance: 'Quick Guidance',\n        focusedAnalysis: 'Focused Analysis',\n        inDepthAnalysis: 'In-Depth Analysis',\n        comprehensiveAnalysis: 'Comprehensive Analysis',\n      },\n      status: {\n        scheduled: 'Scheduled',\n        ongoing: 'In Progress',\n        completed: 'Completed',\n        cancelled: 'Cancelled',\n      },\n    },\n    forms: {\n      fullName: 'Full Name',\n      email: 'Email Address',\n      phoneNumber: 'Phone Number',\n      dateOfBirth: 'Date of Birth',\n      timeOfBirth: 'Time of Birth',\n      placeOfBirth: 'Place of Birth',\n      required: 'Required',\n      optional: 'Optional',\n      submit: 'Submit',\n      cancel: 'Cancel',\n      save: 'Save',\n      edit: 'Edit',\n      delete: 'Delete',\n    },\n    messages: {\n      welcome: 'Welcome to Jai Guru Astro Remedy',\n      loginSuccess: 'Login successful',\n      loginFailed: 'Login failed',\n      registrationSuccess: 'Registration successful',\n      bookingConfirmed: 'Booking confirmed',\n      paymentRequired: 'Payment required',\n      connectionLost: 'Connection lost',\n      reconnecting: 'Reconnecting...',\n    },\n    astrologer: {\n      name: 'Astrologer Arup Shastri',\n      title: 'Expert Vedic Astrologer',\n      experience: '18+ years of experience',\n      specialties: {\n        vedicAstrology: 'Vedic Astrology',\n        palmistry: 'Palmistry',\n        numerology: 'Numerology',\n        cosmicRemedies: 'Cosmic Remedies',\n      },\n    },\n  },\n  hi: {\n    navigation: {\n      home: 'मुख्य पृष्ठ',\n      services: 'सेवाएं',\n      courses: 'पाठ्यक्रम',\n      products: 'उत्पाद',\n      about: 'बारे में',\n      login: 'लॉगिन',\n      logout: 'लॉगआउट',\n      bookConsultation: 'परामर्श बुक करें',\n      dashboard: 'डैशबोर्ड',\n    },\n    home: {\n      title: 'अपनी कॉस्मिक नियति खोजें',\n      subtitle: 'अरुप शास्त्री के 18+ वर्षों के अनुभव के साथ वैदिक ज्योतिष परामर्श द्वारा ब्रह्मांड के रहस्यों को अनलॉक करें',\n      bookReading: 'अभी अपना रीडिंग बुक करें',\n      exploreCourses: 'पाठ्यक्रम देखें',\n      yearsExperience: 'वर्षों का अनुभव',\n      satisfiedClients: 'संतुष्ट ग्राहक',\n      countriesServed: 'देश सेवित',\n    },\n    consultation: {\n      types: {\n        video: 'वीडियो कॉल',\n        audio: 'ऑडियो कॉल',\n        chat: 'चैट सेशन',\n        inPerson: 'व्यक्तिगत',\n      },\n      plans: {\n        quickGuidance: 'त्वरित मार्गदर्शन',\n        focusedAnalysis: 'केंद्रित विश्लेषण',\n        inDepthAnalysis: 'गहन विश्लेषण',\n        comprehensiveAnalysis: 'व्यापक विश्लेषण',\n      },\n    },\n    astrologer: {\n      name: 'अरुप शास्त्री',\n      title: 'विशेषज्ञ वैदिक ज्योतिषी',\n      experience: '18+ वर्षों का अनुभव',\n    },\n  },\n  bn: {\n    navigation: {\n      home: 'হোম',\n      services: 'সেবা',\n      courses: 'কোর্স',\n      products: 'পণ্য',\n      about: 'সম্পর্কে',\n      login: 'লগইন',\n      logout: 'লগআউট',\n      bookConsultation: 'পরামর্শ বুক করুন',\n      dashboard: 'ড্যাশবোর্ড',\n    },\n    home: {\n      title: 'আপনার মহাজাগতিক নিয়তি আবিষ্কার করুন',\n      subtitle: 'অরুপ শাস্ত্রীর 18+ বছরের অভিজ্ঞতার সাথে বিশেষজ্ঞ বৈদিক জ্যোতিষ পরামর্শের মাধ্যমে মহাবিশ্বের গোপনীয়তা আনলক করুন',\n      bookReading: 'এখনই আপনার রিডিং বুক করুন',\n      exploreCourses: 'কোর্স অন্বেষণ করুন',\n      yearsExperience: 'বছরের অভিজ্ঞতা',\n      satisfiedClients: 'সন্তুষ্ট ক্লায়েন্ট',\n      countriesServed: 'দেশ সেবা করা হয়েছে',\n    },\n    astrologer: {\n      name: 'অরুপ শাস্ত্রী',\n      title: 'বিশেষজ্ঞ বৈদিক জ্যোতিষী',\n      experience: '18+ বছরের অভিজ্ঞতা',\n    },\n  },\n};\n\n// Translation state management\nclass I18nManager {\n  private currentLanguage: string = 'en';\n  private fallbackLanguage: string = 'en';\n  private listeners: Array<(language: string) => void> = [];\n\n  constructor() {\n    // Load saved language from localStorage\n    const savedLanguage = localStorage.getItem('preferred-language');\n    if (savedLanguage && this.isLanguageSupported(savedLanguage)) {\n      this.currentLanguage = savedLanguage;\n    } else {\n      // Detect browser language\n      const browserLanguage = navigator.language.split('-')[0];\n      if (this.isLanguageSupported(browserLanguage)) {\n        this.currentLanguage = browserLanguage;\n      }\n    }\n\n    // Apply RTL if needed\n    this.applyLanguageDirection();\n  }\n\n  isLanguageSupported(language: string): boolean {\n    return supportedLanguages.some(lang => lang.code === language);\n  }\n\n  getCurrentLanguage(): string {\n    return this.currentLanguage;\n  }\n\n  setLanguage(language: string): void {\n    if (!this.isLanguageSupported(language)) {\n      console.warn(`Language ${language} is not supported, falling back to ${this.fallbackLanguage}`);\n      return;\n    }\n\n    this.currentLanguage = language;\n    localStorage.setItem('preferred-language', language);\n    this.applyLanguageDirection();\n    this.notifyListeners();\n  }\n\n  subscribe(listener: (language: string) => void): () => void {\n    this.listeners.push(listener);\n    return () => {\n      const index = this.listeners.indexOf(listener);\n      if (index > -1) {\n        this.listeners.splice(index, 1);\n      }\n    };\n  }\n\n  private notifyListeners(): void {\n    this.listeners.forEach(listener => listener(this.currentLanguage));\n  }\n\n  private applyLanguageDirection(): void {\n    const languageConfig = supportedLanguages.find(lang => lang.code === this.currentLanguage);\n    const isRTL = languageConfig?.rtl || false;\n    \n    document.documentElement.setAttribute('dir', isRTL ? 'rtl' : 'ltr');\n    document.documentElement.setAttribute('lang', this.currentLanguage);\n  }\n\n  translate(key: string, interpolations?: Record<string, string>): string {\n    const keys = key.split('.');\n    let translation: any = translations[this.currentLanguage];\n    \n    // Navigate through nested keys\n    for (const k of keys) {\n      if (translation && typeof translation === 'object' && k in translation) {\n        translation = translation[k];\n      } else {\n        // Fallback to English if key not found\n        translation = translations[this.fallbackLanguage];\n        for (const k of keys) {\n          if (translation && typeof translation === 'object' && k in translation) {\n            translation = translation[k];\n          } else {\n            return key; // Return key if translation not found\n          }\n        }\n        break;\n      }\n    }\n\n    if (typeof translation !== 'string') {\n      return key;\n    }\n\n    // Apply interpolations\n    if (interpolations) {\n      return Object.entries(interpolations).reduce((result, [placeholder, value]) => {\n        return result.replace(new RegExp(`{{${placeholder}}}`, 'g'), value);\n      }, translation);\n    }\n\n    return translation;\n  }\n\n  // Helper method to get language configuration\n  getLanguageConfig(code?: string): LanguageConfig | undefined {\n    const languageCode = code || this.currentLanguage;\n    return supportedLanguages.find(lang => lang.code === languageCode);\n  }\n\n  // Format numbers according to locale\n  formatNumber(number: number): string {\n    try {\n      const languageConfig = this.getLanguageConfig();\n      const locale = languageConfig?.code === 'hi' ? 'hi-IN' : \n                    languageConfig?.code === 'bn' ? 'bn-BD' : \n                    languageConfig?.code === 'ar' ? 'ar-SA' : \n                    'en-US';\n      return new Intl.NumberFormat(locale).format(number);\n    } catch (error) {\n      return number.toString();\n    }\n  }\n\n  // Format currency according to locale\n  formatCurrency(amount: number, currency: string = 'INR'): string {\n    try {\n      const languageConfig = this.getLanguageConfig();\n      const locale = languageConfig?.code === 'hi' ? 'hi-IN' : \n                    languageConfig?.code === 'bn' ? 'bn-BD' : \n                    'en-IN';\n      return new Intl.NumberFormat(locale, {\n        style: 'currency',\n        currency: currency,\n      }).format(amount);\n    } catch (error) {\n      return `${currency} ${amount}`;\n    }\n  }\n\n  // Format dates according to locale\n  formatDate(date: Date | string): string {\n    try {\n      const dateObj = typeof date === 'string' ? new Date(date) : date;\n      const languageConfig = this.getLanguageConfig();\n      const locale = languageConfig?.code === 'hi' ? 'hi-IN' : \n                    languageConfig?.code === 'bn' ? 'bn-BD' : \n                    languageConfig?.code === 'ar' ? 'ar-SA' : \n                    'en-US';\n      return new Intl.DateTimeFormat(locale, {\n        year: 'numeric',\n        month: 'long',\n        day: 'numeric',\n      }).format(dateObj);\n    } catch (error) {\n      return date.toString();\n    }\n  }\n}\n\n// Create and export singleton instance\nexport const i18n = new I18nManager();\n\n// React hook for using translations\nexport const useTranslation = () => {\n  const [currentLanguage, setCurrentLanguage] = React.useState(i18n.getCurrentLanguage());\n\n  React.useEffect(() => {\n    const unsubscribe = i18n.subscribe(setCurrentLanguage);\n    return unsubscribe;\n  }, []);\n\n  const t = React.useCallback((key: string, interpolations?: Record<string, string>) => {\n    return i18n.translate(key, interpolations);\n  }, []);\n\n  const changeLanguage = React.useCallback((language: string) => {\n    i18n.setLanguage(language);\n  }, []);\n\n  return {\n    t,\n    currentLanguage,\n    changeLanguage,\n    supportedLanguages,\n    formatNumber: i18n.formatNumber.bind(i18n),\n    formatCurrency: i18n.formatCurrency.bind(i18n),\n    formatDate: i18n.formatDate.bind(i18n),\n  };\n};\n\n// Add React import for the hook\nimport * as React from 'react';\n\n// Helper function to add new translations dynamically\nexport const addTranslations = (language: string, newTranslations: TranslationResource) => {\n  if (!translations[language]) {\n    translations[language] = {};\n  }\n  \n  // Deep merge translations\n  const merge = (target: any, source: any) => {\n    for (const key in source) {\n      if (source[key] && typeof source[key] === 'object' && !Array.isArray(source[key])) {\n        if (!target[key]) target[key] = {};\n        merge(target[key], source[key]);\n      } else {\n        target[key] = source[key];\n      }\n    }\n  };\n  \n  merge(translations[language], newTranslations);\n};\n\n// Export useful utilities\nexport const getCurrentLanguage = () => i18n.getCurrentLanguage();\nexport const setLanguage = (language: string) => i18n.setLanguage(language);\nexport const translate = (key: string, interpolations?: Record<string, string>) => i18n.translate(key, interpolations);\n","size_bytes":14157},"client/src/lib/jitsi.ts":{"content":"// Jitsi Meet API integration for video consultations\nexport interface JitsiConfig {\n  parentNode: HTMLElement;\n  roomName: string;\n  displayName: string;\n  configOverwrite?: any;\n  interfaceConfigOverwrite?: any;\n  onApiReady?: (api: JitsiMeetInstance) => void;\n}\n\nexport interface JitsiMeetInstance {\n  executeCommand: (command: string, ...args: any[]) => void;\n  addEventListener: (event: string, listener: (...args: any[]) => void) => void;\n  removeEventListener: (event: string, listener: (...args: any[]) => void) => void;\n  dispose: () => void;\n  getNumberOfParticipants: () => number;\n  isDeviceListAvailable: () => boolean;\n  isDeviceChangeAvailable: (deviceType: string) => boolean;\n  isMultipleAudioInputSupported: () => boolean;\n  invite: (invitees: any[]) => void;\n}\n\ndeclare global {\n  interface Window {\n    JitsiMeetExternalAPI?: any;\n  }\n}\n\n// Load Jitsi Meet External API script\nconst loadJitsiScript = (): Promise<void> => {\n  return new Promise((resolve, reject) => {\n    if (window.JitsiMeetExternalAPI) {\n      resolve();\n      return;\n    }\n\n    const script = document.createElement('script');\n    script.src = 'https://meet.jit.si/external_api.js';\n    script.async = true;\n    \n    script.onload = () => {\n      if (window.JitsiMeetExternalAPI) {\n        resolve();\n      } else {\n        reject(new Error('Jitsi Meet API not loaded'));\n      }\n    };\n    \n    script.onerror = () => {\n      reject(new Error('Failed to load Jitsi Meet script'));\n    };\n\n    document.head.appendChild(script);\n  });\n};\n\nexport const initializeJitsi = async ({\n  parentNode,\n  roomName,\n  displayName,\n  configOverwrite = {},\n  interfaceConfigOverwrite = {},\n  onApiReady,\n}: JitsiConfig): Promise<JitsiMeetInstance> => {\n  await loadJitsiScript();\n\n  const domain = 'meet.jit.si';\n  \n  const defaultConfig = {\n    // Basic configuration\n    startWithAudioMuted: false,\n    startWithVideoMuted: false,\n    enableWelcomePage: false,\n    enableClosePage: false,\n    prejoinPageEnabled: false,\n    \n    // Quality and performance\n    resolution: 720,\n    constraints: {\n      video: {\n        height: { ideal: 720, max: 1080 }\n      }\n    },\n    \n    // UI and branding\n    defaultLanguage: 'en',\n    disableModeratorIndicator: false,\n    \n    // Features\n    enableNoiseCancellation: true,\n    enableTalkWhileMuted: false,\n    disableAP: false,\n    disableAEC: false,\n    disableNS: false,\n    disableAGC: false,\n    disableHPF: false,\n    \n    // Security\n    enableInsecureRoomNameWarning: false,\n    enableLobbyChat: false,\n    \n    // Recording and streaming\n    fileRecordingsEnabled: false,\n    liveStreamingEnabled: false,\n    \n    // Chat and interaction\n    disablePrivateChat: false,\n    startSilent: false,\n    \n    // Performance optimizations\n    channelLastN: 2, // Only show last N participants\n    enableLayerSuspension: true,\n    \n    ...configOverwrite\n  };\n\n  const defaultInterfaceConfig = {\n    // Branding\n    SHOW_JITSI_WATERMARK: false,\n    SHOW_WATERMARK_FOR_GUESTS: false,\n    SHOW_BRAND_WATERMARK: false,\n    BRAND_WATERMARK_LINK: \"\",\n    SHOW_POWERED_BY: false,\n    APP_NAME: \"Jai Guru Astro Remedy\",\n    NATIVE_APP_NAME: \"Jai Guru Astro Remedy\",\n    PROVIDER_NAME: \"Astrologer Arup Shastri\",\n    \n    // Welcome page\n    DISPLAY_WELCOME_PAGE_CONTENT: false,\n    DISPLAY_WELCOME_PAGE_TOOLBAR_ADDITIONAL_CONTENT: false,\n    \n    // Notifications\n    DISABLE_JOIN_LEAVE_NOTIFICATIONS: true,\n    DISABLE_PRESENCE_STATUS: false,\n    \n    // Toolbar and UI\n    TOOLBAR_BUTTONS: [\n      'microphone', 'camera', 'closedcaptions', 'desktop', \n      'fullscreen', 'fodeviceselection', 'hangup', 'profile',\n      'chat', 'recording', 'livestreaming', 'etherpad', \n      'sharedvideo', 'settings', 'raisehand', 'videoquality',\n      'filmstrip', 'invite', 'feedback', 'stats', 'shortcuts',\n      'tileview', 'videobackgroundblur', 'download', 'help'\n    ],\n    \n    TOOLBAR_TIMEOUT: 4000,\n    \n    // Settings\n    SETTINGS_SECTIONS: ['devices', 'language', 'moderator', 'profile', 'calendar'],\n    \n    // Mobile and browser optimization\n    MOBILE_APP_PROMO: false,\n    OPTIMAL_BROWSERS: ['chrome', 'chromium', 'firefox', 'nwjs', 'electron', 'safari'],\n    UNSUPPORTED_BROWSERS: [],\n    \n    // Video layout\n    VIDEO_LAYOUT_FIT: 'both',\n    LOCAL_THUMBNAIL_RATIO: 16 / 9,\n    REMOTE_THUMBNAIL_RATIO: 1,\n    MAXIMUM_ZOOMING_COEFFICIENT: 1.3,\n    \n    // Features\n    HIDE_INVITE_MORE_HEADER: true,\n    RECENT_LIST_ENABLED: false,\n    LANG_DETECTION: false,\n    SHOW_CHROME_EXTENSION_BANNER: false,\n    \n    ...interfaceConfigOverwrite\n  };\n\n  const api = new window.JitsiMeetExternalAPI(domain, {\n    roomName: roomName,\n    width: '100%',\n    height: '100%',\n    parentNode: parentNode,\n    configOverwrite: defaultConfig,\n    interfaceConfigOverwrite: defaultInterfaceConfig,\n    userInfo: {\n      displayName: displayName,\n    },\n  });\n\n  // Enhanced API wrapper with additional methods\n  const enhancedApi: JitsiMeetInstance = {\n    executeCommand: (command: string, ...args: any[]) => {\n      try {\n        api.executeCommand(command, ...args);\n      } catch (error) {\n        console.error(`Failed to execute command ${command}:`, error);\n      }\n    },\n\n    addEventListener: (event: string, listener: (...args: any[]) => void) => {\n      api.addEventListener(event, listener);\n    },\n\n    removeEventListener: (event: string, listener: (...args: any[]) => void) => {\n      api.removeEventListener(event, listener);\n    },\n\n    dispose: () => {\n      try {\n        api.dispose();\n      } catch (error) {\n        console.error('Error disposing Jitsi API:', error);\n      }\n    },\n\n    getNumberOfParticipants: () => {\n      return api.getNumberOfParticipants();\n    },\n\n    isDeviceListAvailable: () => {\n      return api.isDeviceListAvailable();\n    },\n\n    isDeviceChangeAvailable: (deviceType: string) => {\n      return api.isDeviceChangeAvailable(deviceType);\n    },\n\n    isMultipleAudioInputSupported: () => {\n      return api.isMultipleAudioInputSupported();\n    },\n\n    invite: (invitees: any[]) => {\n      api.invite(invitees);\n    },\n  };\n\n  // Wait for API to be ready\n  return new Promise((resolve) => {\n    api.addEventListener('videoConferenceJoined', () => {\n      onApiReady?.(enhancedApi);\n      resolve(enhancedApi);\n    });\n  });\n};\n\n// Utility functions for Jitsi integration\nexport const getOptimalVideoQuality = (): number => {\n  // Determine optimal video quality based on device capabilities\n  const connection = (navigator as any).connection || (navigator as any).mozConnection || (navigator as any).webkitConnection;\n  \n  if (connection) {\n    switch (connection.effectiveType) {\n      case 'slow-2g':\n      case '2g':\n        return 240;\n      case '3g':\n        return 360;\n      case '4g':\n      default:\n        return 720;\n    }\n  }\n  \n  // Default to 720p if connection info is not available\n  return 720;\n};\n\nexport const checkBrowserCompatibility = (): { isSupported: boolean; issues: string[] } => {\n  const issues: string[] = [];\n  let isSupported = true;\n\n  // Check for required APIs\n  if (!navigator.mediaDevices || !navigator.mediaDevices.getUserMedia) {\n    issues.push('Camera and microphone access not supported');\n    isSupported = false;\n  }\n\n  if (!window.RTCPeerConnection) {\n    issues.push('WebRTC not supported');\n    isSupported = false;\n  }\n\n  if (!window.WebSocket) {\n    issues.push('WebSocket not supported');\n    isSupported = false;\n  }\n\n  // Check browser version\n  const userAgent = navigator.userAgent;\n  const isChrome = /Chrome/.test(userAgent);\n  const isFirefox = /Firefox/.test(userAgent);\n  const isSafari = /Safari/.test(userAgent) && !/Chrome/.test(userAgent);\n  const isEdge = /Edge/.test(userAgent);\n\n  if (!isChrome && !isFirefox && !isSafari && !isEdge) {\n    issues.push('Browser may not be fully supported');\n  }\n\n  return { isSupported, issues };\n};\n\nexport const getDevicePermissions = async (): Promise<{ video: boolean; audio: boolean; errors: string[] }> => {\n  const errors: string[] = [];\n  let video = false;\n  let audio = false;\n\n  try {\n    const stream = await navigator.mediaDevices.getUserMedia({ video: true, audio: true });\n    \n    const videoTracks = stream.getVideoTracks();\n    const audioTracks = stream.getAudioTracks();\n    \n    video = videoTracks.length > 0;\n    audio = audioTracks.length > 0;\n    \n    // Clean up the stream\n    stream.getTracks().forEach(track => track.stop());\n    \n  } catch (error: any) {\n    if (error.name === 'NotAllowedError') {\n      errors.push('Camera and microphone access denied by user');\n    } else if (error.name === 'NotFoundError') {\n      errors.push('Camera or microphone not found');\n    } else if (error.name === 'NotReadableError') {\n      errors.push('Camera or microphone is being used by another application');\n    } else {\n      errors.push(`Media access error: ${error.message}`);\n    }\n  }\n\n  return { video, audio, errors };\n};\n","size_bytes":8905},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/booking.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { useLocation } from \"wouter\";\nimport { GlassCard } from \"@/components/ui/glass-card\";\nimport { NeonButton } from \"@/components/ui/neon-button\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Calendar } from \"@/components/ui/calendar\";\nimport { Popover, PopoverContent, PopoverTrigger } from \"@/components/ui/popover\";\nimport { Video, Phone, MessageSquare, MapPin, Home, Calendar as CalendarIcon, Clock } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\n// AutoTranslate import removed for fast loading\n\nexport default function Booking() {\n  const [, setLocation] = useLocation();\n  const [selectedDate, setSelectedDate] = useState<Date>();\n  const [formData, setFormData] = useState<{\n    fullName: string;\n    email: string;\n    countryCode: string;\n    phoneNumber: string;\n    dateOfBirth: string;\n    timeOfBirth: string;\n    ampm: string;\n    placeOfBirth: string;\n    consultationType: string;\n    consultationMode: string;\n    topic: string;\n    selectedTopics: string[];\n    plan: string;\n    duration: number;\n    price: number;\n    scheduledDate: string;\n    scheduledTime: string;\n    notes: string;\n    language: string;\n    paymentMethod: string;\n    agreedToTerms: boolean;\n  }>({\n    fullName: \"\",\n    email: \"\",\n    countryCode: \"+91\",\n    phoneNumber: \"\",\n    dateOfBirth: \"\",\n    timeOfBirth: \"\",\n    ampm: \"AM\",\n    placeOfBirth: \"\",\n    consultationType: \"\",\n    consultationMode: \"online\", // online, offline\n    topic: \"\",\n    selectedTopics: [], // For multi-topic consultations\n    plan: \"\",\n    duration: 30,\n    price: 0,\n    scheduledDate: \"\",\n    scheduledTime: \"\",\n    notes: \"\",\n    language: \"en\",\n    paymentMethod: \"\",\n    agreedToTerms: false,\n  });\n  const { toast } = useToast();\n\n  const consultationTopics = [\n    { value: \"birth_chart\", label: \"Birth Chart Analysis\", description: \"Complete birth chart reading with planetary positions and their effects\", icon: \"🌟\" },\n    { value: \"career\", label: \"Career & Job\", description: \"Career guidance, job changes, and professional growth\", icon: \"💼\" },\n    { value: \"business\", label: \"Business & Income\", description: \"Business prospects, income opportunities, and financial growth\", icon: \"💰\" },\n    { value: \"partnerships\", label: \"Partnership\", description: \"Business partnerships and collaborations\", icon: \"🤝\" },\n    { value: \"education\", label: \"Education\", description: \"Academic guidance and educational decisions\", icon: \"📚\" },\n    { value: \"marriage\", label: \"Marriage\", description: \"Marriage timing and marital life analysis\", icon: \"💒\" },\n    { value: \"marital_discord\", label: \"Marital Discord\", description: \"Relationship problems and marriage issues\", icon: \"💔\" },\n    { value: \"breakup\", label: \"Break Up\", description: \"Relationship breakups and moving forward\", icon: \"💔\" },\n    { value: \"dreams\", label: \"Dreams\", description: \"Dream interpretation and subconscious guidance\", icon: \"💭\" },\n    { value: \"success\", label: \"Success\", description: \"Path to success and achievement guidance\", icon: \"🏆\" },\n    { value: \"divorce\", label: \"Divorce\", description: \"Divorce proceedings and life after separation\", icon: \"⚖️\" },\n    { value: \"love_affairs\", label: \"Love Affairs\", description: \"Romantic relationships and love life guidance\", icon: \"💕\" },\n    { value: \"litigation\", label: \"Litigation\", description: \"Legal matters and court cases\", icon: \"⚖️\" },\n    { value: \"offspring\", label: \"Offspring\", description: \"Children, pregnancy, and family planning\", icon: \"👶\" },\n    { value: \"siblings\", label: \"Brother/Sister\", description: \"Sibling relationships and family dynamics\", icon: \"👫\" },\n    { value: \"property\", label: \"House/Land\", description: \"Property matters, real estate, and land dealings\", icon: \"🏠\" },\n    { value: \"vehicle\", label: \"Vehicle\", description: \"Vehicle purchase and transportation matters\", icon: \"🚗\" },\n    { value: \"parents\", label: \"Father/Mother\", description: \"Parental relationships and family guidance\", icon: \"👥\" },\n    { value: \"relatives\", label: \"Relatives\", description: \"Extended family and relative relationships\", icon: \"👨‍👩‍👧‍👦\" },\n    { value: \"bank_balance\", label: \"Bank Balance\", description: \"Financial status and wealth accumulation\", icon: \"🏦\" },\n    { value: \"friends\", label: \"Friends\", description: \"Friendship and social relationships\", icon: \"👫\" },\n    { value: \"enemies\", label: \"Enemies\", description: \"Dealing with adversaries and conflicts\", icon: \"⚡\" },\n    { value: \"health\", label: \"Diseases/Health\", description: \"Health predictions and wellness guidance\", icon: \"🌿\" },\n    { value: \"fortune\", label: \"Fortune\", description: \"Overall luck and destiny analysis\", icon: \"🍀\" },\n    { value: \"accident\", label: \"Accident\", description: \"Accident prevention and safety guidance\", icon: \"⚠️\" },\n    { value: \"small_tour\", label: \"Small Tour\", description: \"Local travel and short trips\", icon: \"🚗\" },\n    { value: \"foreign_travel\", label: \"Foreign Travel\", description: \"International travel and settlement abroad\", icon: \"✈️\" },\n    { value: \"share_market\", label: \"Share Market\", description: \"Stock market investments and trading\", icon: \"📈\" },\n    { value: \"sudden_gain\", label: \"Sudden Gain\", description: \"Unexpected profits and windfalls\", icon: \"💎\" },\n    { value: \"lottery\", label: \"Lottery\", description: \"Gambling luck and lottery predictions\", icon: \"🎰\" },\n  ];\n\n  const consultationTypes = [\n    {\n      type: \"video\",\n      icon: Video,\n      title: \"Video Call\",\n      description: \"Face-to-face consultation via secure video call\",\n      plans: [\n        { name: \"Quick Guidance\", duration: 15, price: 299 },\n        { name: \"Focused Analysis\", duration: 30, price: 499 },\n        { name: \"In-Depth Analysis\", duration: 45, price: 749 },\n        { name: \"Comprehensive Analysis\", duration: 60, price: 999 },\n      ],\n    },\n    {\n      type: \"audio\",\n      icon: Phone,\n      title: \"Audio Call\",\n      description: \"Voice-only consultation for focused guidance\",\n      plans: [\n        { name: \"Quick Guidance\", duration: 15, price: 299 },\n        { name: \"Focused Analysis\", duration: 30, price: 499 },\n        { name: \"In-Depth Analysis\", duration: 45, price: 749 },\n        { name: \"Comprehensive Analysis\", duration: 60, price: 999 },\n      ],\n    },\n    {\n      type: \"chat\",\n      icon: MessageSquare,\n      title: \"Chat Session\",\n      description: \"Text-based consultation through secure messaging\",\n      plans: [\n        { name: \"Quick Guidance\", duration: 15, price: 299 },\n        { name: \"Focused Analysis\", duration: 30, price: 499 },\n        { name: \"In-Depth Analysis\", duration: 45, price: 749 },\n        { name: \"Comprehensive Analysis\", duration: 60, price: 999 },\n      ],\n    },\n    {\n      type: \"in-person\",\n      icon: MapPin,\n      title: \"In-Person\",\n      description: \"Traditional face-to-face consultation in Kolkata\",\n      plans: [\n        { name: \"Focused Analysis\", duration: 30, price: 499 },\n        { name: \"In-Depth Analysis\", duration: 45, price: 749 },\n        { name: \"Comprehensive Analysis\", duration: 60, price: 999 },\n      ],\n      note: \"Available only on Wednesdays (3pm-6pm) in Kolkata\",\n    },\n    {\n      type: \"home-service\",\n      icon: Home,\n      title: \"Home Service\",\n      description: \"Premium consultation at your home with personalized rituals\",\n      plans: [\n        { name: \"Sacred Home Consultation\", duration: 90, price: 2499 },\n        { name: \"Complete Home Analysis\", duration: 120, price: 3999 },\n        { name: \"Home Blessing Ceremony\", duration: 180, price: 6999 },\n      ],\n      note: \"Available within 25km of Kolkata. Includes travel, consultation, and sacred items. 48hrs advance booking required.\",\n    },\n    {\n      type: \"topic-based\",\n      icon: Clock,\n      title: \"Topic-Based Consultation\",\n      description: \"Select specific topics for focused guidance (6 minutes per topic)\",\n      plans: [\n        { name: \"Per Topic\", duration: 6, price: 100, isPerTopic: true as const },\n      ],\n      note: \"Available online only. Select multiple topics as needed.\",\n    },\n  ];\n\n  const countryCodes = [\n    { value: \"+91\", label: \"🇮🇳 +91 (India)\" },\n    { value: \"+1\", label: \"🇺🇸 +1 (USA)\" },\n    { value: \"+44\", label: \"🇬🇧 +44 (UK)\" },\n    { value: \"+61\", label: \"🇦🇺 +61 (Australia)\" },\n    { value: \"+971\", label: \"🇦🇪 +971 (UAE)\" },\n  ];\n\n  // Available time slots based on astrologer's schedule\n  // Monday to Sunday: 10am-11:15am, 12pm-1:30pm, 3pm-5pm, 7pm-9pm\n  // Wednesday: No appointments between 3pm-5pm (reserved for offline consultations)\n  const getAvailableTimeSlots = (selectedDate: Date | undefined) => {\n    if (!selectedDate) return [];\n    \n    const dayOfWeek = selectedDate.getDay(); // 0 = Sunday, 3 = Wednesday\n    const baseSlots = [\n      \"10:00\", \"10:15\", \"10:30\", \"10:45\", \"11:00\", \"11:15\",\n      \"12:00\", \"12:15\", \"12:30\", \"12:45\", \"13:00\", \"13:15\",\n      \"19:00\", \"19:15\", \"19:30\", \"19:45\", \"20:00\", \"20:15\", \"20:30\", \"20:45\"\n    ];\n    \n    // Add afternoon slots for non-Wednesday or offline consultations on Wednesday\n    const afternoonSlots = [\"15:00\", \"15:15\", \"15:30\", \"15:45\", \"16:00\", \"16:15\", \"16:30\", \"16:45\"];\n    \n    if (dayOfWeek === 3) { // Wednesday\n      // For offline consultations, only 3pm-6pm slots available\n      if (formData.consultationType === \"in-person\") {\n        return [\"15:00\", \"15:30\", \"16:00\", \"16:30\", \"17:00\", \"17:30\"];\n      }\n      // For online consultations, exclude 3pm-5pm slots\n      return baseSlots;\n    } else {\n      // All other days include afternoon slots\n      return [...baseSlots, ...afternoonSlots].sort();\n    }\n  };\n  \n  const timeSlots = getAvailableTimeSlots(selectedDate);\n\n  const createConsultationMutation = useMutation({\n    mutationFn: async (consultationData: any) => {\n      return apiRequest(\"POST\", \"/api/consultations\", consultationData);\n    },\n    onSuccess: async (response) => {\n      const data = await response.json();\n      toast({\n        title: \"Booking Confirmed!\",\n        description: \"Your consultation has been scheduled successfully.\",\n      });\n      \n      // Create payment intent for the consultation\n      if (formData.paymentMethod) {\n        createPaymentIntent.mutate({\n          amount: formData.price,\n          currency: \"inr\",\n          metadata: {\n            consultationId: data.id,\n            type: \"consultation\",\n          },\n        });\n      }\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Booking Failed\",\n        description: error.message || \"Failed to book consultation\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const createPaymentIntent = useMutation({\n    mutationFn: async (paymentData: any) => {\n      return apiRequest(\"POST\", \"/api/create-payment-intent\", paymentData);\n    },\n    onSuccess: async (response) => {\n      const data = await response.json();\n      toast({\n        title: \"Payment Required\",\n        description: \"Please complete payment to confirm your booking.\",\n      });\n      // Here you would redirect to payment gateway\n      console.log(\"Payment client secret:\", data.clientSecret);\n    },\n  });\n\n  const handleConsultationTypeChange = (type: string) => {\n    const selectedType = consultationTypes.find(t => t.type === type);\n    setFormData({\n      ...formData,\n      consultationType: type,\n      consultationMode: type === \"in-person\" ? \"offline\" : \"online\",\n      plan: \"\",\n      duration: 0,\n      price: 0,\n      selectedTopics: [], // Reset topics when changing consultation type\n      topic: \"\", // Reset single topic\n    });\n  };\n\n  const handlePlanChange = (planName: string) => {\n    const selectedType = consultationTypes.find(t => t.type === formData.consultationType);\n    const selectedPlan = selectedType?.plans.find(p => p.name === planName);\n    \n    if (selectedPlan) {\n      if ('isPerTopic' in selectedPlan && selectedPlan.isPerTopic && formData.selectedTopics.length > 0) {\n        // Calculate total for topic-based consultation\n        const totalDuration = formData.selectedTopics.length * selectedPlan.duration;\n        const totalPrice = formData.selectedTopics.length * selectedPlan.price;\n        setFormData({\n          ...formData,\n          plan: planName,\n          duration: totalDuration,\n          price: totalPrice,\n        });\n      } else {\n        setFormData({\n          ...formData,\n          plan: planName,\n          duration: selectedPlan.duration,\n          price: selectedPlan.price,\n        });\n      }\n    }\n  };\n  \n  const handleTopicToggle = (topicValue: string) => {\n    if (formData.consultationType === \"topic-based\") {\n      const isSelected = formData.selectedTopics.includes(topicValue);\n      const newSelectedTopics = isSelected \n        ? formData.selectedTopics.filter(t => t !== topicValue)\n        : [...formData.selectedTopics, topicValue];\n      \n      // Recalculate pricing for topic-based consultations\n      const selectedPlan = consultationTypes.find(t => t.type === \"topic-based\")?.plans[0];\n      const totalDuration = newSelectedTopics.length * (selectedPlan?.duration || 6);\n      const totalPrice = newSelectedTopics.length * (selectedPlan?.price || 100);\n      \n      setFormData({\n        ...formData,\n        selectedTopics: newSelectedTopics,\n        duration: totalDuration,\n        price: totalPrice,\n        plan: newSelectedTopics.length > 0 ? \"Per Topic\" : \"\",\n      });\n    } else {\n      // Single topic selection for regular consultations\n      setFormData({\n        ...formData,\n        topic: topicValue,\n      });\n    }\n  };\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!localStorage.getItem(\"token\")) {\n      toast({\n        title: \"Login Required\",\n        description: \"Please login to book a consultation\",\n        variant: \"destructive\",\n      });\n      setLocation(\"/login\");\n      return;\n    }\n\n    if (!formData.agreedToTerms) {\n      toast({\n        title: \"Terms Required\",\n        description: \"Please agree to the terms and conditions\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    // Validation for different consultation types\n    if (!formData.consultationType || !formData.plan) {\n      toast({\n        title: \"Selection Required\",\n        description: \"Please select consultation type and plan\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    \n    if (formData.consultationType === \"topic-based\") {\n      if (formData.selectedTopics.length === 0) {\n        toast({\n          title: \"Topic Selection Required\",\n          description: \"Please select at least one topic for consultation\",\n          variant: \"destructive\",\n        });\n        return;\n      }\n    } else {\n      if (!formData.topic) {\n        toast({\n          title: \"Topic Required\",\n          description: \"Please select a consultation topic\",\n          variant: \"destructive\",\n        });\n        return;\n      }\n    }\n\n    const scheduledAt = new Date(`${formData.scheduledDate}T${formData.scheduledTime}:00`);\n    \n    createConsultationMutation.mutate({\n      type: formData.consultationType,\n      consultationMode: formData.consultationMode,\n      topics: formData.consultationType === \"topic-based\" \n        ? formData.selectedTopics \n        : [formData.topic], // Single topic as array for consistency\n      plan: formData.plan,\n      duration: formData.duration,\n      price: formData.price.toString(),\n      scheduledAt,\n      notes: formData.notes,\n      language: formData.language,\n      location: formData.consultationType === \"in-person\" ? \"Kolkata Chamber\" : null,\n    });\n  };\n\n  return (\n    <div className=\"min-h-screen pt-16 pb-16\" data-testid=\"booking-page\">\n      <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        <GlassCard className=\"p-8 md:p-12\">\n          <div className=\"text-center mb-12\">\n            <h1 className=\"text-4xl font-bold mb-6 neon-text text-primary\" data-testid=\"booking-title\">\n              \"Book Your Consultation\"\n            </h1>\n            <p className=\"text-xl text-muted-foreground\">\n              \"Choose your preferred consultation type and schedule your session with Astrologer Arup Shastri\"\n            </p>\n          </div>\n\n          <form onSubmit={handleSubmit} className=\"space-y-8\">\n            {/* Personal Information */}\n            <div className=\"space-y-6\">\n              <h3 className=\"text-xl font-semibold text-foreground\">\"Personal Information\"</h3>\n              \n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                <div>\n                  <label className=\"block text-sm font-medium text-foreground mb-2\">\n                    \"Full Name\" *\n                  </label>\n                  <Input\n                    value={formData.fullName}\n                    onChange={(e) => setFormData({ ...formData, fullName: e.target.value })}\n                    placeholder=\"Enter your full name\"\n                    className=\"form-input\"\n                    required\n                    data-testid=\"full-name-input\"\n                  />\n                </div>\n                <div>\n                  <label className=\"block text-sm font-medium text-foreground mb-2\">\n                    \"Email Address\"\n                  </label>\n                  <Input\n                    type=\"email\"\n                    value={formData.email}\n                    onChange={(e) => setFormData({ ...formData, email: e.target.value })}\n                    placeholder=\"your.email@example.com\"\n                    className=\"form-input\"\n                    data-testid=\"email-input\"\n                  />\n                </div>\n              </div>\n\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n                <div>\n                  <label className=\"block text-sm font-medium text-foreground mb-2\">\n                    \"Country Code\" *\n                  </label>\n                  <Select\n                    value={formData.countryCode}\n                    onValueChange={(value) => setFormData({ ...formData, countryCode: value })}\n                  >\n                    <SelectTrigger className=\"form-input\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent className=\"glass-card\">\n                      {countryCodes.map((code) => (\n                        <SelectItem key={code.value} value={code.value}>\n                          {code.label}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n                <div className=\"md:col-span-2\">\n                  <label className=\"block text-sm font-medium text-foreground mb-2\">\n                    \"Phone Number\" *\n                  </label>\n                  <Input\n                    type=\"tel\"\n                    value={formData.phoneNumber}\n                    onChange={(e) => setFormData({ ...formData, phoneNumber: e.target.value })}\n                    placeholder=\"Enter your phone number\"\n                    className=\"form-input\"\n                    required\n                    data-testid=\"phone-input\"\n                  />\n                </div>\n              </div>\n\n              {/* Birth Details */}\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n                <div>\n                  <label className=\"block text-sm font-medium text-foreground mb-2\">\n                    Date of Birth\n                  </label>\n                  <div className=\"relative\">\n                    <Input\n                      type=\"date\"\n                      value={formData.dateOfBirth}\n                      onChange={(e) => setFormData({ ...formData, dateOfBirth: e.target.value })}\n                      className=\"form-input pr-10\"\n                      data-testid=\"birth-date-input\"\n                    />\n                    <CalendarIcon className=\"absolute right-3 top-1/2 transform -translate-y-1/2 w-5 h-5 text-primary pointer-events-none\" />\n                  </div>\n                </div>\n                <div>\n                  <label className=\"block text-sm font-medium text-foreground mb-2\">\n                    Time of Birth\n                  </label>\n                  <div className=\"relative\">\n                    <Input\n                      type=\"time\"\n                      value={formData.timeOfBirth}\n                      onChange={(e) => setFormData({ ...formData, timeOfBirth: e.target.value })}\n                      className=\"form-input pr-10\"\n                      data-testid=\"birth-time-input\"\n                    />\n                    <Clock className=\"absolute right-3 top-1/2 transform -translate-y-1/2 w-5 h-5 text-primary pointer-events-none\" />\n                  </div>\n                </div>\n                <div>\n                  <label className=\"block text-sm font-medium text-foreground mb-2\">\n                    AM/PM\n                  </label>\n                  <Select\n                    value={formData.ampm}\n                    onValueChange={(value) => setFormData({ ...formData, ampm: value })}\n                  >\n                    <SelectTrigger className=\"form-input\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent className=\"glass-card\">\n                      <SelectItem value=\"AM\">AM</SelectItem>\n                      <SelectItem value=\"PM\">PM</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n              </div>\n\n              <div>\n                <label className=\"block text-sm font-medium text-foreground mb-2\">\n                  Place of Birth\n                </label>\n                <Input\n                  value={formData.placeOfBirth}\n                  onChange={(e) => setFormData({ ...formData, placeOfBirth: e.target.value })}\n                  placeholder=\"City, State/Province, Country\"\n                  className=\"form-input\"\n                  data-testid=\"birth-place-input\"\n                />\n              </div>\n            </div>\n\n            {/* Consultation Type Selection */}\n            <div className=\"space-y-6\">\n              <h3 className=\"text-xl font-semibold text-foreground\">Consultation Type</h3>\n              \n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n                {consultationTypes.map((consultation) => (\n                  <div\n                    key={consultation.type}\n                    className={`glass-card p-6 cursor-pointer transition-all ${\n                      formData.consultationType === consultation.type\n                        ? \"neon-border bg-primary/10\"\n                        : \"hover:bg-primary/5\"\n                    }`}\n                    onClick={() => handleConsultationTypeChange(consultation.type)}\n                    data-testid={`consultation-${consultation.type}`}\n                  >\n                    <consultation.icon className={`w-8 h-8 mx-auto mb-4 ${\n                      formData.consultationType === consultation.type ? \"text-primary neon-text\" : \"text-primary\"\n                    }`} />\n                    <h4 className=\"font-semibold text-center mb-2 text-primary\">{consultation.title}</h4>\n                    <p className=\"text-xs text-muted-foreground text-center\">{consultation.description}</p>\n                    {consultation.note && (\n                      <p className=\"text-xs text-yellow-500 text-center mt-2\">{consultation.note}</p>\n                    )}\n                  </div>\n                ))}\n              </div>\n\n              {/* Topic Selection */}\n              {formData.consultationType && formData.consultationType !== \"topic-based\" && (\n                <div className=\"space-y-4\">\n                  <h4 className=\"text-lg font-semibold text-foreground\">\"Choose Consultation Topic\"</h4>\n                  <p className=\"text-sm text-muted-foreground\">\"Select the main subject you'd like to discuss during your consultation\"</p>\n                  \n                  <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n                    {consultationTopics.map((topic) => (\n                      <div\n                        key={topic.value}\n                        className={`glass-card p-4 cursor-pointer transition-all ${\n                          formData.topic === topic.value\n                            ? \"neon-border bg-primary/10\"\n                            : \"hover:bg-primary/5\"\n                        }`}\n                        onClick={() => handleTopicToggle(topic.value)}\n                        data-testid={`topic-${topic.value}`}\n                      >\n                        <div className=\"text-2xl text-center mb-2\">{topic.icon}</div>\n                        <h5 className=\"font-semibold text-center mb-2 text-sm\">{topic.label}</h5>\n                        <p className=\"text-xs text-muted-foreground text-center\">{topic.description}</p>\n                      </div>\n                    ))}\n                  </div>\n                </div>\n              )}\n              \n              {/* Multi-Topic Selection for Topic-Based Consultations */}\n              {formData.consultationType === \"topic-based\" && (\n                <div className=\"space-y-4\">\n                  <h4 className=\"text-lg font-semibold text-foreground\">\"Select Topics for Consultation\"</h4>\n                  <p className=\"text-sm text-muted-foreground\">\n                    \"Choose multiple topics for your consultation (6 minutes per topic, ₹100 each)\"\n                  </p>\n                  <div className=\"glass-card p-4 mb-4\">\n                    <div className=\"flex items-center justify-between text-sm\">\n                      <span>\"Selected Topics\": {formData.selectedTopics.length}</span>\n                      <span>\"Total Duration\": {formData.selectedTopics.length * 6} \"minutes\"</span>\n                      <span className=\"font-bold text-primary\">\"Total Price\": ₹{formData.selectedTopics.length * 100}</span>\n                    </div>\n                  </div>\n                  \n                  <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n                    {consultationTopics.map((topic) => {\n                      const isSelected = formData.selectedTopics.includes(topic.value);\n                      return (\n                        <div\n                          key={topic.value}\n                          className={`glass-card p-4 cursor-pointer transition-all relative ${\n                            isSelected\n                              ? \"neon-border bg-primary/10\"\n                              : \"hover:bg-primary/5\"\n                          }`}\n                          onClick={() => handleTopicToggle(topic.value)}\n                          data-testid={`multi-topic-${topic.value}`}\n                        >\n                          {isSelected && (\n                            <div className=\"absolute top-2 right-2 w-6 h-6 bg-primary rounded-full flex items-center justify-center\">\n                              <span className=\"text-primary-foreground text-xs\">✓</span>\n                            </div>\n                          )}\n                          <div className=\"text-2xl text-center mb-2\">{topic.icon}</div>\n                          <h5 className=\"font-semibold text-center mb-2 text-sm\">{topic.label}</h5>\n                          <p className=\"text-xs text-muted-foreground text-center\">{topic.description}</p>\n                          <div className=\"text-xs text-center mt-2 text-primary\">6 min - ₹100</div>\n                        </div>\n                      );\n                    })}\n                  </div>\n                </div>\n              )}\n\n              {/* Plan Selection */}\n              {formData.consultationType && (\n                (formData.consultationType === \"topic-based\" && formData.selectedTopics.length > 0) ||\n                (formData.consultationType !== \"topic-based\" && formData.topic)\n              ) && (\n                <div className=\"space-y-4\">\n                  <h4 className=\"text-lg font-semibold text-foreground\">\"Select Plan\"</h4>\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n                    {consultationTypes\n                      .find(t => t.type === formData.consultationType)\n                      ?.plans.map((plan) => (\n                        <div\n                          key={plan.name}\n                          className={`glass-card p-4 cursor-pointer transition-all ${\n                            formData.plan === plan.name\n                              ? \"neon-border bg-primary/10\"\n                              : \"hover:bg-primary/5\"\n                          }`}\n                          onClick={() => handlePlanChange(plan.name)}\n                          data-testid={`plan-${plan.name.replace(/\\s+/g, \"-\").toLowerCase()}`}\n                        >\n                          <h5 className=\"font-semibold text-center mb-2\">{plan.name}</h5>\n                          <div className=\"text-center\">\n                            <div className=\"text-xl font-bold neon-text text-primary\">₹{plan.price}</div>\n                            <div className=\"text-sm text-muted-foreground\">{plan.duration} minutes</div>\n                          </div>\n                        </div>\n                      ))}\n                  </div>\n                </div>\n              )}\n            </div>\n\n            {/* Date & Time Selection */}\n            {formData.plan && (\n              <div className=\"space-y-6\">\n                <h3 className=\"text-xl font-semibold text-foreground\">\"Schedule\"</h3>\n                \n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                  <div>\n                    <label className=\"block text-sm font-medium text-foreground mb-2\">\n                      \"Preferred Date\" *\n                    </label>\n                    <Popover>\n                      <PopoverTrigger asChild>\n                        <Button\n                          variant=\"outline\"\n                          className=\"form-input justify-start text-left font-normal\"\n                          data-testid=\"date-picker\"\n                        >\n                          <CalendarIcon className=\"mr-2 h-4 w-4\" />\n                          {selectedDate ? selectedDate.toDateString() : \"Select date\"}\n                        </Button>\n                      </PopoverTrigger>\n                      <PopoverContent className=\"glass-card w-auto p-0\">\n                        <Calendar\n                          mode=\"single\"\n                          selected={selectedDate}\n                          onSelect={(date) => {\n                            setSelectedDate(date);\n                            setFormData({ ...formData, scheduledDate: date?.toISOString().split('T')[0] || \"\" });\n                          }}\n                          disabled={(date) => date < new Date()}\n                          initialFocus\n                        />\n                      </PopoverContent>\n                    </Popover>\n                  </div>\n                  \n                  <div>\n                    <label className=\"block text-sm font-medium text-foreground mb-2\">\n                      \"Preferred Time\" *\n                    </label>\n                    <Select\n                      value={formData.scheduledTime}\n                      onValueChange={(value) => setFormData({ ...formData, scheduledTime: value })}\n                    >\n                      <SelectTrigger className=\"form-input\">\n                        <SelectValue placeholder=\"Select time\" />\n                      </SelectTrigger>\n                      <SelectContent className=\"glass-card\">\n                        {timeSlots.map((time) => (\n                          <SelectItem key={time} value={time}>\n                            {time}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                  </div>\n                </div>\n\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                  <div>\n                    <label className=\"block text-sm font-medium text-foreground mb-2\">\n                      \"Consultation Language\"\n                    </label>\n                    <Select\n                      value={formData.language}\n                      onValueChange={(value) => setFormData({ ...formData, language: value })}\n                    >\n                      <SelectTrigger className=\"form-input\">\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent className=\"glass-card\">\n                        <SelectItem value=\"en\">\"English\"</SelectItem>\n                        <SelectItem value=\"hi\">\"Hindi\"</SelectItem>\n                        <SelectItem value=\"bn\">\"Bengali\"</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                  \n                  <div>\n                    <label className=\"block text-sm font-medium text-foreground mb-2\">\n                      \"Payment Method\" *\n                    </label>\n                    <Select\n                      value={formData.paymentMethod}\n                      onValueChange={(value) => setFormData({ ...formData, paymentMethod: value })}\n                    >\n                      <SelectTrigger className=\"form-input\">\n                        <SelectValue placeholder={\"Select payment method\"} />\n                      </SelectTrigger>\n                      <SelectContent className=\"glass-card\">\n                        <SelectItem value=\"razorpay\">\"Razorpay (India)\"</SelectItem>\n                        <SelectItem value=\"cashfree\">\"Cashfree (India)\"</SelectItem>\n                        <SelectItem value=\"stripe\">\"Stripe (International)\"</SelectItem>\n                        <SelectItem value=\"paypal\">\"PayPal (International)\"</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                </div>\n\n                <div>\n                  <label className=\"block text-sm font-medium text-foreground mb-2\">\n                    \"Special Requirements or Questions\"\n                  </label>\n                  <Textarea\n                    value={formData.notes}\n                    onChange={(e) => setFormData({ ...formData, notes: e.target.value })}\n                    placeholder={\"Any specific areas you'd like to focus on during the consultation...\"}\n                    className=\"form-input min-h-[100px]\"\n                    data-testid=\"notes-input\"\n                  />\n                </div>\n              </div>\n            )}\n\n            {/* Terms & Conditions */}\n            {formData.plan && (\n              <div className=\"space-y-6\">\n                <div className=\"glass p-6 rounded-lg\">\n                  <div className=\"flex items-start space-x-3\">\n                    <Checkbox\n                      checked={formData.agreedToTerms}\n                      onCheckedChange={(checked) => setFormData({ ...formData, agreedToTerms: !!checked })}\n                      data-testid=\"terms-checkbox\"\n                    />\n                    <div className=\"text-sm text-muted-foreground\">\n                      \"I agree to the\"{\" \"}\n                      <a href=\"#\" className=\"text-primary hover:underline\">\"Terms of Service\"</a>,{\" \"}\n                      <a href=\"#\" className=\"text-primary hover:underline\">\"Privacy Policy\"</a>, \"and understand that consultations are non-refundable. Rescheduling is allowed with 24-hour notice.\"\n                    </div>\n                  </div>\n                </div>\n\n                {/* Booking Summary */}\n                {formData.price > 0 && (\n                  <GlassCard className=\"p-6\" variant=\"primary\">\n                    <h4 className=\"text-lg font-semibold text-foreground mb-4\">\"Booking Summary\"</h4>\n                    <div className=\"space-y-2 text-sm\">\n                      <div className=\"flex justify-between\">\n                        <span>\"Consultation Type\":</span>\n                        <span className=\"font-semibold\">{formData.consultationType}</span>\n                      </div>\n                      <div className=\"flex justify-between\">\n                        <span>\"Plan\":</span>\n                        <span className=\"font-semibold\">{formData.plan}</span>\n                      </div>\n                      <div className=\"flex justify-between\">\n                        <span>\"Duration\":</span>\n                        <span className=\"font-semibold\">{formData.duration} minutes</span>\n                      </div>\n                      <div className=\"flex justify-between\">\n                        <span>\"Date & Time\":</span>\n                        <span className=\"font-semibold\">\n                          {formData.scheduledDate && formData.scheduledTime \n                            ? `${new Date(formData.scheduledDate).toDateString()} at ${formData.scheduledTime}`\n                            : \"Not selected\"}\n                        </span>\n                      </div>\n                      <hr className=\"border-primary/20\" />\n                      <div className=\"flex justify-between text-lg font-bold\">\n                        <span>Total Amount:</span>\n                        <span className=\"text-primary\">₹{formData.price}</span>\n                      </div>\n                    </div>\n                  </GlassCard>\n                )}\n\n                <div className=\"text-center pt-6 space-y-4\">\n                  <NeonButton\n                    type=\"submit\"\n                    size=\"lg\"\n                    className=\"px-12 py-4\"\n                    disabled={createConsultationMutation.isPending}\n                    data-testid=\"submit-booking-button\"\n                  >\n                    {createConsultationMutation.isPending ? \"Processing...\" : \"Proceed to Payment\"}\n                  </NeonButton>\n                  \n                  <div className=\"text-sm text-muted-foreground\">\n                    \"or\"{\" \"}\n                    <button\n                      type=\"button\"\n                      onClick={() => setLocation('/consultation-session?session=demo123')}\n                      className=\"text-primary hover:underline\"\n                      data-testid=\"demo-session-link\"\n                    >\n                      \"View Demo Consultation Session\"\n                    </button>\n                  </div>\n                </div>\n              </div>\n            )}\n          </form>\n        </GlassCard>\n      </div>\n    </div>\n  );\n}\n","size_bytes":39334},"client/src/pages/consultation.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useRoute, useLocation } from \"wouter\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { GlassCard } from \"@/components/ui/glass-card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Video, MessageSquare, Phone, Clock, User, Calendar, FileText, Settings } from \"lucide-react\";\nimport VideoCall from \"@/components/consultation/video-call\";\nimport Chat from \"@/components/consultation/chat\";\nimport { useToast } from \"@/hooks/use-toast\";\n\n\nexport default function Consultation() {\n  const [match, params] = useRoute(\"/consultation/:id\");\n  const [, setLocation] = useLocation();\n  const [activeTab, setActiveTab] = useState(\"details\");\n  const [consultationStarted, setConsultationStarted] = useState(false);\n  const [timeRemaining, setTimeRemaining] = useState(0);\n  const { toast } = useToast();\n\n  const consultationId = params?.id;\n\n  const { data: consultation, isLoading, error } = useQuery({\n    queryKey: [\"/api/consultations\", consultationId],\n    enabled: !!consultationId,\n  });\n\n  const { data: messages } = useQuery({\n    queryKey: [\"/api/consultations\", consultationId, \"messages\"],\n    enabled: !!consultationId && consultationStarted,\n    refetchInterval: consultationStarted ? 1000 : false,\n  });\n\n  const { data: user } = useQuery({\n    queryKey: [\"/api/profile\"],\n    enabled: !!localStorage.getItem(\"token\"),\n  });\n\n  useEffect(() => {\n    if (!localStorage.getItem(\"token\")) {\n      toast({\n        title: \"Authentication Required\",\n        description: \"Please login to access this consultation\",\n        variant: \"destructive\",\n      });\n      setLocation(\"/login\");\n      return;\n    }\n  }, [setLocation, toast]);\n\n  useEffect(() => {\n    if (consultation && consultationStarted) {\n      const startTime = new Date().getTime();\n      const duration = consultation.duration * 60 * 1000; // Convert to milliseconds\n      \n      const timer = setInterval(() => {\n        const now = new Date().getTime();\n        const elapsed = now - startTime;\n        const remaining = Math.max(0, duration - elapsed);\n        \n        setTimeRemaining(remaining);\n        \n        if (remaining <= 5 * 60 * 1000 && remaining > 4 * 60 * 1000) {\n          // Alert 5 minutes before end\n          toast({\n            title: \"5 Minutes Remaining\",\n            description: \"Your consultation will end in 5 minutes\",\n          });\n        }\n        \n        if (remaining <= 0) {\n          clearInterval(timer);\n          handleConsultationEnd();\n        }\n      }, 1000);\n\n      return () => clearInterval(timer);\n    }\n  }, [consultation, consultationStarted, toast]);\n\n  const handleConsultationEnd = () => {\n    setConsultationStarted(false);\n    toast({\n      title: \"Consultation Ended\",\n      description: \"Thank you for your consultation. You will receive a summary soon.\",\n    });\n  };\n\n  const formatTime = (milliseconds: number) => {\n    const minutes = Math.floor(milliseconds / 60000);\n    const seconds = Math.floor((milliseconds % 60000) / 1000);\n    return `${minutes}:${seconds.toString().padStart(2, '0')}`;\n  };\n\n  const getStatusBadge = (status: string) => {\n    const statusConfig = {\n      scheduled: { variant: \"default\" as const, label: \"Scheduled\" },\n      ongoing: { variant: \"secondary\" as const, label: \"In Progress\" },\n      completed: { variant: \"outline\" as const, label: \"Completed\" },\n      cancelled: { variant: \"destructive\" as const, label: \"Cancelled\" },\n    };\n    \n    const config = statusConfig[status as keyof typeof statusConfig] || statusConfig.scheduled;\n    return <Badge variant={config.variant}>{config.label}</Badge>;\n  };\n\n  const getTypeIcon = (type: string) => {\n    switch (type) {\n      case \"video\":\n        return <Video className=\"w-5 h-5\" />;\n      case \"audio\":\n        return <Phone className=\"w-5 h-5\" />;\n      case \"chat\":\n        return <MessageSquare className=\"w-5 h-5\" />;\n      default:\n        return <User className=\"w-5 h-5\" />;\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen pt-16 flex items-center justify-center\">\n        <div className=\"animate-spin w-8 h-8 border-4 border-primary border-t-transparent rounded-full\" />\n      </div>\n    );\n  }\n\n  if (error || !consultation) {\n    return (\n      <div className=\"min-h-screen pt-16 flex items-center justify-center\">\n        <GlassCard className=\"p-8 text-center max-w-md\">\n          <h2 className=\"text-2xl font-bold text-foreground mb-4\">Consultation Not Found</h2>\n          <p className=\"text-muted-foreground mb-6\">\n            The consultation you're looking for doesn't exist or you don't have access to it.\n          </p>\n          <Button onClick={() => setLocation(\"/\")} className=\"neon-button\">\n            Go Home\n          </Button>\n        </GlassCard>\n      </div>\n    );\n  }\n\n  const canStartConsultation = () => {\n    const scheduledTime = new Date(consultation.scheduledAt);\n    const now = new Date();\n    const timeDiff = scheduledTime.getTime() - now.getTime();\n    \n    // Allow starting 10 minutes early\n    return timeDiff <= 10 * 60 * 1000 && consultation.status === \"scheduled\";\n  };\n\n  return (\n    <div className=\"min-h-screen pt-16 pb-16\" data-testid=\"consultation-page\">\n      <div className=\"max-w-6xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        {/* Header */}\n        <GlassCard className=\"p-6 mb-8\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-4\">\n              <div className=\"flex items-center space-x-2\">\n                {getTypeIcon(consultation.type)}\n                <h1 className=\"text-2xl font-bold text-foreground capitalize\" data-testid=\"consultation-title\">\n                  {consultation.type} Consultation\n                </h1>\n              </div>\n              {getStatusBadge(consultation.status)}\n            </div>\n            \n            {consultationStarted && timeRemaining > 0 && (\n              <div className=\"flex items-center space-x-2\">\n                <Clock className=\"w-5 h-5 text-primary\" />\n                <span className=\"text-lg font-bold text-primary\">\n                  {formatTime(timeRemaining)}\n                </span>\n              </div>\n            )}\n          </div>\n\n          {/* Quick Info */}\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mt-6\">\n            <div className=\"flex items-center space-x-2\">\n              <Calendar className=\"w-4 h-4 text-muted-foreground\" />\n              <span className=\"text-sm text-muted-foreground\">\n                {new Date(consultation.scheduledAt).toLocaleString()}\n              </span>\n            </div>\n            <div className=\"flex items-center space-x-2\">\n              <Clock className=\"w-4 h-4 text-muted-foreground\" />\n              <span className=\"text-sm text-muted-foreground\">\n                Duration: {consultation.duration} minutes\n              </span>\n            </div>\n            <div className=\"flex items-center space-x-2\">\n              <span className=\"text-sm font-semibold text-primary\">\n                ₹{consultation.price}\n              </span>\n              <Badge variant=\"outline\" className=\"text-xs\">\n                {consultation.plan}\n              </Badge>\n            </div>\n          </div>\n        </GlassCard>\n\n        {/* Main Content */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n          {/* Left Column - Main Content */}\n          <div className=\"lg:col-span-2\">\n            <Tabs value={activeTab} onValueChange={setActiveTab}>\n              <TabsList className=\"glass-card mb-6\">\n                <TabsTrigger value=\"details\" className=\"text-sm\">\n                  <FileText className=\"w-4 h-4 mr-2\" />\n                  Details\n                </TabsTrigger>\n                {(consultationStarted || consultation.type === \"chat\") && (\n                  <TabsTrigger value=\"chat\" className=\"text-sm\">\n                    <MessageSquare className=\"w-4 h-4 mr-2\" />\n                    Chat\n                  </TabsTrigger>\n                )}\n                {consultationStarted && consultation.type === \"video\" && (\n                  <TabsTrigger value=\"video\" className=\"text-sm\">\n                    <Video className=\"w-4 h-4 mr-2\" />\n                    Video\n                  </TabsTrigger>\n                )}\n                <TabsTrigger value=\"settings\" className=\"text-sm\">\n                  <Settings className=\"w-4 h-4 mr-2\" />\n                  Settings\n                </TabsTrigger>\n              </TabsList>\n\n              <TabsContent value=\"details\">\n                <GlassCard className=\"p-6\">\n                  <h3 className=\"text-xl font-semibold text-foreground mb-4\">\"Consultation Details\"</h3>\n                  \n                  <div className=\"space-y-4\">\n                    <div>\n                      <h4 className=\"font-semibold text-foreground mb-2\">\"Type & Plan\"</h4>\n                      <p className=\"text-muted-foreground capitalize\">\n                        {consultation.type} consultation - {consultation.plan}\n                      </p>\n                    </div>\n\n                    <div>\n                      <h4 className=\"font-semibold text-foreground mb-2\">\"Scheduled Time\"</h4>\n                      <p className=\"text-muted-foreground\">\n                        {new Date(consultation.scheduledAt).toLocaleString()}\n                      </p>\n                    </div>\n\n                    {consultation.notes && (\n                      <div>\n                        <h4 className=\"font-semibold text-foreground mb-2\">\"Your Notes\"</h4>\n                        <p className=\"text-muted-foreground\">{consultation.notes}</p>\n                      </div>\n                    )}\n\n                    <div>\n                      <h4 className=\"font-semibold text-foreground mb-2\">\"Language\"</h4>\n                      <p className=\"text-muted-foreground capitalize\">\n                        {consultation.language === \"en\" ? \"English\" : \n                         consultation.language === \"hi\" ? \"Hindi\" : \n                         consultation.language === \"bn\" ? \"Bengali\" : consultation.language}\n                      </p>\n                    </div>\n\n                    <div>\n                      <h4 className=\"font-semibold text-foreground mb-2\">\"Payment Status\"</h4>\n                      <Badge variant={consultation.paymentStatus === \"paid\" ? \"default\" : \"secondary\"}>\n                        {consultation.paymentStatus}\n                      </Badge>\n                    </div>\n                  </div>\n\n                  {canStartConsultation() && !consultationStarted && (\n                    <div className=\"mt-6 p-4 glass rounded-lg\">\n                      <h4 className=\"font-semibold text-foreground mb-2\">\"Ready to Start\"</h4>\n                      <p className=\"text-muted-foreground mb-4\">\n                        \"Your consultation time is approaching. You can start your session now.\"\n                      </p>\n                      <Button\n                        onClick={() => setConsultationStarted(true)}\n                        className=\"neon-button\"\n                        data-testid=\"start-consultation-button\"\n                      >\n                        \"Start Consultation\"\n                      </Button>\n                    </div>\n                  )}\n                </GlassCard>\n              </TabsContent>\n\n              <TabsContent value=\"chat\">\n                <Chat \n                  consultationId={consultationId!}\n                  messages={messages || []}\n                  isActive={consultationStarted || consultation.type === \"chat\"}\n                />\n              </TabsContent>\n\n              <TabsContent value=\"video\">\n                {consultation.type === \"video\" && consultationStarted && (\n                  <VideoCall\n                    consultationId={consultationId!}\n                    isAstrologer={user?.isAdmin || false}\n                    onEndCall={handleConsultationEnd}\n                  />\n                )}\n              </TabsContent>\n\n              <TabsContent value=\"settings\">\n                <GlassCard className=\"p-6\">\n                  <h3 className=\"text-xl font-semibold text-foreground mb-4\">Settings</h3>\n                  \n                  <div className=\"space-y-4\">\n                    <div>\n                      <h4 className=\"font-semibold text-foreground mb-2\">Audio Settings</h4>\n                      <div className=\"space-y-2\">\n                        <Button variant=\"outline\" className=\"glass w-full justify-start\">\n                          Test Microphone\n                        </Button>\n                        <Button variant=\"outline\" className=\"glass w-full justify-start\">\n                          Test Speakers\n                        </Button>\n                      </div>\n                    </div>\n\n                    {consultation.type === \"video\" && (\n                      <div>\n                        <h4 className=\"font-semibold text-foreground mb-2\">Video Settings</h4>\n                        <div className=\"space-y-2\">\n                          <Button variant=\"outline\" className=\"glass w-full justify-start\">\n                            Test Camera\n                          </Button>\n                          <Button variant=\"outline\" className=\"glass w-full justify-start\">\n                            Video Quality: Auto\n                          </Button>\n                        </div>\n                      </div>\n                    )}\n\n                    <div>\n                      <h4 className=\"font-semibold text-foreground mb-2\">Notifications</h4>\n                      <div className=\"space-y-2\">\n                        <label className=\"flex items-center space-x-2\">\n                          <input type=\"checkbox\" className=\"rounded\" defaultChecked />\n                          <span className=\"text-sm text-muted-foreground\">Sound notifications</span>\n                        </label>\n                        <label className=\"flex items-center space-x-2\">\n                          <input type=\"checkbox\" className=\"rounded\" defaultChecked />\n                          <span className=\"text-sm text-muted-foreground\">Chat message alerts</span>\n                        </label>\n                      </div>\n                    </div>\n                  </div>\n                </GlassCard>\n              </TabsContent>\n            </Tabs>\n          </div>\n\n          {/* Right Column - Sidebar */}\n          <div className=\"space-y-6\">\n            {/* Astrologer Info */}\n            <GlassCard className=\"p-6\">\n              <h3 className=\"text-lg font-semibold text-foreground mb-4\">Your Astrologer</h3>\n              <div className=\"flex items-center space-x-4 mb-4\">\n                <div className=\"w-12 h-12 rounded-full bg-primary/20 flex items-center justify-center\">\n                  <User className=\"w-6 h-6 text-primary\" />\n                </div>\n                <div>\n                  <h4 className=\"font-semibold text-foreground\">Arup Shastri</h4>\n                  <p className=\"text-sm text-muted-foreground\">Expert Vedic Astrologer</p>\n                </div>\n              </div>\n              <p className=\"text-sm text-muted-foreground mb-4\">\n                18+ years of experience in Vedic astrology, palmistry, and cosmic guidance.\n              </p>\n              <div className=\"flex items-center space-x-1\">\n                {Array.from({ length: 5 }).map((_, i) => (\n                  <span key={i} className=\"text-yellow-500\">⭐</span>\n                ))}\n                <span className=\"text-sm text-muted-foreground ml-2\">(4.9/5)</span>\n              </div>\n            </GlassCard>\n\n            {/* Quick Actions */}\n            <GlassCard className=\"p-6\">\n              <h3 className=\"text-lg font-semibold text-foreground mb-4\">Quick Actions</h3>\n              <div className=\"space-y-3\">\n                <Button variant=\"outline\" className=\"glass w-full justify-start text-sm\">\n                  <FileText className=\"w-4 h-4 mr-2\" />\n                  Download Report\n                </Button>\n                <Button variant=\"outline\" className=\"glass w-full justify-start text-sm\">\n                  <Calendar className=\"w-4 h-4 mr-2\" />\n                  Reschedule\n                </Button>\n                <Button variant=\"outline\" className=\"glass w-full justify-start text-sm\">\n                  <MessageSquare className=\"w-4 h-4 mr-2\" />\n                  Contact Support\n                </Button>\n              </div>\n            </GlassCard>\n\n            {/* Consultation Guidelines */}\n            <GlassCard className=\"p-6\">\n              <h3 className=\"text-lg font-semibold text-foreground mb-4\">Guidelines</h3>\n              <ul className=\"space-y-2 text-sm text-muted-foreground\">\n                <li>• Ensure stable internet connection</li>\n                <li>• Be in a quiet environment</li>\n                <li>• Have your questions ready</li>\n                <li>• Recording is not permitted</li>\n                <li>• Consultation is strictly confidential</li>\n              </ul>\n            </GlassCard>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":17385},"client/src/pages/courses.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Link } from \"wouter\";\nimport { GlassCard } from \"@/components/ui/glass-card\";\nimport { NeonButton } from \"@/components/ui/neon-button\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { BookOpen, Users, Clock, Star, Search, Filter, Play, ChevronRight } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\n// AutoTranslate import removed for fast loading\nimport { useLanguage } from \"@/contexts/LanguageContext\";\n\nexport default function Courses() {\n  const { t } = useLanguage();\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [levelFilter, setLevelFilter] = useState(\"all\");\n  const [languageFilter, setLanguageFilter] = useState(\"all\");\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: courses = [], isLoading } = useQuery({\n    queryKey: [\"/api/courses\"],\n  });\n\n  const enrollMutation = useMutation({\n    mutationFn: async (courseId: string) => {\n      return apiRequest(\"POST\", `/api/courses/${courseId}/enroll`, {});\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/courses\"] });\n      toast({\n        title: \"Enrollment Successful!\",\n        description: \"You have been enrolled in the course successfully.\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: t(\"enrollmentFailed\"),\n        description: error.message || t(\"failedToEnrollInCourse\"),\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen pt-16 flex items-center justify-center\">\n        <div className=\"animate-spin w-8 h-8 border-4 border-primary border-t-transparent rounded-full\" />\n      </div>\n    );\n  }\n\n  const filteredCourses = Array.isArray(courses) ? courses.filter((course: any) => {\n    const matchesSearch = course.title.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         course.description.toLowerCase().includes(searchTerm.toLowerCase());\n    const matchesLevel = levelFilter === \"all\" || course.level === levelFilter;\n    const matchesLanguage = languageFilter === \"all\" || course.teachingLanguage === languageFilter;\n    return matchesSearch && matchesLevel && matchesLanguage;\n  }) : [];\n\n  const levelColors = {\n    beginner: { bg: \"bg-green-500/20\", text: \"text-green-500\", border: \"border-green-500/30\" },\n    intermediate: { bg: \"bg-yellow-500/20\", text: \"text-yellow-500\", border: \"border-yellow-500/30\" },\n    expert: { bg: \"bg-red-500/20\", text: \"text-red-500\", border: \"border-red-500/30\" },\n  };\n\n  const handleEnroll = (courseId: string) => {\n    if (!localStorage.getItem(\"token\")) {\n      toast({\n        title: t(\"loginRequired\"),\n        description: t(\"pleaseLoginToEnrollInCourses\"),\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    enrollMutation.mutate(courseId);\n  };\n\n  return (\n    <div className=\"min-h-screen pt-16 pb-16\" data-testid=\"courses-page\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        {/* Header */}\n        <div className=\"text-center mb-16\">\n          <h1 className=\"text-5xl md:text-6xl font-bold mb-6 neon-text text-primary animate-float\" data-testid=\"courses-title\">\n            \"Astrology Courses\"\n          </h1>\n          <p className=\"text-xl text-muted-foreground max-w-3xl mx-auto mb-8\">\n            \"Master the ancient wisdom of Vedic astrology with comprehensive courses designed for all levels. Learn from expert astrologer Arup Shastri with 18+ years of experience.\"\n          </p>\n        </div>\n\n        {/* Search and Filters */}\n        <GlassCard className=\"p-6 mb-8\">\n          <div className=\"flex flex-col lg:flex-row gap-4 items-center\">\n            <div className=\"relative flex-1 w-full\">\n              <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground w-4 h-4\" />\n              <Input\n                placeholder={t(\"searchCoursesByTitle\")}\n                value={searchTerm}\n                onChange={(e) => setSearchTerm(e.target.value)}\n                className=\"pl-10 form-input w-full\"\n                data-testid=\"search-courses\"\n              />\n            </div>\n            \n            <div className=\"flex gap-4 w-full lg:w-auto\">\n              <Select value={levelFilter} onValueChange={setLevelFilter}>\n                <SelectTrigger className=\"form-input w-full lg:w-40\">\n                  <Filter className=\"w-4 h-4 mr-2\" />\n                  <SelectValue placeholder={t(\"level\")} />\n                </SelectTrigger>\n                <SelectContent className=\"glass-card\">\n                  <SelectItem value=\"all\">{t(\"allLevels\")}</SelectItem>\n                  <SelectItem value=\"beginner\">{t(\"beginner\")}</SelectItem>\n                  <SelectItem value=\"intermediate\">{t(\"intermediate\")}</SelectItem>\n                  <SelectItem value=\"expert\">{t(\"expert\")}</SelectItem>\n                </SelectContent>\n              </Select>\n\n              <Select value={languageFilter} onValueChange={setLanguageFilter}>\n                <SelectTrigger className=\"form-input w-full lg:w-40\">\n                  <SelectValue placeholder={t(\"language\")} />\n                </SelectTrigger>\n                <SelectContent className=\"glass-card\">\n                  <SelectItem value=\"all\">{t(\"allLanguages\")}</SelectItem>\n                  <SelectItem value=\"en\">{t(\"english\")}</SelectItem>\n                  <SelectItem value=\"hi\">{t(\"hindi\")}</SelectItem>\n                  <SelectItem value=\"bn\">{t(\"bengali\")}</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n        </GlassCard>\n\n        {/* Course Statistics */}\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6 mb-12\">\n          <GlassCard className=\"p-6 text-center\">\n            <BookOpen className=\"w-8 h-8 text-primary neon-border rounded-full p-2 mx-auto mb-3\" style={{ \n              filter: 'drop-shadow(0 0 8px hsl(42, 92%, 56%))',\n              background: 'rgba(255, 193, 7, 0.1)'\n            }} />\n            <div className=\"text-2xl font-bold text-primary mb-2\">{Array.isArray(courses) ? courses.length : 0}</div>\n            <div className=\"text-sm text-muted-foreground\">{t(\"totalCourses\")}</div>\n          </GlassCard>\n          <GlassCard className=\"p-6 text-center\">\n            <Users className=\"w-8 h-8 text-secondary neon-border rounded-full p-2 mx-auto mb-3\" style={{ \n              filter: 'drop-shadow(0 0 8px hsl(195, 100%, 50%))',\n              background: 'rgba(0, 191, 255, 0.1)'\n            }} />\n            <div className=\"text-2xl font-bold text-secondary mb-2\">\n              {Array.isArray(courses) ? courses.reduce((total: number, course: any) => total + (course.currentStudents || 0), 0) : 0}\n            </div>\n            <div className=\"text-sm text-muted-foreground\">{t(\"activeStudents\")}</div>\n          </GlassCard>\n          <GlassCard className=\"p-6 text-center\">\n            <Clock className=\"w-8 h-8 text-primary neon-border rounded-full p-2 mx-auto mb-3\" style={{ \n              color: 'hsl(42, 92%, 56%)', \n              filter: 'drop-shadow(0 0 8px hsl(42, 92%, 56%))',\n              background: 'rgba(255, 193, 7, 0.1)'\n            }} />\n            <div className=\"text-2xl font-bold text-primary neon-text mb-2\" style={{ \n              color: 'hsl(42, 92%, 56%)', \n              textShadow: '0 0 10px hsl(42, 92%, 56%)' \n            }}>50+</div>\n            <div className=\"text-sm text-muted-foreground\">{t(\"hoursOfContent\")}</div>\n          </GlassCard>\n          <GlassCard className=\"p-6 text-center\">\n            <Star className=\"w-8 h-8 text-yellow-500 neon-border rounded-full p-2 mx-auto mb-3\" style={{ \n              filter: 'drop-shadow(0 0 8px #fbbf24)',\n              background: 'rgba(251, 191, 36, 0.1)'\n            }} />\n            <div className=\"text-2xl font-bold text-yellow-500 mb-2\">4.9</div>\n            <div className=\"text-sm text-muted-foreground\">{t(\"averageRating\")}</div>\n          </GlassCard>\n        </div>\n\n        {/* Courses Grid */}\n        {!Array.isArray(filteredCourses) || filteredCourses.length === 0 ? (\n          <GlassCard className=\"p-12 text-center\">\n            <BookOpen className=\"w-16 h-16 text-muted-foreground mx-auto mb-6\" />\n            <h3 className=\"text-2xl font-bold text-foreground mb-4\">{t(\"noCoursesFound\")}</h3>\n            <p className=\"text-muted-foreground mb-6\">\n              {searchTerm ? t(\"tryAdjustingSearchCriteria\") : t(\"coursesAvailableSoon\")}\n            </p>\n            <Button onClick={() => {\n              setSearchTerm(\"\");\n              setLevelFilter(\"all\");\n              setLanguageFilter(\"all\");\n            }} className=\"glass\">\n              Clear Filters\n            </Button>\n          </GlassCard>\n        ) : (\n          <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n            {filteredCourses.map((course: any, index: number) => {\n              const levelStyle = levelColors[course.level as keyof typeof levelColors];\n              const progressPercentage = (course.currentStudents / course.maxStudents) * 100;\n              \n              return (\n                <GlassCard \n                  key={course.id} \n                  className=\"p-0 overflow-hidden hover:scale-105 transition-transform duration-300\"\n                  data-testid={`course-card-${index}`}\n                >\n                  {/* Course Image/Video Placeholder */}\n                  <div className=\"relative h-48 bg-gradient-to-br from-primary/20 to-secondary/20 flex items-center justify-center\">\n                    <Play className=\"w-12 h-12 text-primary/60\" />\n                    <div className=\"absolute top-4 left-4\">\n                      <Badge className={`${levelStyle.bg} ${levelStyle.text} ${levelStyle.border}`}>\n                        {course.level}\n                      </Badge>\n                    </div>\n                    <div className=\"absolute top-4 right-4\">\n                      <Badge variant=\"outline\" className=\"glass text-xs\">\n                        {course.teachingLanguage?.toUpperCase()}\n                      </Badge>\n                    </div>\n                  </div>\n\n                  <div className=\"p-6\">\n                    {/* Course Title & Description */}\n                    <h3 className=\"text-xl font-bold mb-3 text-foreground\" data-testid={`course-title-${index}`}>\n                      <AutoTranslate text={course.title} />\n                    </h3>\n                    <p className=\"text-muted-foreground mb-4 text-sm line-clamp-3\" data-testid={`course-description-${index}`}>\n                      <AutoTranslate text={course.description} />\n                    </p>\n\n                    {/* Course Info */}\n                    <div className=\"space-y-3 mb-6\">\n                      <div className=\"flex items-center justify-between text-sm\">\n                        <div className=\"flex items-center space-x-2\">\n                          <Users className=\"w-4 h-4 text-muted-foreground\" />\n                          <span className=\"text-muted-foreground\">\n                            {course.currentStudents}/{course.maxStudents} students\n                          </span>\n                        </div>\n                        <div className=\"flex items-center space-x-1\">\n                          {Array.from({ length: 5 }).map((_, i) => (\n                            <Star key={i} className=\"w-3 h-3 fill-yellow-500 text-yellow-500\" />\n                          ))}\n                          <span className=\"text-xs text-muted-foreground ml-1\">(4.9)</span>\n                        </div>\n                      </div>\n\n                      {/* Enrollment Progress */}\n                      <div className=\"space-y-1\">\n                        <div className=\"flex justify-between text-xs text-muted-foreground\">\n                          <span>Enrollment Progress</span>\n                          <span>{Math.round(progressPercentage)}%</span>\n                        </div>\n                        <div className=\"w-full bg-muted/30 rounded-full h-2\">\n                          <div \n                            className=\"bg-gradient-to-r from-primary to-secondary h-2 rounded-full transition-all duration-300\"\n                            style={{ width: `${progressPercentage}%` }}\n                          />\n                        </div>\n                      </div>\n\n                      {/* Course Features */}\n                      <div className=\"flex flex-wrap gap-2\">\n                        <Badge variant=\"outline\" className=\"text-xs\">\n                          <Clock className=\"w-3 h-3 mr-1\" />\n                          Self-paced\n                        </Badge>\n                        <Badge variant=\"outline\" className=\"text-xs\">\n                          Certificate\n                        </Badge>\n                        <Badge variant=\"outline\" className=\"text-xs\">\n                          Lifetime Access\n                        </Badge>\n                      </div>\n                    </div>\n\n                    {/* Modules Preview */}\n                    {course.modules && course.modules.length > 0 && (\n                      <div className=\"mb-6\">\n                        <h4 className=\"text-sm font-semibold text-foreground mb-2\">What you'll learn:</h4>\n                        <ul className=\"space-y-1 text-xs text-muted-foreground\">\n                          {course.modules.slice(0, 3).map((module: any, moduleIndex: number) => (\n                            <li key={moduleIndex} className=\"flex items-center\">\n                              <ChevronRight className=\"w-3 h-3 mr-1 text-primary\" />\n                              {module.title}\n                            </li>\n                          ))}\n                          {course.modules.length > 3 && (\n                            <li className=\"text-primary text-xs\">\n                              +{course.modules.length - 3} more modules\n                            </li>\n                          )}\n                        </ul>\n                      </div>\n                    )}\n\n                    {/* Price & Enroll Button */}\n                    <div className=\"flex items-center justify-between\">\n                      <div>\n                        <div className=\"text-2xl font-bold text-primary\" data-testid={`course-price-${index}`}>\n                          ₹{parseFloat(course.price).toLocaleString()}\n                        </div>\n                        <div className=\"text-xs text-muted-foreground\">One-time payment</div>\n                      </div>\n                      \n                      {course.currentStudents >= course.maxStudents ? (\n                        <Button disabled className=\"opacity-50\">\n                          Course Full\n                        </Button>\n                      ) : (\n                        <NeonButton\n                          onClick={() => handleEnroll(course.id)}\n                          disabled={enrollMutation.isPending}\n                          size=\"sm\"\n                          data-testid={`enroll-button-${index}`}\n                        >\n                          {enrollMutation.isPending ? t(\"enrolling\") : t(\"enrollNow\")}\n                        </NeonButton>\n                      )}\n                    </div>\n                  </div>\n                </GlassCard>\n              );\n            })}\n          </div>\n        )}\n\n        {/* Call to Action */}\n        <div className=\"mt-16\">\n          <GlassCard className=\"p-8 md:p-12 text-center neon-border\">\n            <h3 className=\"text-3xl font-bold mb-4 text-primary\">\n              Ready to Begin Your Astrological Journey?\n            </h3>\n            <p className=\"text-muted-foreground mb-8 text-lg max-w-2xl mx-auto\">\n              Join thousands of students worldwide who have transformed their understanding of the cosmos \n              with expert guidance from Astrologer Arup Shastri.\n            </p>\n            <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n              <Link href=\"/booking\">\n                <NeonButton size=\"lg\" className=\"text-lg px-8 py-4\">\n                  Book Personal Consultation\n                </NeonButton>\n              </Link>\n              <Link href=\"/products\">\n                <Button variant=\"outline\" size=\"lg\" className=\"glass text-lg px-8 py-4\">\n                  Explore Remedies\n                </Button>\n              </Link>\n            </div>\n          </GlassCard>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":16913},"client/src/pages/home.tsx":{"content":"import { Link } from \"wouter\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { GlassCard } from \"@/components/ui/glass-card\";\nimport { NeonButton } from \"@/components/ui/neon-button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Star, Users, Globe, Award, Video, MessageSquare, Phone, MapPin, Home as HomeIcon } from \"lucide-react\";\nimport { useLanguage } from \"@/contexts/LanguageContext\";\n// AutoTranslate import removed - using t() function instead\n\nexport default function Home() {\n  const { t } = useLanguage();\n  \n  const { data: courses } = useQuery({\n    queryKey: [\"/api/courses\"],\n  });\n\n  const { data: products } = useQuery({\n    queryKey: [\"/api/products\"],\n  });\n\n  const stats = [\n    { icon: Award, label: t(\"yearsExperience\"), value: \"18+\", color: \"text-primary\" },\n    { icon: Users, label: t(\"satisfiedClients\"), value: \"5000+\", color: \"text-secondary\" },\n    { icon: Globe, label: t(\"countriesServed\"), value: \"100+\", color: \"text-pink-500\" },\n  ];\n\n  const consultationTypes = [\n    {\n      icon: Video,\n      title: t(\"videoCall\"),\n      description: t(\"videoCallDesc\"),\n      price: \"₹2,500\",\n      color: \"primary\",\n      href: \"/booking?type=video\",\n    },\n    {\n      icon: Phone,\n      title: t(\"audioCall\"),\n      description: t(\"audioCallDesc\"),\n      price: \"₹1,800\",\n      color: \"secondary\",\n      href: \"/booking?type=audio\",\n    },\n    {\n      icon: MessageSquare,\n      title: t(\"chatSession\"),\n      description: t(\"chatSessionDesc\"),\n      price: \"₹1,200\",\n      color: \"accent\",\n      href: \"/booking?type=chat\",\n    },\n    {\n      icon: MapPin,\n      title: t(\"inPerson\"),\n      description: t(\"inPersonDesc\"),\n      price: \"₹5,000\",\n      color: \"yellow\",\n      href: \"/booking?type=in-person\",\n    },\n    {\n      icon: HomeIcon,\n      title: t(\"homeService\"),\n      description: t(\"homeServiceDesc\"),\n      price: \"₹2,499\",\n      color: \"amber\",\n      href: \"/booking?type=home-service\",\n    },\n  ];\n\n  const testimonials = [\n    {\n      name: t(\"priyaSharma\"),\n      location: t(\"mumbaiIndia\"),\n      rating: 5,\n      content: t(\"testimonial1\"),\n      initials: \"P.S.\",\n    },\n    {\n      name: t(\"michaelJohnson\"), \n      location: t(\"newYorkUSA\"),\n      rating: 5,\n      content: t(\"testimonial2\"),\n      initials: \"M.J.\",\n    },\n    {\n      name: t(\"sarahMitchell\"),\n      location: t(\"londonUK\"), \n      rating: 5,\n      content: t(\"testimonial3\"),\n      initials: \"S.M.\",\n    },\n  ];\n\n  const featuredCourses = Array.isArray(courses) ? courses.slice(0, 3) : [];\n  const featuredProducts = Array.isArray(products) ? products.slice(0, 4) : [];\n\n  return (\n    <div className=\"min-h-screen pt-16\" data-testid=\"home-page\">\n      {/* Hero Section */}\n      <section className=\"py-16 px-4 sm:px-6 lg:px-8\" data-testid=\"hero-section\">\n        <div className=\"max-w-7xl mx-auto\">\n          <div className=\"text-center mb-16\">\n            <h1 className=\"text-5xl md:text-7xl font-bold mb-6 neon-text text-primary animate-float\" data-testid=\"hero-title\">\n              {t(\"heroTitle\")}\n            </h1>\n            <p className=\"text-xl md:text-2xl text-muted-foreground mb-8 max-w-3xl mx-auto\" data-testid=\"hero-description\">\n              {t(\"heroSubtitle\")}\n            </p>\n            \n            {/* CTA Buttons */}\n            <div className=\"flex flex-col sm:flex-row gap-4 justify-center mb-12\">\n              <Link href=\"/booking\">\n                <NeonButton size=\"lg\" className=\"text-lg px-8 py-4\" data-testid=\"book-reading-button\">\n                  {t(\"bookReadingNow\")}\n                </NeonButton>\n              </Link>\n              <Link href=\"/courses\">\n                <NeonButton size=\"lg\" className=\"text-lg px-8 py-4\" data-testid=\"explore-courses-button\">\n                  {t(\"exploreCourses\")}\n                </NeonButton>\n              </Link>\n            </div>\n\n            {/* Quick Stats */}\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-8 max-w-4xl mx-auto\">\n              {stats.map((stat, index) => (\n                <GlassCard key={index} className=\"p-6 text-center\" hover data-testid={`stat-${index}`}>\n                  <stat.icon className={`w-12 h-12 mx-auto mb-2 neon-border rounded-full p-3 ${stat.color}`} style={{ \n                    filter: 'drop-shadow(0 0 12px currentColor) brightness(1.2)',\n                    background: index === 2 ? 'rgba(20, 20, 40, 0.8)' : 'rgba(255, 193, 7, 0.1)',\n                    border: index === 2 ? '2px solid rgba(255, 193, 7, 0.4)' : '1px solid rgba(255, 193, 7, 0.2)',\n                    strokeWidth: index === 2 ? '3' : '2',\n                    color: index === 2 ? '#e91e63' : undefined,\n                    fill: index === 2 ? 'rgba(20, 20, 40, 0.3)' : 'none'\n                  }} />\n                  <div className=\"text-3xl font-bold text-primary neon-text mb-2\" data-testid={`stat-value-${index}`} style={{ \n                    textShadow: '0 0 10px hsl(42, 92%, 56%)' \n                  }}>{stat.value}</div>\n                  <div className=\"text-muted-foreground\" data-testid={`stat-label-${index}`}>{stat.label}</div>\n                </GlassCard>\n              ))}\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Astrologer Profile Section */}\n      <section className=\"py-16 px-4 sm:px-6 lg:px-8\" data-testid=\"astrologer-profile\">\n        <div className=\"max-w-7xl mx-auto\">\n          <GlassCard className=\"p-8 md:p-12\">\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-12 items-center\">\n              <div>\n                <img \n                  src=\"https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=800\" \n                  alt=\"Arup Shastri - Expert Vedic Astrologer\" \n                  className=\"rounded-2xl shadow-2xl w-full max-w-md mx-auto neon-border\"\n                  data-testid=\"astrologer-image\"\n                />\n              </div>\n              <div>\n                <h2 className=\"text-4xl font-bold mb-6 neon-text text-primary\" data-testid=\"astrologer-title\">\n                  {t(\"meetAstrologer\")}\n                </h2>\n                <p className=\"text-lg text-muted-foreground mb-6\" data-testid=\"astrologer-description\">\n                  {t(\"astrologerDescription\")}\n                </p>\n                \n                {/* Expertise Areas */}\n                <div className=\"grid grid-cols-2 lg:grid-cols-3 gap-4 mb-8\">\n                  {[\n                    { title: t(\"vedicAstrology\"), desc: t(\"vedicAstrologyDesc\") },\n                    { title: t(\"palmistry\"), desc: t(\"palmistryDesc\") },\n                    { title: t(\"numerology\"), desc: t(\"numerologyDesc\") },\n                    { title: t(\"cosmicRemedies\"), desc: t(\"cosmicRemediesDesc\") },\n                    { title: t(\"vedicVastu\"), desc: t(\"vedicVastuDesc\") },\n                    { title: t(\"yogaMeditation\"), desc: t(\"yogaMeditationDesc\") },\n                  ].map((expertise, index) => (\n                    <div key={index} className=\"glass p-4 rounded-lg\" data-testid={`expertise-${index}`}>\n                      <h4 className=\"font-semibold text-primary mb-2\">{expertise.title}</h4>\n                      <p className=\"text-sm text-muted-foreground\">{expertise.desc}</p>\n                    </div>\n                  ))}\n                </div>\n\n                <Link href=\"/booking\">\n                  <NeonButton data-testid=\"schedule-consultation-button\">\n                    {t(\"scheduleConsultation\")}\n                  </NeonButton>\n                </Link>\n              </div>\n            </div>\n          </GlassCard>\n        </div>\n      </section>\n\n      {/* Services Section */}\n      <section className=\"py-16 px-4 sm:px-6 lg:px-8\" data-testid=\"services-section\">\n        <div className=\"max-w-7xl mx-auto\">\n          <div className=\"text-center mb-16\">\n            <h2 className=\"text-4xl md:text-5xl font-bold mb-6 neon-text text-primary\" data-testid=\"services-title\">\n              {t(\"consultationServices\")}\n            </h2>\n            <p className=\"text-xl text-muted-foreground max-w-3xl mx-auto\" data-testid=\"services-description\">\n              {t(\"servicesDescription\")}\n            </p>\n          </div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-8\">\n            {consultationTypes.map((consultation, index) => (\n              <GlassCard key={index} className=\"p-8 text-center\" hover data-testid={`consultation-${index}`}>\n                <div className={`w-16 h-16 rounded-full flex items-center justify-center mx-auto mb-6 ${\n                  consultation.color === 'primary' ? 'bg-primary neon-border' :\n                  consultation.color === 'secondary' ? 'bg-secondary' :\n                  consultation.color === 'accent' ? 'bg-accent' :\n                  'bg-gradient-to-br from-purple-500 to-pink-500'\n                }`} style={\n                  consultation.color === 'primary' ? { boxShadow: '0 0 20px hsl(42, 92%, 56%)' } :\n                  consultation.color === 'secondary' ? { boxShadow: '0 0 20px hsl(195, 100%, 50%)' } :\n                  consultation.color === 'accent' ? { boxShadow: '0 0 20px hsl(279, 100%, 50%)', background: 'hsl(279, 100%, 50%)' } :\n                  { boxShadow: '0 0 20px #e91e63', background: 'linear-gradient(to bottom right, #8b5cf6, #ec4899)' }\n                }>\n                  <consultation.icon className={`w-8 h-8 ${\n                    consultation.color === 'yellow' ? 'text-white' : \n                    consultation.color === 'primary' ? 'text-primary-foreground' :\n                    consultation.color === 'secondary' ? 'text-secondary-foreground' :\n                    'text-white'\n                  }`} style={\n                    consultation.color === 'accent' ? { \n                      filter: 'drop-shadow(0 0 4px rgba(255, 255, 255, 0.8))',\n                      strokeWidth: '2'\n                    } : consultation.color === 'yellow' ? {\n                      filter: 'drop-shadow(0 0 4px rgba(255, 255, 255, 0.8))',\n                      strokeWidth: '2'\n                    } : {}\n                  } />\n                </div>\n                <h3 className=\"text-xl font-bold mb-4 text-foreground\" data-testid={`consultation-title-${index}`}>\n                  {consultation.title}\n                </h3>\n                <p className=\"text-muted-foreground mb-6 text-sm\" data-testid={`consultation-description-${index}`}>\n                  {consultation.description}\n                </p>\n                <div className={`text-2xl font-bold mb-4 ${\n                  consultation.color === 'primary' ? 'text-primary' :\n                  consultation.color === 'secondary' ? 'text-secondary' :\n                  consultation.color === 'accent' ? 'text-accent' :\n                  'text-pink-500'\n                }`} style={\n                  consultation.color === 'accent' ? { \n                    color: 'hsl(279, 100%, 60%)', \n                    textShadow: '0 0 10px hsl(279, 100%, 50%)' \n                  } : consultation.color === 'yellow' ? {\n                    color: '#ec4899',\n                    textShadow: '0 0 10px #e91e63'\n                  } : {}\n                } data-testid={`consultation-price-${index}`}>\n                  {consultation.price}\n                </div>\n                <Link href={consultation.href}>\n                  <button \n                    className=\"w-full py-3 rounded-lg font-semibold transition-all neon-button text-primary-foreground\"\n                    data-testid={`consultation-book-${index}`}>\n                    {consultation.color === 'primary' ? t('bookVideoSession') :\n                     consultation.color === 'secondary' ? t('bookAudioSession') :\n                     consultation.color === 'accent' ? t('startChatSession') :\n                     consultation.color === 'yellow' ? t('bookInPerson') :\n                     t('bookHomeService')}\n                  </button>\n                </Link>\n              </GlassCard>\n            ))}\n          </div>\n        </div>\n      </section>\n\n      {/* All Services Section */}\n      <section className=\"py-16 px-4 sm:px-6 lg:px-8\" data-testid=\"all-services-section\">\n        <div className=\"max-w-7xl mx-auto\">\n          <div className=\"text-center mb-16\">\n            <h2 className=\"text-4xl md:text-5xl font-bold mb-6 neon-text text-primary\" data-testid=\"all-services-title\">\n              {t(\"allServices\")}\n            </h2>\n            <p className=\"text-xl text-muted-foreground max-w-3xl mx-auto\" data-testid=\"all-services-description\">\n              {t(\"allServicesDescription\")}\n            </p>\n          </div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8\">\n            {/* Consultation Services */}\n            <GlassCard className=\"p-8 text-center group\" hover data-testid=\"service-consultations\">\n              <div className=\"w-16 h-16 bg-primary rounded-full flex items-center justify-center mx-auto mb-6 neon-border group-hover:scale-110 transition-transform\" style={{ boxShadow: '0 0 20px hsl(42, 92%, 56%)' }}>\n                <Video className=\"w-8 h-8 text-primary-foreground\" />\n              </div>\n              <h3 className=\"text-xl font-bold mb-4 text-foreground\">{t(\"liveConsultations\")}</h3>\n              <p className=\"text-muted-foreground mb-4 text-sm\">{t(\"liveConsultationsDesc\")}</p>\n              <div className=\"text-lg font-semibold text-primary\">{t(\"startingFrom\")} ₹1,200</div>\n            </GlassCard>\n\n            {/* Astrology Courses */}\n            <GlassCard className=\"p-8 text-center group\" hover data-testid=\"service-courses\">\n              <div className=\"w-16 h-16 bg-secondary rounded-full flex items-center justify-center mx-auto mb-6 group-hover:scale-110 transition-transform\" style={{ boxShadow: '0 0 20px hsl(195, 100%, 50%)' }}>\n                <Award className=\"w-8 h-8 text-secondary-foreground\" />\n              </div>\n              <h3 className=\"text-xl font-bold mb-4 text-foreground\">{t(\"vedicAstrologyCourses\")}</h3>\n              <p className=\"text-muted-foreground mb-4 text-sm\">{t(\"vedicAstrologyCoursesDesc\")}</p>\n              <div className=\"text-lg font-semibold text-secondary\">{t(\"beginnerToExpert\")}</div>\n            </GlassCard>\n\n            {/* Cosmic Products */}\n            <GlassCard className=\"p-8 text-center group\" hover data-testid=\"service-products\">\n              <div className=\"w-16 h-16 bg-accent rounded-full flex items-center justify-center mx-auto mb-6 group-hover:scale-110 transition-transform\" style={{ boxShadow: '0 0 20px hsl(279, 100%, 50%)' }}>\n                <Star className=\"w-8 h-8 text-white\" />\n              </div>\n              <h3 className=\"text-xl font-bold mb-4 text-foreground\">{t(\"cosmicRemedies\")}</h3>\n              <p className=\"text-muted-foreground mb-4 text-sm\">{t(\"cosmicRemediesFullDesc\")}</p>\n              <div className=\"text-lg font-semibold text-primary neon-text\">{t(\"authenticBlessed\")}</div>\n            </GlassCard>\n\n            {/* Vedic Services */}\n            <GlassCard className=\"p-8 text-center group\" hover data-testid=\"service-vedic\">\n              <div className=\"w-16 h-16 bg-gradient-to-br from-orange-500 to-red-500 rounded-full flex items-center justify-center mx-auto mb-6 group-hover:scale-110 transition-transform\" style={{ boxShadow: '0 0 20px #f97316' }}>\n                <Globe className=\"w-8 h-8 text-white\" />\n              </div>\n              <h3 className=\"text-xl font-bold mb-4 text-foreground\">{t(\"traditionalWisdom\")}</h3>\n              <p className=\"text-muted-foreground mb-4 text-sm\">{t(\"palmistryFullDesc\")}</p>\n              <div className=\"text-lg font-semibold\" style={{ color: '#f97316' }}>18+ {t(\"yearsExperience\")}</div>\n            </GlassCard>\n\n            {/* Vastu Shastra */}\n            <GlassCard className=\"p-8 text-center group\" hover data-testid=\"service-vastu\">\n              <div className=\"w-16 h-16 bg-gradient-to-br from-green-500 to-emerald-500 rounded-full flex items-center justify-center mx-auto mb-6 group-hover:scale-110 transition-transform\" style={{ boxShadow: '0 0 20px #10b981' }}>\n                <MapPin className=\"w-8 h-8 text-white\" />\n              </div>\n              <h3 className=\"text-xl font-bold mb-4 text-foreground\">{t(\"vedicVastu\")}</h3>\n              <p className=\"text-muted-foreground mb-4 text-sm\">{t(\"vedicVastuFullDesc\")}</p>\n              <div className=\"text-lg font-semibold\" style={{ color: '#10b981' }}>\n                {t(\"sacredGeometry\")}\n              </div>\n            </GlassCard>\n\n            {/* Yoga & Meditation */}\n            <GlassCard className=\"p-8 text-center group\" hover data-testid=\"service-yoga\">\n              <div className=\"w-16 h-16 bg-gradient-to-br from-purple-500 to-pink-500 rounded-full flex items-center justify-center mx-auto mb-6 group-hover:scale-110 transition-transform\" style={{ boxShadow: '0 0 20px #e91e63' }}>\n                <Users className=\"w-8 h-8 text-white\" />\n              </div>\n              <h3 className=\"text-xl font-bold mb-4 text-foreground\">{t(\"yogaMeditation\")}</h3>\n              <p className=\"text-muted-foreground mb-4 text-sm\">{t(\"yogaMeditationFullDesc\")}</p>\n              <div className=\"text-lg font-semibold\" style={{ color: '#e91e63' }}>{t(\"mindBodyHarmony\")}</div>\n            </GlassCard>\n\n            {/* Home Service */}\n            <GlassCard className=\"p-8 text-center group\" hover data-testid=\"service-home\">\n              <div className=\"w-16 h-16 bg-gradient-to-br from-yellow-500 to-amber-500 rounded-full flex items-center justify-center mx-auto mb-6 group-hover:scale-110 transition-transform\" style={{ boxShadow: '0 0 20px #fbbf24' }}>\n                <HomeIcon className=\"w-8 h-8 text-white\" />\n              </div>\n              <h3 className=\"text-xl font-bold mb-4 text-foreground\">{t(\"homeService\")}</h3>\n              <p className=\"text-muted-foreground mb-4 text-sm\">{t(\"homeServiceFullDesc\")}</p>\n              <div className=\"text-lg font-semibold\" style={{ color: '#fbbf24' }}>{t(\"sacredHomeVisits\")}</div>\n            </GlassCard>\n          </div>\n\n          <div className=\"text-center mt-12\">\n            <Link href=\"/booking\">\n              <NeonButton size=\"lg\" className=\"text-lg px-8 py-4\" data-testid=\"explore-all-services-button\">\n                {t(\"allServices\")}\n              </NeonButton>\n            </Link>\n          </div>\n        </div>\n      </section>\n\n      {/* Featured Courses */}\n      {featuredCourses.length > 0 && (\n        <section className=\"py-16 px-4 sm:px-6 lg:px-8\" data-testid=\"featured-courses\">\n          <div className=\"max-w-7xl mx-auto\">\n            <div className=\"text-center mb-16\">\n              <h2 className=\"text-4xl md:text-5xl font-bold mb-6 neon-text text-primary\">\n                {t(\"courses\")}\n              </h2>\n              <p className=\"text-xl text-muted-foreground max-w-3xl mx-auto\">\n                {t(\"vedicAstrologyCoursesDesc\")}\n              </p>\n            </div>\n\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-8\">\n              {featuredCourses.map((course, index) => (\n                <GlassCard key={course.id} className=\"p-6\" hover data-testid={`featured-course-${index}`}>\n                  <Badge className=\"mb-4\" variant={\n                    course.level === 'beginner' ? 'default' :\n                    course.level === 'intermediate' ? 'secondary' :\n                    'destructive'\n                  }>\n                    {course.level}\n                  </Badge>\n                  <h3 className=\"text-xl font-bold mb-4 text-foreground\" data-testid={`course-title-${index}`}>\n                    {course.title}\n                  </h3>\n                  <p className=\"text-muted-foreground mb-6 text-sm\" data-testid={`course-description-${index}`}>\n                    {course.description}\n                  </p>\n                  <div className=\"text-2xl font-bold text-primary mb-6\" data-testid={`course-price-${index}`}>\n                    ₹{course.price}\n                  </div>\n                  <Link href=\"/courses\">\n                    <NeonButton size=\"sm\" className=\"w-full\" data-testid={`course-enroll-${index}`}>\n                      {t(\"learnMore\") || \"Learn More\"}\n                    </NeonButton>\n                  </Link>\n                </GlassCard>\n              ))}\n            </div>\n\n            <div className=\"text-center mt-12\">\n              <Link href=\"/courses\">\n                <NeonButton size=\"lg\" className=\"text-lg px-8 py-4\" data-testid=\"view-all-courses\">\n                  {t(\"viewAllCourses\")}\n                </NeonButton>\n              </Link>\n            </div>\n          </div>\n        </section>\n      )}\n\n      {/* Featured Products */}\n      {featuredProducts.length > 0 && (\n        <section className=\"py-16 px-4 sm:px-6 lg:px-8\" data-testid=\"featured-products\">\n          <div className=\"max-w-7xl mx-auto\">\n            <div className=\"text-center mb-16\">\n              <h2 className=\"text-4xl md:text-5xl font-bold mb-6 neon-text text-primary\">\n                {t(\"cosmicRemedies\")}\n              </h2>\n              <p className=\"text-xl text-muted-foreground max-w-3xl mx-auto\">\n                {t(\"cosmicRemediesDescription\")}\n              </p>\n            </div>\n\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-8\">\n              {featuredProducts.map((product, index) => (\n                <GlassCard key={product.id} className=\"p-6\" hover data-testid={`featured-product-${index}`}>\n                  <div className=\"w-full h-48 bg-muted rounded-lg mb-4 flex items-center justify-center\">\n                    <span className=\"text-muted-foreground\">Product Image</span>\n                  </div>\n                  <h3 className=\"text-lg font-bold mb-2 text-foreground\" data-testid={`product-title-${index}`}>\n                    {product.name}\n                  </h3>\n                  <p className=\"text-muted-foreground mb-4 text-sm\" data-testid={`product-description-${index}`}>\n                    {product.description.substring(0, 80)}...\n                  </p>\n                  <div className=\"text-lg font-bold text-primary mb-4\" data-testid={`product-price-${index}`}>\n                    Starting ₹{product.price}\n                  </div>\n                  <Link href=\"/products\">\n                    <NeonButton size=\"sm\" className=\"w-full\" data-testid={`product-view-${index}`}>\n                      {t(\"viewProduct\")}\n                    </NeonButton>\n                  </Link>\n                </GlassCard>\n              ))}\n            </div>\n\n            <div className=\"text-center mt-12\">\n              <Link href=\"/products\">\n                <NeonButton size=\"lg\" className=\"text-lg px-8 py-4\" data-testid=\"view-all-products\">\n                  {t(\"browseAllProducts\")}\n                </NeonButton>\n              </Link>\n            </div>\n          </div>\n        </section>\n      )}\n\n      {/* Testimonials */}\n      <section className=\"py-16 px-4 sm:px-6 lg:px-8\" data-testid=\"testimonials-section\">\n        <div className=\"max-w-7xl mx-auto\">\n          <div className=\"text-center mb-16\">\n            <h2 className=\"text-4xl md:text-5xl font-bold mb-6 neon-text text-primary\">\n              Client Testimonials\n            </h2>\n            <p className=\"text-xl text-muted-foreground max-w-3xl mx-auto\">\n              {t(\"discoverGuidance\")}\n            </p>\n          </div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-8\">\n            {testimonials.map((testimonial, index) => (\n              <GlassCard key={index} className=\"p-8\" data-testid={`testimonial-${index}`}>\n                <div className=\"flex items-center mb-6\">\n                  <div className=\"w-12 h-12 bg-primary rounded-full flex items-center justify-center mr-4\">\n                    <span className=\"text-primary-foreground font-bold\" data-testid={`testimonial-initials-${index}`}>\n                      {testimonial.initials}\n                    </span>\n                  </div>\n                  <div>\n                    <div className=\"font-semibold text-foreground\" data-testid={`testimonial-name-${index}`}>\n                      {testimonial.name}\n                    </div>\n                    <div className=\"text-sm text-muted-foreground\" data-testid={`testimonial-location-${index}`}>\n                      {testimonial.location}\n                    </div>\n                  </div>\n                </div>\n                <div className=\"flex text-yellow-500 mb-4\">\n                  {Array.from({ length: testimonial.rating }).map((_, starIndex) => (\n                    <Star key={starIndex} className=\"w-5 h-5 fill-current\" />\n                  ))}\n                </div>\n                <p className=\"text-muted-foreground\" data-testid={`testimonial-content-${index}`}>\n                  \"{testimonial.content}\"\n                </p>\n              </GlassCard>\n            ))}\n          </div>\n        </div>\n      </section>\n\n      {/* CTA Section */}\n      <section className=\"py-16 px-4 sm:px-6 lg:px-8\" data-testid=\"cta-section\">\n        <div className=\"max-w-4xl mx-auto\">\n          <GlassCard className=\"p-8 md:p-12 text-center neon-border\">\n            <h3 className=\"text-3xl font-bold mb-4 text-primary\" data-testid=\"cta-title\">\n              {t(\"readyToDiscover\")}\n            </h3>\n            <p className=\"text-muted-foreground mb-8 text-lg\" data-testid=\"cta-description\">\n              {t(\"bookPersonalizedConsultation\")}\n            </p>\n            <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n              <Link href=\"/booking\">\n                <NeonButton size=\"lg\" className=\"text-lg px-8 py-4\" data-testid=\"cta-book-button\">\n                  {t(\"bookConsultation\")}\n                </NeonButton>\n              </Link>\n              <Link href=\"/courses\">\n                <NeonButton size=\"lg\" className=\"text-lg px-8 py-4\" data-testid=\"cta-learn-button\">\n                  Start Learning Astrology\n                </NeonButton>\n              </Link>\n            </div>\n          </GlassCard>\n        </div>\n      </section>\n\n      {/* Floating Action Button */}\n      <Link href=\"/booking\">\n        <button \n          className=\"fixed bottom-6 right-6 z-50 neon-button w-16 h-16 rounded-full shadow-2xl hover:scale-110 transition-transform\"\n          title={t(\"quickBooking\")}\n          data-testid=\"floating-book-button\"\n        >\n          <Phone className=\"w-8 h-8 text-primary-foreground mx-auto\" />\n        </button>\n      </Link>\n    </div>\n  );\n}\n","size_bytes":26599},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/products.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Link } from \"wouter\";\nimport { GlassCard } from \"@/components/ui/glass-card\";\nimport { NeonButton } from \"@/components/ui/neon-button\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Package, Search, Star, Gem, Scroll, Droplets, BookOpen, Gift, ShoppingCart, Filter } from \"lucide-react\";\n// AutoTranslate import removed for fast loading\nimport { useLanguage } from \"@/contexts/LanguageContext\";\n\nexport default function Products() {\n  const { t } = useLanguage();\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [categoryFilter, setCategoryFilter] = useState(\"all\");\n  const [priceFilter, setPriceFilter] = useState(\"all\");\n\n  const { data: products = [], isLoading } = useQuery({\n    queryKey: [\"/api/products\"],\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen pt-16 flex items-center justify-center\">\n        <div className=\"animate-spin w-8 h-8 border-4 border-primary border-t-transparent rounded-full\" />\n      </div>\n    );\n  }\n\n  const filteredProducts = Array.isArray(products) ? products.filter((product: any) => {\n    const matchesSearch = product.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         product.description.toLowerCase().includes(searchTerm.toLowerCase());\n    const matchesCategory = categoryFilter === \"all\" || product.category === categoryFilter;\n    \n    let matchesPrice = true;\n    if (priceFilter !== \"all\") {\n      const price = parseFloat(product.price);\n      switch (priceFilter) {\n        case \"under-1000\":\n          matchesPrice = price < 1000;\n          break;\n        case \"1000-5000\":\n          matchesPrice = price >= 1000 && price <= 5000;\n          break;\n        case \"over-5000\":\n          matchesPrice = price > 5000;\n          break;\n      }\n    }\n    \n    return matchesSearch && matchesCategory && matchesPrice;\n  }) : [];\n\n  const categories = [\n    { \n      value: \"all\", \n      label: t(\"allProducts\"), \n      icon: Package,\n      description: t(\"browseAllCosmicRemedies\")\n    },\n    { \n      value: \"gemstones\", \n      label: t(\"gemstones\"), \n      icon: Gem,\n      description: t(\"authenticCertifiedGemstones\")\n    },\n    { \n      value: \"yantras\", \n      label: t(\"sacredYantras\"), \n      icon: Scroll,\n      description: t(\"energizedGeometricPatterns\")\n    },\n    { \n      value: \"malas\", \n      label: t(\"spiritualMalas\"), \n      icon: Droplets,\n      description: t(\"rudrakshaGemstoneForMeditation\")\n    },\n    { \n      value: \"books\", \n      label: t(\"astrologyBooks\"), \n      icon: BookOpen,\n      description: t(\"comprehensiveAncientWisdom\")\n    },\n    { \n      value: \"kits\", \n      label: t(\"remedyKits\"), \n      icon: Gift,\n      description: t(\"completePersonalizedRemedySolutions\")\n    },\n  ];\n\n  const categoryColors = {\n    gemstones: { bg: \"bg-purple-500/20\", text: \"text-purple-500\", accent: \"from-purple-500 to-pink-500\" },\n    yantras: { bg: \"bg-yellow-500/20\", text: \"text-yellow-500\", accent: \"from-yellow-500 to-orange-500\" },\n    malas: { bg: \"bg-green-500/20\", text: \"text-green-500\", accent: \"from-green-500 to-emerald-500\" },\n    books: { bg: \"bg-blue-500/20\", text: \"text-blue-500\", accent: \"from-blue-500 to-cyan-500\" },\n    kits: { bg: \"bg-red-500/20\", text: \"text-red-500\", accent: \"from-red-500 to-rose-500\" },\n  };\n\n  const getCategoryIcon = (category: string) => {\n    const categoryData = categories.find(c => c.value === category);\n    return categoryData ? categoryData.icon : Package;\n  };\n\n  return (\n    <div className=\"min-h-screen pt-16 pb-16\" data-testid=\"products-page\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        {/* Header */}\n        <div className=\"text-center mb-16\">\n          <h1 className=\"text-5xl md:text-6xl font-bold mb-6 neon-text text-primary animate-float\" data-testid=\"products-title\">\n            \"Cosmic Remedies\"\n          </h1>\n          <p className=\"text-xl text-muted-foreground max-w-3xl mx-auto mb-8\">\n            \"Authentic astrological products, gemstones, and spiritual accessories to enhance your cosmic journey. Each item is carefully selected and energized by Astrologer Arup Shastri.\"\n          </p>\n        </div>\n\n        {/* Search and Filters */}\n        <GlassCard className=\"p-6 mb-8\">\n          <div className=\"flex flex-col lg:flex-row gap-4 items-center\">\n            <div className=\"relative flex-1 w-full\">\n              <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground w-4 h-4\" />\n              <Input\n                placeholder={t(\"searchProductsByName\")}\n                value={searchTerm}\n                onChange={(e) => setSearchTerm(e.target.value)}\n                className=\"pl-10 form-input w-full\"\n                data-testid=\"search-products\"\n              />\n            </div>\n            \n            <div className=\"flex gap-4 w-full lg:w-auto\">\n              <Select value={categoryFilter} onValueChange={setCategoryFilter}>\n                <SelectTrigger className=\"form-input w-full lg:w-48\">\n                  <Filter className=\"w-4 h-4 mr-2\" />\n                  <SelectValue placeholder={t(\"category\")} />\n                </SelectTrigger>\n                <SelectContent className=\"glass-card\">\n                  {categories.map((category) => (\n                    <SelectItem key={category.value} value={category.value}>\n                      {category.label}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n\n              <Select value={priceFilter} onValueChange={setPriceFilter}>\n                <SelectTrigger className=\"form-input w-full lg:w-40\">\n                  <SelectValue placeholder={t(\"price\")} />\n                </SelectTrigger>\n                <SelectContent className=\"glass-card\">\n                  <SelectItem value=\"all\">{t(\"allPrices\")}</SelectItem>\n                  <SelectItem value=\"under-1000\">{t(\"under1000\")}</SelectItem>\n                  <SelectItem value=\"1000-5000\">{t(\"from1000To5000\")}</SelectItem>\n                  <SelectItem value=\"over-5000\">{t(\"over5000\")}</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n        </GlassCard>\n\n        {/* Category Cards */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 mb-12\">\n          {categories.slice(1).map((category, index) => {\n            const CategoryIcon = category.icon;\n            const colors = categoryColors[category.value as keyof typeof categoryColors];\n            const productCount = Array.isArray(products) ? products.filter((p: any) => p.category === category.value).length : 0;\n            \n            return (\n              <GlassCard \n                key={category.value}\n                className=\"p-6 hover:scale-105 transition-transform cursor-pointer\"\n                onClick={() => setCategoryFilter(category.value)}\n                data-testid={`category-${category.value}`}\n              >\n                <div className={`w-16 h-16 rounded-full ${colors.bg} flex items-center justify-center mx-auto mb-4`}>\n                  <CategoryIcon className={`w-8 h-8 ${colors.text}`} />\n                </div>\n                <h3 className=\"text-lg font-bold text-center mb-2 text-foreground\">\n                  {category.label}\n                </h3>\n                <p className=\"text-sm text-muted-foreground text-center mb-4\">\n                  {category.description}\n                </p>\n                <div className=\"text-center\">\n                  <Badge variant=\"outline\" className=\"text-xs\">\n                    {productCount} {t(\"products\")}\n                  </Badge>\n                </div>\n              </GlassCard>\n            );\n          })}\n        </div>\n\n        {/* Featured Product Banner */}\n        <GlassCard className=\"p-8 md:p-12 mb-12 neon-border\">\n          <div className=\"text-center\">\n            <Gift className=\"w-16 h-16 text-primary mx-auto mb-6\" />\n            <h3 className=\"text-3xl font-bold mb-4 text-primary\">\n              Complete Remedy Kit\n            </h3>\n            <p className=\"text-muted-foreground mb-6 max-w-2xl mx-auto\">\n              Get a personalized remedy kit based on your birth chart analysis. Includes gemstones, yantra, \n              and detailed guidance tailored specifically for you.\n            </p>\n            <div className=\"flex items-center justify-center space-x-4 mb-6\">\n              <div className=\"text-3xl font-bold text-primary\">₹9,999</div>\n              <div className=\"text-lg text-muted-foreground line-through\">₹15,000</div>\n              <Badge className=\"bg-red-500/20 text-red-500\">33% OFF</Badge>\n            </div>\n            <Link href=\"/booking\">\n              <NeonButton size=\"lg\" className=\"text-lg px-8 py-4\">\n                Order Custom Kit\n              </NeonButton>\n            </Link>\n          </div>\n        </GlassCard>\n\n        {/* Products Grid */}\n        {filteredProducts.length === 0 ? (\n          <GlassCard className=\"p-12 text-center\">\n            <Package className=\"w-16 h-16 text-muted-foreground mx-auto mb-6\" />\n            <h3 className=\"text-2xl font-bold text-foreground mb-4\">{t(\"noProductsFound\")}</h3>\n            <p className=\"text-muted-foreground mb-6\">\n              {searchTerm ? t(\"tryAdjustingSearchCriteria\") : t(\"productsAvailableSoon\")}\n            </p>\n            <Button onClick={() => {\n              setSearchTerm(\"\");\n              setCategoryFilter(\"all\");\n              setPriceFilter(\"all\");\n            }} className=\"glass\">\n              Clear Filters\n            </Button>\n          </GlassCard>\n        ) : (\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-8\">\n            {filteredProducts.map((product: any, index: number) => {\n              const CategoryIcon = getCategoryIcon(product.category);\n              const colors = categoryColors[product.category as keyof typeof categoryColors];\n              \n              return (\n                <GlassCard \n                  key={product.id} \n                  className=\"p-0 overflow-hidden hover:scale-105 transition-transform duration-300\"\n                  data-testid={`product-card-${index}`}\n                >\n                  {/* Product Image */}\n                  <div className={`relative h-48 bg-gradient-to-br ${colors?.accent || 'from-primary to-secondary'} flex items-center justify-center`}>\n                    <CategoryIcon className=\"w-16 h-16 text-white/80\" />\n                    <div className=\"absolute top-4 right-4\">\n                      <Badge className={colors?.bg ? `${colors.bg} ${colors.text}` : \"bg-primary/20 text-primary\"}>\n                        {product.category}\n                      </Badge>\n                    </div>\n                    {product.stock && product.stock <= 5 && (\n                      <div className=\"absolute top-4 left-4\">\n                        <Badge variant=\"destructive\" className=\"text-xs\">\n                          Only {product.stock} left\n                        </Badge>\n                      </div>\n                    )}\n                  </div>\n\n                  <div className=\"p-6\">\n                    {/* Product Info */}\n                    <h3 className=\"text-lg font-bold mb-2 text-foreground\" data-testid={`product-name-${index}`}>\n                      <AutoTranslate text={product.name} />\n                    </h3>\n                    <p className=\"text-muted-foreground mb-4 text-sm line-clamp-3\" data-testid={`product-description-${index}`}>\n                      <AutoTranslate text={product.description} />\n                    </p>\n\n                    {/* Specifications */}\n                    {product.specifications && Object.keys(product.specifications).length > 0 && (\n                      <div className=\"mb-4 space-y-1\">\n                        {Object.entries(product.specifications).slice(0, 2).map(([key, value]) => (\n                          <div key={key} className=\"flex justify-between text-xs\">\n                            <span className=\"text-muted-foreground capitalize\">{key}:</span>\n                            <span className=\"text-foreground\">{value as string}</span>\n                          </div>\n                        ))}\n                      </div>\n                    )}\n\n                    {/* Ratings */}\n                    <div className=\"flex items-center space-x-1 mb-4\">\n                      {Array.from({ length: 5 }).map((_, i) => (\n                        <Star key={i} className=\"w-3 h-3 fill-yellow-500 text-yellow-500\" />\n                      ))}\n                      <span className=\"text-xs text-muted-foreground ml-1\">(4.8)</span>\n                    </div>\n\n                    {/* Price & Add to Cart */}\n                    <div className=\"flex items-center justify-between\">\n                      <div>\n                        <div className=\"text-xl font-bold text-primary\" data-testid={`product-price-${index}`}>\n                          ₹{parseFloat(product.price).toLocaleString()}\n                        </div>\n                        <div className=\"text-xs text-muted-foreground\">\n                          {product.currency !== \"INR\" && `${product.currency} pricing available`}\n                        </div>\n                      </div>\n                      \n                      <NeonButton size=\"sm\" data-testid={`add-to-cart-${index}`}>\n                        <ShoppingCart className=\"w-4 h-4 mr-1\" />\n                        Add to Cart\n                      </NeonButton>\n                    </div>\n\n                    {/* Quick Features */}\n                    <div className=\"flex flex-wrap gap-1 mt-4\">\n                      <Badge variant=\"outline\" className=\"text-xs\">Authentic</Badge>\n                      <Badge variant=\"outline\" className=\"text-xs\">Energized</Badge>\n                      {product.category === \"gemstones\" && (\n                        <Badge variant=\"outline\" className=\"text-xs\">Certified</Badge>\n                      )}\n                    </div>\n                  </div>\n                </GlassCard>\n              );\n            })}\n          </div>\n        )}\n\n        {/* Trust Indicators */}\n        <div className=\"mt-16\">\n          <GlassCard className=\"p-8\">\n            <h3 className=\"text-2xl font-bold text-center mb-8 text-primary\">\n              Why Choose Our Products?\n            </h3>\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-8\">\n              <div className=\"text-center\">\n                <div className=\"w-16 h-16 bg-primary/20 rounded-full flex items-center justify-center mx-auto mb-4\">\n                  <Star className=\"w-8 h-8 text-primary\" />\n                </div>\n                <h4 className=\"font-semibold text-foreground mb-2\">Authentic & Certified</h4>\n                <p className=\"text-sm text-muted-foreground\">\n                  All gemstones come with authentic certificates and our products are carefully sourced.\n                </p>\n              </div>\n              <div className=\"text-center\">\n                <div className=\"w-16 h-16 bg-secondary/20 rounded-full flex items-center justify-center mx-auto mb-4\">\n                  <Gem className=\"w-8 h-8 text-secondary\" />\n                </div>\n                <h4 className=\"font-semibold text-foreground mb-2\">Energized by Expert</h4>\n                <p className=\"text-sm text-muted-foreground\">\n                  Every product is personally energized and blessed by Astrologer Arup Shastri.\n                </p>\n              </div>\n              <div className=\"text-center\">\n                <div className=\"w-16 h-16 bg-accent/20 rounded-full flex items-center justify-center mx-auto mb-4\">\n                  <Package className=\"w-8 h-8 text-accent\" />\n                </div>\n                <h4 className=\"font-semibold text-foreground mb-2\">Global Shipping</h4>\n                <p className=\"text-sm text-muted-foreground\">\n                  Secure packaging and worldwide shipping with tracking for all orders.\n                </p>\n              </div>\n            </div>\n          </GlassCard>\n        </div>\n\n        {/* Call to Action */}\n        <div className=\"mt-16\">\n          <GlassCard className=\"p-8 md:p-12 text-center neon-border\">\n            <h3 className=\"text-3xl font-bold mb-4 text-primary\">\n              Need Personalized Guidance?\n            </h3>\n            <p className=\"text-muted-foreground mb-8 text-lg max-w-2xl mx-auto\">\n              Not sure which products are right for you? Book a consultation with Astrologer Arup Shastri \n              to get personalized recommendations based on your birth chart.\n            </p>\n            <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n              <Link href=\"/booking\">\n                <NeonButton size=\"lg\" className=\"text-lg px-8 py-4\">\n                  Book Consultation\n                </NeonButton>\n              </Link>\n              <Link href=\"/courses\">\n                <NeonButton variant=\"secondary\" size=\"lg\" className=\"text-lg px-8 py-4\">\n                  Learn Astrology\n                </NeonButton>\n              </Link>\n            </div>\n          </GlassCard>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":17555},"client/src/components/consultation/chat.tsx":{"content":"import { useState, useEffect, useRef } from \"react\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { GlassCard } from \"@/components/ui/glass-card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { \n  Send, \n  Image, \n  Mic, \n  Video as VideoIcon, \n  Paperclip, \n  Smile,\n  MoreVertical,\n  Download,\n  Clock\n} from \"lucide-react\";\nimport { useWebSocket } from \"@/hooks/use-websocket\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\n\n\ninterface Message {\n  id: string;\n  senderId: string;\n  message: string;\n  messageType: \"text\" | \"image\" | \"video\" | \"voice\";\n  fileUrl?: string;\n  timestamp: string;\n}\n\ninterface ChatProps {\n  consultationId: string;\n  messages: Message[];\n  isActive: boolean;\n}\n\nexport default function Chat({ consultationId, messages, isActive }: ChatProps) {\n  const [messageText, setMessageText] = useState(\"\");\n  const [isRecording, setIsRecording] = useState(false);\n  const [recordingTime, setRecordingTime] = useState(0);\n  const messagesEndRef = useRef<HTMLDivElement>(null);\n  const fileInputRef = useRef<HTMLInputElement>(null);\n  const mediaRecorderRef = useRef<MediaRecorder | null>(null);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { isConnected, sendMessage } = useWebSocket({\n    onMessage: (message) => {\n      if (message.type === 'chat_message' && message.consultationId === consultationId) {\n        queryClient.invalidateQueries({ \n          queryKey: [\"/api/consultations\", consultationId, \"messages\"] \n        });\n      }\n    }\n  });\n\n  const sendMessageMutation = useMutation({\n    mutationFn: async (messageData: { message: string; messageType: string; fileUrl?: string }) => {\n      const response = await apiRequest(\"POST\", `/api/consultations/${consultationId}/messages`, messageData);\n      return response.json();\n    },\n    onSuccess: (data) => {\n      // Send via WebSocket for real-time delivery\n      sendMessage({\n        type: 'chat_message',\n        consultationId,\n        senderId: data.senderId,\n        message: data.message,\n        messageType: data.messageType,\n        timestamp: data.timestamp,\n      });\n      \n      queryClient.invalidateQueries({ \n        queryKey: [\"/api/consultations\", consultationId, \"messages\"] \n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Failed to send message\",\n        description: error.message || \"Please try again\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  useEffect(() => {\n    scrollToBottom();\n  }, [messages]);\n\n  useEffect(() => {\n    let interval: NodeJS.Timeout;\n    if (isRecording) {\n      interval = setInterval(() => {\n        setRecordingTime(prev => prev + 1);\n      }, 1000);\n    } else {\n      setRecordingTime(0);\n    }\n    return () => clearInterval(interval);\n  }, [isRecording]);\n\n  const scrollToBottom = () => {\n    messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\n  };\n\n  const handleSendMessage = () => {\n    if (!messageText.trim() || !isActive) return;\n\n    sendMessageMutation.mutate({\n      message: messageText,\n      messageType: \"text\",\n    });\n\n    setMessageText(\"\");\n  };\n\n  const handleKeyPress = (e: React.KeyboardEvent) => {\n    if (e.key === \"Enter\" && !e.shiftKey) {\n      e.preventDefault();\n      handleSendMessage();\n    }\n  };\n\n  const handleFileUpload = async (file: File) => {\n    if (!file || !isActive) return;\n\n    const formData = new FormData();\n    formData.append('file', file);\n\n    try {\n      // This would upload file to your storage service\n      // For now, we'll simulate the upload\n      const fileUrl = URL.createObjectURL(file);\n      const messageType = file.type.startsWith('image/') ? 'image' : \n                         file.type.startsWith('video/') ? 'video' : 'text';\n\n      sendMessageMutation.mutate({\n        message: file.name,\n        messageType,\n        fileUrl,\n      });\n\n      toast({\n        title: \"File uploaded\",\n        description: \"Your file has been shared successfully\",\n      });\n    } catch (error) {\n      toast({\n        title: \"Upload failed\",\n        description: \"Failed to upload file. Please try again.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const startRecording = async () => {\n    try {\n      const stream = await navigator.mediaDevices.getUserMedia({ audio: true });\n      const mediaRecorder = new MediaRecorder(stream);\n      const chunks: BlobPart[] = [];\n\n      mediaRecorder.ondataavailable = (event) => {\n        chunks.push(event.data);\n      };\n\n      mediaRecorder.onstop = () => {\n        const blob = new Blob(chunks, { type: 'audio/wav' });\n        const audioUrl = URL.createObjectURL(blob);\n        \n        sendMessageMutation.mutate({\n          message: `Voice message (${recordingTime}s)`,\n          messageType: \"voice\",\n          fileUrl: audioUrl,\n        });\n        \n        stream.getTracks().forEach(track => track.stop());\n      };\n\n      mediaRecorderRef.current = mediaRecorder;\n      mediaRecorder.start();\n      setIsRecording(true);\n    } catch (error) {\n      toast({\n        title: \"Recording failed\",\n        description: \"Could not access microphone\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const stopRecording = () => {\n    if (mediaRecorderRef.current && isRecording) {\n      mediaRecorderRef.current.stop();\n      setIsRecording(false);\n    }\n  };\n\n  const formatTime = (timestamp: string) => {\n    return new Date(timestamp).toLocaleTimeString([], { \n      hour: '2-digit', \n      minute: '2-digit' \n    });\n  };\n\n  const formatRecordingTime = (seconds: number) => {\n    const mins = Math.floor(seconds / 60);\n    const secs = seconds % 60;\n    return `${mins}:${secs.toString().padStart(2, '0')}`;\n  };\n\n  return (\n    <div className=\"h-full flex flex-col\" data-testid=\"chat-component\">\n      <GlassCard className=\"flex-1 flex flex-col min-h-[500px]\">\n        {/* Chat Header */}\n        <div className=\"p-4 border-b border-primary/20 flex items-center justify-between\">\n          <div className=\"flex items-center space-x-3\">\n            <h3 className=\"font-semibold text-foreground\">\"Consultation Chat\"</h3>\n            <div className=\"flex items-center space-x-2\">\n              <div className={`w-2 h-2 rounded-full ${isConnected ? 'bg-green-500' : 'bg-red-500'}`} />\n              <span className=\"text-xs text-muted-foreground\">\n                {isConnected ? \"Connected\" : \"Connecting...\"}\n              </span>\n            </div>\n          </div>\n          \n          {!isActive && (\n            <Badge variant=\"secondary\" className=\"text-xs\">\n              \"Chat Disabled\"\n            </Badge>\n          )}\n        </div>\n\n        {/* Messages Area */}\n        <div className=\"flex-1 p-4 overflow-y-auto space-y-4 max-h-96\">\n          {messages.length === 0 ? (\n            <div className=\"text-center py-8\">\n              <div className=\"w-16 h-16 bg-primary/20 rounded-full flex items-center justify-center mx-auto mb-4\">\n                <Smile className=\"w-8 h-8 text-primary\" />\n              </div>\n              <p className=\"text-muted-foreground\">\n                {isActive ? \"Start your conversation here\" : \"Chat will be available when consultation begins\"}\n              </p>\n            </div>\n          ) : (\n            messages.map((message) => (\n              <div key={message.id} className=\"flex flex-col space-y-1\" data-testid={`message-${message.id}`}>\n                <div className=\"flex items-end space-x-2\">\n                  <div className=\"flex-1\">\n                    <div className={`p-3 rounded-lg max-w-xs lg:max-w-md ${\n                      message.senderId === 'current-user' // This should be replaced with actual user ID check\n                        ? 'bg-primary text-primary-foreground ml-auto'\n                        : 'bg-muted text-foreground'\n                    }`}>\n                      {message.messageType === \"text\" && (\n                        <p className=\"text-sm whitespace-pre-wrap\">{message.message}</p>\n                      )}\n                      \n                      {message.messageType === \"image\" && message.fileUrl && (\n                        <div>\n                          <img \n                            src={message.fileUrl} \n                            alt={\"Shared image\"} \n                            className=\"rounded max-w-full h-auto mb-2\"\n                          />\n                          <p className=\"text-xs opacity-80\">{message.message}</p>\n                        </div>\n                      )}\n                      \n                      {message.messageType === \"voice\" && message.fileUrl && (\n                        <div className=\"flex items-center space-x-2\">\n                          <audio controls className=\"max-w-full\">\n                            <source src={message.fileUrl} type=\"audio/wav\" />\n                          </audio>\n                        </div>\n                      )}\n                      \n                      {message.messageType === \"video\" && message.fileUrl && (\n                        <div>\n                          <video \n                            controls \n                            className=\"rounded max-w-full h-auto mb-2\"\n                            style={{ maxHeight: '200px' }}\n                          >\n                            <source src={message.fileUrl} type=\"video/mp4\" />\n                          </video>\n                          <p className=\"text-xs opacity-80\">{message.message}</p>\n                        </div>\n                      )}\n                    </div>\n                    \n                    <div className=\"flex items-center space-x-2 mt-1\">\n                      <span className=\"text-xs text-muted-foreground\">\n                        {formatTime(message.timestamp)}\n                      </span>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            ))\n          )}\n          <div ref={messagesEndRef} />\n        </div>\n\n        {/* Message Input */}\n        {isActive && (\n          <div className=\"p-4 border-t border-primary/20\">\n            {isRecording ? (\n              <div className=\"flex items-center space-x-4 p-3 glass rounded-lg\">\n                <div className=\"flex items-center space-x-2 flex-1\">\n                  <div className=\"w-3 h-3 bg-red-500 rounded-full animate-pulse\" />\n                  <span className=\"text-sm text-foreground\">Recording...</span>\n                  <span className=\"text-sm font-mono text-primary\">\n                    {formatRecordingTime(recordingTime)}\n                  </span>\n                </div>\n                <Button\n                  variant=\"destructive\"\n                  size=\"sm\"\n                  onClick={stopRecording}\n                  data-testid=\"stop-recording-button\"\n                >\n                  Stop\n                </Button>\n              </div>\n            ) : (\n              <div className=\"flex items-end space-x-2\">\n                <div className=\"flex-1\">\n                  <Textarea\n                    value={messageText}\n                    onChange={(e) => setMessageText(e.target.value)}\n                    onKeyPress={handleKeyPress}\n                    placeholder={\"Type your message... (Press Enter to send, Shift+Enter for new line)\"}\n                    className=\"form-input min-h-[60px] max-h-32 resize-none\"\n                    disabled={sendMessageMutation.isPending}\n                    data-testid=\"message-input\"\n                  />\n                </div>\n                \n                <div className=\"flex flex-col space-y-2\">\n                  {/* File Upload Options */}\n                  <div className=\"flex space-x-1\">\n                    <input\n                      type=\"file\"\n                      ref={fileInputRef}\n                      onChange={(e) => {\n                        const file = e.target.files?.[0];\n                        if (file) handleFileUpload(file);\n                      }}\n                      accept=\"image/*,video/*\"\n                      className=\"hidden\"\n                    />\n                    \n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => fileInputRef.current?.click()}\n                      className=\"glass p-2\"\n                      title=\"Upload Image/Video\"\n                      data-testid=\"file-upload-button\"\n                    >\n                      <Paperclip className=\"w-4 h-4\" />\n                    </Button>\n                    \n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={startRecording}\n                      className=\"glass p-2\"\n                      title={\"Record Voice Message\"}\n                      data-testid=\"record-voice-button\"\n                    >\n                      <Mic className=\"w-4 h-4\" />\n                    </Button>\n                  </div>\n                  \n                  {/* Send Button */}\n                  <Button\n                    onClick={handleSendMessage}\n                    disabled={!messageText.trim() || sendMessageMutation.isPending}\n                    className=\"neon-button p-2\"\n                    title={\"Send Message\"}\n                    data-testid=\"send-message-button\"\n                  >\n                    <Send className=\"w-4 h-4\" />\n                  </Button>\n                </div>\n              </div>\n            )}\n          </div>\n        )}\n      </GlassCard>\n    </div>\n  );\n}\n","size_bytes":13760},"client/src/components/consultation/video-call.tsx":{"content":"import { useEffect, useRef, useState } from \"react\";\nimport { GlassCard } from \"@/components/ui/glass-card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { \n  Video, \n  VideoOff, \n  Mic, \n  MicOff, \n  Phone, \n  PhoneOff, \n  Settings, \n  Users,\n  Monitor,\n  Volume2,\n  VolumeX,\n  Camera,\n  CameraOff\n} from \"lucide-react\";\nimport { initializeJitsi, JitsiMeetInstance } from \"@/lib/jitsi\";\nimport { useToast } from \"@/hooks/use-toast\";\n\n\ninterface VideoCallProps {\n  consultationId: string;\n  isAstrologer: boolean;\n  onEndCall: () => void;\n}\n\nexport default function VideoCall({ consultationId, isAstrologer, onEndCall }: VideoCallProps) {\n  const jitsiContainerRef = useRef<HTMLDivElement>(null);\n  const [jitsiInstance, setJitsiInstance] = useState<JitsiMeetInstance | null>(null);\n  const [isVideoEnabled, setIsVideoEnabled] = useState(true);\n  const [isAudioEnabled, setIsAudioEnabled] = useState(true);\n  const [isCallActive, setIsCallActive] = useState(false);\n  const [participants, setParticipants] = useState(1);\n  const [videoQuality, setVideoQuality] = useState(\"auto\");\n  const [selectedBackground, setSelectedBackground] = useState(\"none\");\n  const { toast } = useToast();\n\n  const backgrounds = [\n    { value: \"none\", label: \"No Background\" },\n    { value: \"space1\", label: \"Cosmic Galaxy\" },\n    { value: \"space2\", label: \"Starry Night\" },\n    { value: \"space3\", label: \"Nebula View\" },\n    { value: \"planets\", label: \"Solar System\" },\n    { value: \"astro1\", label: \"Zodiac Circle\" },\n    { value: \"astro2\", label: \"Sacred Geometry\" },\n  ];\n\n  const videoQualities = [\n    { value: \"auto\", label: \"Auto (Recommended)\" },\n    { value: \"240\", label: \"240p\" },\n    { value: \"360\", label: \"360p\" },\n    { value: \"480\", label: \"480p\" },\n    { value: \"720\", label: \"720p (HD)\" },\n    { value: \"1080\", label: \"1080p (Full HD)\" },\n  ];\n\n  useEffect(() => {\n    if (jitsiContainerRef.current) {\n      initializeJitsiMeet();\n    }\n\n    return () => {\n      if (jitsiInstance) {\n        jitsiInstance.dispose();\n      }\n    };\n  }, []);\n\n  const initializeJitsiMeet = async () => {\n    if (!jitsiContainerRef.current) return;\n\n    try {\n      const roomName = `consultation-${consultationId}`;\n      const displayName = isAstrologer ? \"Astrologer Arup Shastri (Jai Guru)\" : \"Client\";\n\n      const instance = await initializeJitsi({\n        parentNode: jitsiContainerRef.current,\n        roomName,\n        displayName,\n        configOverwrite: {\n          startWithAudioMuted: false,\n          startWithVideoMuted: false,\n          enableWelcomePage: false,\n          enableClosePage: false,\n          prejoinPageEnabled: false,\n          disableModeratorIndicator: false,\n          defaultLanguage: \"en\",\n          resolution: videoQuality === \"auto\" ? undefined : parseInt(videoQuality),\n          constraints: {\n            video: {\n              height: { \n                ideal: videoQuality === \"auto\" ? 720 : parseInt(videoQuality),\n                max: isAstrologer ? 1080 : 720\n              }\n            }\n          },\n          // Custom branding for astrologer\n          ...(isAstrologer && {\n            brandingRoomAlias: \"Jai Guru Astro Remedy\",\n            toolbarButtons: [\n              'microphone', 'camera', 'closedcaptions', 'desktop', \n              'fullscreen', 'fodeviceselection', 'hangup', 'profile',\n              'chat', 'recording', 'livestreaming', 'etherpad', \n              'sharedvideo', 'settings', 'raisehand', 'videoquality',\n              'filmstrip', 'invite', 'feedback', 'stats', 'shortcuts',\n              'tileview', 'videobackgroundblur', 'download', 'help'\n            ]\n          })\n        },\n        interfaceConfigOverwrite: {\n          SHOW_JITSI_WATERMARK: false,\n          SHOW_WATERMARK_FOR_GUESTS: false,\n          SHOW_BRAND_WATERMARK: false,\n          BRAND_WATERMARK_LINK: \"\",\n          SHOW_POWERED_BY: false,\n          DEFAULT_LOGO_URL: isAstrologer ? \"/logo-jg.png\" : \"\",\n          APP_NAME: \"Jai Guru Astro Remedy\",\n          NATIVE_APP_NAME: \"Jai Guru Astro Remedy\",\n          PROVIDER_NAME: \"Astrologer Arup Shastri\",\n          DISABLE_JOIN_LEAVE_NOTIFICATIONS: true,\n          DISABLE_PRESENCE_STATUS: false,\n          DISPLAY_WELCOME_PAGE_CONTENT: false,\n          DISPLAY_WELCOME_PAGE_TOOLBAR_ADDITIONAL_CONTENT: false,\n          HIDE_INVITE_MORE_HEADER: true,\n          JITSI_WATERMARK_LINK: \"\",\n          LANG_DETECTION: false,\n          LOCAL_THUMBNAIL_RATIO: 16 / 9,\n          MAXIMUM_ZOOMING_COEFFICIENT: 1.3,\n          MOBILE_APP_PROMO: false,\n          OPTIMAL_BROWSERS: [\"chrome\", \"chromium\", \"firefox\", \"nwjs\", \"electron\", \"safari\"],\n          POLICY_LOGO: null,\n          RECENT_LIST_ENABLED: false,\n          REMOTE_THUMBNAIL_RATIO: 1,\n          SETTINGS_SECTIONS: [\"devices\", \"language\", \"moderator\", \"profile\", \"calendar\"],\n          SHOW_CHROME_EXTENSION_BANNER: false,\n          TOOLBAR_TIMEOUT: 4000,\n          UNSUPPORTED_BROWSERS: [],\n          VIDEO_LAYOUT_FIT: \"both\"\n        },\n        onApiReady: (api) => {\n          setJitsiInstance(api);\n          setIsCallActive(true);\n\n          // Add event listeners\n          api.addEventListener('participantJoined', (participant: any) => {\n            setParticipants(prev => prev + 1);\n            toast({\n              title: \"Participant Joined\",\n              description: `${participant.displayName} has joined the consultation`,\n            });\n          });\n\n          api.addEventListener('participantLeft', (participant: any) => {\n            setParticipants(prev => Math.max(1, prev - 1));\n            toast({\n              title: \"Participant Left\",\n              description: `${participant.displayName} has left the consultation`,\n            });\n          });\n\n          api.addEventListener('videoConferenceJoined', () => {\n            setIsCallActive(true);\n            \n            // Apply astrologer-specific settings\n            if (isAstrologer) {\n              // Set custom avatar or background\n              if (selectedBackground !== \"none\") {\n                api.executeCommand('toggleVirtualBackground', selectedBackground);\n              }\n            }\n          });\n\n          api.addEventListener('videoConferenceLeft', () => {\n            setIsCallActive(false);\n            onEndCall();\n          });\n\n          api.addEventListener('audioMuteStatusChanged', (muted: boolean) => {\n            setIsAudioEnabled(!muted);\n          });\n\n          api.addEventListener('videoMuteStatusChanged', (muted: boolean) => {\n            setIsVideoEnabled(!muted);\n          });\n        }\n      });\n\n    } catch (error) {\n      console.error(\"Failed to initialize Jitsi Meet:\", error);\n      toast({\n        title: \"Video Call Error\",\n        description: \"Failed to initialize video call. Please check your connection.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const toggleVideo = () => {\n    if (jitsiInstance) {\n      jitsiInstance.executeCommand('toggleVideo');\n    }\n  };\n\n  const toggleAudio = () => {\n    if (jitsiInstance) {\n      jitsiInstance.executeCommand('toggleAudio');\n    }\n  };\n\n  const hangUp = () => {\n    if (jitsiInstance) {\n      jitsiInstance.executeCommand('hangup');\n    }\n    onEndCall();\n  };\n\n  const changeVideoQuality = (quality: string) => {\n    setVideoQuality(quality);\n    if (jitsiInstance) {\n      if (quality === \"auto\") {\n        jitsiInstance.executeCommand('setVideoQuality', -1);\n      } else {\n        jitsiInstance.executeCommand('setVideoQuality', parseInt(quality));\n      }\n    }\n  };\n\n  const changeBackground = (background: string) => {\n    setSelectedBackground(background);\n    if (jitsiInstance && background !== \"none\") {\n      jitsiInstance.executeCommand('toggleVirtualBackground', background);\n    } else if (jitsiInstance) {\n      jitsiInstance.executeCommand('toggleVirtualBackground', false);\n    }\n  };\n\n  return (\n    <div className=\"space-y-6\" data-testid=\"video-call\">\n      {/* Video Call Container */}\n      <GlassCard className=\"p-0 overflow-hidden min-h-[500px]\">\n        <div \n          ref={jitsiContainerRef} \n          className=\"w-full h-full min-h-[500px] rounded-xl overflow-hidden\"\n          data-testid=\"jitsi-container\"\n        />\n      </GlassCard>\n\n      {/* Controls */}\n      <GlassCard className=\"p-6\">\n        <div className=\"flex flex-col space-y-4\">\n          {/* Primary Controls */}\n          <div className=\"flex items-center justify-center space-x-4\">\n            <Button\n              variant={isAudioEnabled ? \"default\" : \"destructive\"}\n              size=\"lg\"\n              onClick={toggleAudio}\n              className=\"rounded-full w-12 h-12 p-0\"\n              data-testid=\"toggle-audio-button\"\n            >\n              {isAudioEnabled ? <Mic className=\"w-5 h-5\" /> : <MicOff className=\"w-5 h-5\" />}\n            </Button>\n\n            <Button\n              variant={isVideoEnabled ? \"default\" : \"destructive\"}\n              size=\"lg\"\n              onClick={toggleVideo}\n              className=\"rounded-full w-12 h-12 p-0\"\n              data-testid=\"toggle-video-button\"\n            >\n              {isVideoEnabled ? <Video className=\"w-5 h-5\" /> : <VideoOff className=\"w-5 h-5\" />}\n            </Button>\n\n            <Button\n              variant=\"destructive\"\n              size=\"lg\"\n              onClick={hangUp}\n              className=\"rounded-full w-12 h-12 p-0\"\n              data-testid=\"hang-up-button\"\n            >\n              <PhoneOff className=\"w-5 h-5\" />\n            </Button>\n          </div>\n\n          {/* Status Info */}\n          <div className=\"flex items-center justify-center space-x-6 text-sm text-muted-foreground\">\n            <div className=\"flex items-center space-x-2\">\n              <Users className=\"w-4 h-4\" />\n              <span data-testid=\"participant-count\">{participants} participant{participants !== 1 ? 's' : ''}</span>\n            </div>\n            {isCallActive && (\n              <div className=\"flex items-center space-x-2\">\n                <div className=\"w-2 h-2 bg-green-500 rounded-full animate-pulse\" />\n                <span>Call Active</span>\n              </div>\n            )}\n          </div>\n\n          {/* Advanced Controls */}\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 pt-4 border-t border-primary/20\">\n            <div>\n              <label className=\"block text-sm font-medium text-foreground mb-2\">\n                Video Quality\n              </label>\n              <Select value={videoQuality} onValueChange={changeVideoQuality}>\n                <SelectTrigger className=\"form-input\">\n                  <Monitor className=\"w-4 h-4 mr-2\" />\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent className=\"glass-card\">\n                  {videoQualities.map((quality) => (\n                    <SelectItem key={quality.value} value={quality.value}>\n                      {quality.label}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n\n            {isAstrologer && (\n              <div>\n                <label className=\"block text-sm font-medium text-foreground mb-2\">\n                  Background\n                </label>\n                <Select value={selectedBackground} onValueChange={changeBackground}>\n                  <SelectTrigger className=\"form-input\">\n                    <Camera className=\"w-4 h-4 mr-2\" />\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent className=\"glass-card\">\n                    {backgrounds.map((bg) => (\n                      <SelectItem key={bg.value} value={bg.value}>\n                        {bg.label}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n            )}\n          </div>\n\n          {/* Tips for Better Experience */}\n          <div className=\"glass p-4 rounded-lg\">\n            <h4 className=\"font-semibold text-foreground mb-2\">Tips for Better Experience</h4>\n            <ul className=\"text-sm text-muted-foreground space-y-1\">\n              <li>• Ensure stable internet connection for HD quality</li>\n              <li>• Use headphones to avoid echo</li>\n              <li>• Position camera at eye level for better interaction</li>\n              <li>• Keep good lighting on your face</li>\n              {isAstrologer && <li>• Use virtual backgrounds to maintain professional appearance</li>}\n            </ul>\n          </div>\n        </div>\n      </GlassCard>\n    </div>\n  );\n}\n","size_bytes":12691},"client/src/components/layout/cosmic-background.tsx":{"content":"import { useEffect, useState } from \"react\";\n\ninterface Star {\n  id: number;\n  top: string;\n  left: string;\n  animationDelay: string;\n}\n\ninterface Planet {\n  id: number;\n  top: string;\n  left: string;\n  width: string;\n  height: string;\n  background: string;\n  animationDuration: string;\n}\n\ninterface Comet {\n  id: number;\n  top: string;\n  left: string;\n  animationDelay: string;\n}\n\nexport default function CosmicBackground() {\n  const [stars, setStars] = useState<Star[]>([]);\n  const [planets, setPlanets] = useState<Planet[]>([]);\n  const [comets, setComets] = useState<Comet[]>([]);\n\n  useEffect(() => {\n    // Generate more stunning stars for a richer sky\n    const initialStars: Star[] = Array.from({ length: 150 }, (_, i) => ({\n      id: i,\n      top: `${Math.random() * 100}%`,\n      left: `${Math.random() * 100}%`,\n      animationDelay: `${Math.random() * 5}s`,\n    }));\n\n    // Generate 9 realistic planets with accurate colors and sizes\n    const initialPlanets: Planet[] = [\n      // Mercury (smallest, gray-brown)\n      {\n        id: 1,\n        top: \"12%\",\n        left: \"88%\",\n        width: \"24px\",\n        height: \"24px\",\n        background: \"radial-gradient(circle at 30% 30%, #8c7853, #5d4e37, #2c1810)\",\n        animationDuration: \"20s\",\n      },\n      // Venus (bright yellow-white)\n      {\n        id: 2,\n        top: \"25%\",\n        left: \"15%\",\n        width: \"32px\",\n        height: \"32px\",\n        background: \"radial-gradient(circle at 30% 30%, #ffd700, #ffb347, #ff8c00)\",\n        animationDuration: \"35s\",\n      },\n      // Earth (blue-green with clouds)\n      {\n        id: 3,\n        top: \"45%\",\n        left: \"80%\",\n        width: \"36px\",\n        height: \"36px\",\n        background: \"radial-gradient(circle at 30% 30%, #4169e1, #228b22, #0066cc, #1e90ff)\",\n        animationDuration: \"45s\",\n      },\n      // Mars (red planet)\n      {\n        id: 4,\n        top: \"65%\",\n        left: \"20%\",\n        width: \"28px\",\n        height: \"28px\",\n        background: \"radial-gradient(circle at 30% 30%, #cd5c5c, #a0522d, #8b0000)\",\n        animationDuration: \"55s\",\n      },\n      // Jupiter (gas giant, largest)\n      {\n        id: 5,\n        top: \"35%\",\n        left: \"45%\",\n        width: \"64px\",\n        height: \"64px\",\n        background: \"radial-gradient(circle at 30% 30%, #d2691e, #daa520, #b8860b, #8b4513)\",\n        animationDuration: \"75s\",\n      },\n      // Saturn (with ring effect)\n      {\n        id: 6,\n        top: \"80%\",\n        left: \"70%\",\n        width: \"56px\",\n        height: \"56px\",\n        background: \"radial-gradient(circle at 30% 30%, #faf0e6, #f4a460, #daa520)\",\n        animationDuration: \"85s\",\n      },\n      // Uranus (ice giant, blue-green)\n      {\n        id: 7,\n        top: \"8%\",\n        left: \"40%\",\n        width: \"44px\",\n        height: \"44px\",\n        background: \"radial-gradient(circle at 30% 30%, #4fd0e3, #00ced1, #008b8b)\",\n        animationDuration: \"95s\",\n      },\n      // Neptune (deep blue)\n      {\n        id: 8,\n        top: \"60%\",\n        left: \"5%\",\n        width: \"42px\",\n        height: \"42px\",\n        background: \"radial-gradient(circle at 30% 30%, #4169e1, #0000cd, #191970)\",\n        animationDuration: \"105s\",\n      },\n      // Pluto (small, distant)\n      {\n        id: 9,\n        top: \"88%\",\n        left: \"92%\",\n        width: \"20px\",\n        height: \"20px\",\n        background: \"radial-gradient(circle at 30% 30%, #deb887, #cd853f, #8b7355)\",\n        animationDuration: \"120s\",\n      },\n    ];\n\n    // Generate more dramatic natural comets\n    const initialComets: Comet[] = [\n      {\n        id: 1,\n        top: \"8%\",\n        left: \"60%\",\n        animationDelay: \"0s\",\n      },\n      {\n        id: 2,\n        top: \"30%\",\n        left: \"2%\",\n        animationDelay: \"4s\",\n      },\n      {\n        id: 3,\n        top: \"70%\",\n        left: \"50%\",\n        animationDelay: \"8s\",\n      },\n      {\n        id: 4,\n        top: \"90%\",\n        left: \"15%\",\n        animationDelay: \"12s\",\n      },\n      {\n        id: 5,\n        top: \"15%\",\n        left: \"95%\",\n        animationDelay: \"16s\",\n      },\n      {\n        id: 6,\n        top: \"5%\",\n        left: \"20%\",\n        animationDelay: \"20s\",\n      },\n      {\n        id: 7,\n        top: \"55%\",\n        left: \"85%\",\n        animationDelay: \"24s\",\n      },\n      {\n        id: 8,\n        top: \"75%\",\n        left: \"35%\",\n        animationDelay: \"28s\",\n      },\n      {\n        id: 9,\n        top: \"25%\",\n        left: \"80%\",\n        animationDelay: \"32s\",\n      },\n      {\n        id: 10,\n        top: \"85%\",\n        left: \"60%\",\n        animationDelay: \"36s\",\n      },\n    ];\n\n    setStars(initialStars);\n    setPlanets(initialPlanets);\n    setComets(initialComets);\n\n    // Continuous generation of new stars and comets\n    const cosmicInterval = setInterval(() => {\n      // Add new star\n      const newStar: Star = {\n        id: Date.now() + Math.random() * 10000,\n        top: `${Math.random() * 100}%`,\n        left: `${Math.random() * 100}%`,\n        animationDelay: \"0s\",\n      };\n\n      setStars(prevStars => {\n        const updatedStars = [...prevStars, newStar];\n        return updatedStars.slice(-200); // Keep max 200 stars\n      });\n\n      // Add new comet occasionally\n      if (Math.random() < 0.3) {\n        const newComet: Comet = {\n          id: Date.now() + Math.random() * 1000,\n          top: `${Math.random() * 100}%`,\n          left: `${Math.random() * 100}%`,\n          animationDelay: \"0s\",\n        };\n\n        setComets(prevComets => {\n          const updatedComets = [...prevComets, newComet];\n          return updatedComets.slice(-8); // Keep max 8 comets\n        });\n\n        // Cleanup comet after animation\n        setTimeout(() => {\n          setComets(prevComets => prevComets.filter(comet => comet.id !== newComet.id));\n        }, 8000);\n      }\n\n      // Cleanup star after animation\n      setTimeout(() => {\n        setStars(prevStars => prevStars.filter(star => star.id !== newStar.id));\n      }, 8000);\n    }, 3000);\n\n    return () => clearInterval(cosmicInterval);\n  }, []);\n\n  return (\n    <div className=\"cosmic-bg\">\n      {/* Enhanced Stars */}\n      {stars.map((star) => (\n        <div\n          key={star.id}\n          className=\"star animate-twinkle\"\n          style={{\n            top: star.top,\n            left: star.left,\n            animationDelay: star.animationDelay,\n            width: `${2 + Math.random() * 3}px`,\n            height: `${2 + Math.random() * 3}px`,\n            background: `radial-gradient(circle, hsl(${Math.random() * 60 + 180}, 100%, 90%), transparent)`,\n            boxShadow: `0 0 ${4 + Math.random() * 8}px hsl(${Math.random() * 60 + 180}, 100%, 70%)`,\n          }}\n        />\n      ))}\n\n      {/* 9 Realistic Planets */}\n      {planets.map((planet) => (\n        <div\n          key={planet.id}\n          className=\"planet animate-orbit\"\n          style={{\n            top: planet.top,\n            left: planet.left,\n            width: planet.width,\n            height: planet.height,\n            background: planet.background,\n            animationDuration: planet.animationDuration,\n            boxShadow: `0 0 ${parseInt(planet.width) / 2}px rgba(255, 255, 255, 0.3), \n                       0 0 ${parseInt(planet.width)}px rgba(255, 255, 255, 0.1)`,\n            border: '1px solid rgba(255, 255, 255, 0.1)',\n          }}\n        />\n      ))}\n\n      {/* Dramatic Comets */}\n      {comets.map((comet) => (\n        <div\n          key={comet.id}\n          className=\"comet animate-comet\"\n          style={{\n            top: comet.top,\n            left: comet.left,\n            animationDelay: comet.animationDelay,\n          }}\n        />\n      ))}\n\n      {/* Nebula Effects */}\n      <div className=\"absolute inset-0 bg-gradient-radial from-transparent via-purple-900/3 to-transparent animate-pulse\" />\n      <div className=\"absolute top-1/6 left-1/4 w-96 h-96 bg-gradient-radial from-yellow-500/5 via-purple-600/3 to-transparent rounded-full blur-3xl animate-float\" />\n      <div className=\"absolute bottom-1/4 right-1/5 w-80 h-80 bg-gradient-radial from-cyan-400/4 via-blue-600/2 to-transparent rounded-full blur-2xl animate-glow\" style={{ animationDelay: \"3s\" }} />\n      <div className=\"absolute top-2/3 left-1/6 w-64 h-64 bg-gradient-radial from-pink-500/3 via-purple-500/2 to-transparent rounded-full blur-3xl animate-pulse\" style={{ animationDelay: \"5s\" }} />\n\n      {/* Cosmic Dust */}\n      <div className=\"absolute inset-0 opacity-20\">\n        <div className=\"absolute top-0 left-0 w-full h-full bg-gradient-to-br from-yellow-200/5 via-transparent to-purple-300/5\" />\n      </div>\n    </div>\n  );\n}\n","size_bytes":8615},"client/src/components/layout/footer.tsx":{"content":"import { Link } from \"wouter\";\nimport { Mail, Phone, Globe, Facebook, Twitter, Instagram } from \"lucide-react\";\nimport { useLanguage } from \"@/contexts/LanguageContext\";\n\nexport default function Footer() {\n  const currentYear = new Date().getFullYear();\n  const { t } = useLanguage();\n\n  const quickLinks = [\n    { href: \"/\", label: t(\"home\") },\n    { href: \"/booking\", label: t(\"bookConsultation\") },\n    { href: \"/courses\", label: t(\"courses\") },\n    { href: \"/products\", label: t(\"products\") },\n  ];\n\n  const services = [\n    { href: \"/booking?type=video\", label: t(\"videoConsultation\") },\n    { href: \"/booking?type=audio\", label: t(\"audioConsultation\") },\n    { href: \"/booking?type=chat\", label: t(\"chatConsultation\") },\n    { href: \"/booking?type=in-person\", label: t(\"inPersonReading\") },\n  ];\n\n  const legalLinks = [\n    { href: \"/privacy\", label: t(\"privacyPolicy\") },\n    { href: \"/terms\", label: t(\"termsOfService\") },\n    { href: \"/disclaimer\", label: t(\"disclaimer\") },\n    { href: \"/refund\", label: t(\"refundPolicy\") },\n  ];\n\n  return (\n    <footer className=\"py-16 px-4 sm:px-6 lg:px-8 mt-16 relative z-10\" data-testid=\"footer\">\n      <div className=\"max-w-7xl mx-auto\">\n        <div className=\"glass-card rounded-2xl p-8 md:p-12\">\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-8\">\n            {/* Brand Section */}\n            <div className=\"md:col-span-1\">\n              <div className=\"flex items-center space-x-3 mb-6\">\n                <div className=\"w-12 h-12 rounded-lg bg-primary/20 border-2 border-dashed border-primary/50 flex items-center justify-center neon-border hover:bg-primary/30 transition-colors\">\n                  <span className=\"text-primary text-xs font-medium\">LOGO</span>\n                </div>\n                <span className=\"font-bold text-xl neon-text text-primary\">\n                  Jai Guru Astro Remedy\n                </span>\n              </div>\n              <p className=\"text-muted-foreground mb-6 text-sm leading-relaxed\">\n                Expert Vedic astrology consultations and cosmic guidance by Arup Shastri with 18+ years of experience.\n                Unlock the secrets of the universe with personalized readings and authentic astrological remedies.\n              </p>\n              <div className=\"flex space-x-4\">\n                <a \n                  href=\"#\" \n                  className=\"w-10 h-10 bg-primary rounded-full flex items-center justify-center neon-border hover:scale-110 transition-transform\"\n                  data-testid=\"social-facebook\"\n                  aria-label=\"Facebook\"\n                >\n                  <Facebook className=\"w-5 h-5 text-primary-foreground\" />\n                </a>\n                <a \n                  href=\"#\" \n                  className=\"w-10 h-10 bg-secondary rounded-full flex items-center justify-center hover:scale-110 transition-transform\"\n                  style={{ boxShadow: \"0 0 20px var(--secondary)\" }}\n                  data-testid=\"social-twitter\"\n                  aria-label=\"Twitter\"\n                >\n                  <Twitter className=\"w-5 h-5 text-secondary-foreground\" />\n                </a>\n                <a \n                  href=\"#\" \n                  className=\"w-10 h-10 bg-gradient-to-br from-purple-500 to-pink-500 rounded-full flex items-center justify-center neon-border hover:scale-110 transition-transform\"\n                  style={{ boxShadow: \"0 0 20px #e91e63\" }}\n                  data-testid=\"social-instagram\"\n                  aria-label=\"Instagram\"\n                >\n                  <Instagram className=\"w-5 h-5 text-white\" />\n                </a>\n              </div>\n            </div>\n\n            {/* Quick Links */}\n            <div>\n              <h4 className=\"font-bold text-lg mb-6 text-foreground\">{t(\"quickLinks\")}</h4>\n              <ul className=\"space-y-3\">\n                {quickLinks.map((link) => (\n                  <li key={link.href}>\n                    <Link \n                      href={link.href} \n                      className=\"text-muted-foreground hover:text-primary transition-colors text-sm\"\n                      data-testid={`footer-link-${link.href.replace(/[^a-zA-Z0-9]/g, \"-\")}`}\n                    >\n                      {link.label}\n                    </Link>\n                  </li>\n                ))}\n                <li>\n                  <Link \n                    href=\"/about\" \n                    className=\"text-muted-foreground hover:text-primary transition-colors text-sm\"\n                    data-testid=\"footer-link-about\"\n                  >\n                    {t(\"aboutArupShastri\")}\n                  </Link>\n                </li>\n              </ul>\n            </div>\n\n            {/* Services */}\n            <div>\n              <h4 className=\"font-bold text-lg mb-6 text-foreground\">{t(\"services\")}</h4>\n              <ul className=\"space-y-3\">\n                {services.map((service) => (\n                  <li key={service.href}>\n                    <Link \n                      href={service.href} \n                      className=\"text-muted-foreground hover:text-primary transition-colors text-sm\"\n                      data-testid={`footer-service-${service.href.replace(/[^a-zA-Z0-9]/g, \"-\")}`}\n                    >\n                      {service.label}\n                    </Link>\n                  </li>\n                ))}\n                <li>\n                  <Link \n                    href=\"/products\" \n                    className=\"text-muted-foreground hover:text-primary transition-colors text-sm\"\n                    data-testid=\"footer-service-remedies\"\n                  >\n                    {t(\"astrologicalRemedies\")}\n                  </Link>\n                </li>\n              </ul>\n            </div>\n\n            {/* Contact & Legal */}\n            <div>\n              <h4 className=\"font-bold text-lg mb-6 text-foreground\">{t(\"contactLegal\")}</h4>\n              <ul className=\"space-y-3 mb-6\">\n                <li className=\"text-muted-foreground text-sm\">\n                  <div className=\"flex items-center space-x-2\">\n                    <Mail className=\"w-4 h-4 text-primary\" />\n                    <span>info@jaiguruastroremedy.com</span>\n                  </div>\n                </li>\n                <li className=\"text-muted-foreground text-sm\">\n                  <div className=\"flex items-center space-x-2\">\n                    <Phone className=\"w-4 h-4 text-secondary\" />\n                    <span>+91 9999999999</span>\n                  </div>\n                </li>\n                <li className=\"text-muted-foreground text-sm\">\n                  <div className=\"flex items-center space-x-2\">\n                    <Globe className=\"w-6 h-6 text-accent\" style={{ \n                      filter: 'drop-shadow(0 0 8px hsl(279, 100%, 50%))',\n                      color: 'hsl(279, 100%, 50%)',\n                      strokeWidth: '2'\n                    }} />\n                    <span>{t(\"availableGlobally\")}</span>\n                  </div>\n                </li>\n              </ul>\n              \n              <div className=\"space-y-2\">\n                {legalLinks.map((link) => (\n                  <div key={link.href}>\n                    <Link \n                      href={link.href} \n                      className=\"text-muted-foreground hover:text-primary transition-colors text-xs block\"\n                      data-testid={`footer-legal-${link.href.replace(/[^a-zA-Z0-9]/g, \"-\")}`}\n                    >\n                      {link.label}\n                    </Link>\n                  </div>\n                ))}\n              </div>\n            </div>\n          </div>\n\n          {/* Bottom Section */}\n          <div className=\"border-t border-primary/20 mt-12 pt-8\">\n            <div className=\"flex flex-col md:flex-row justify-between items-center space-y-4 md:space-y-0\">\n              <div className=\"text-muted-foreground text-sm text-center md:text-left\">\n                © {currentYear} {t(\"copyrightText\")}\n              </div>\n              <div className=\"flex flex-col sm:flex-row items-center space-y-2 sm:space-y-0 sm:space-x-4 text-xs text-muted-foreground\">\n                <span>🌟 {t(\"yearsOfExcellence\")}</span>\n                <span className=\"hidden sm:block\">•</span>\n                <span>🔮 {t(\"trustedByClients\")}</span>\n              </div>\n            </div>\n            \n            {/* Disclaimer */}\n            <div className=\"mt-6 p-4 glass rounded-lg\">\n              <p className=\"text-xs text-muted-foreground text-center leading-relaxed\">\n                <strong>{t(\"importantDisclaimer\")}:</strong> {t(\"disclaimerText\")}\n              </p>\n            </div>\n          </div>\n        </div>\n      </div>\n    </footer>\n  );\n}\n","size_bytes":8758},"client/src/components/layout/navigation.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Link, useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Sheet, SheetContent, SheetTrigger } from \"@/components/ui/sheet\";\nimport { Menu, User, LogOut } from \"lucide-react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport CartDrawer from \"@/components/ui/cart-drawer\";\nimport { useLanguage } from \"@/contexts/LanguageContext\";\n\nexport default function Navigation() {\n  const [location] = useLocation();\n  const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false);\n  const { currentLanguage, setLanguage, t } = useLanguage();\n\n  // Check if user is authenticated\n  const { data: user } = useQuery({\n    queryKey: [\"/api/profile\"],\n    enabled: !!localStorage.getItem(\"token\"),\n  });\n\n  const isAuthenticated = !!localStorage.getItem(\"token\");\n\n  const handleLogout = () => {\n    localStorage.removeItem(\"token\");\n    window.location.href = \"/\";\n  };\n\n  const languages = [\n    // English (International)\n    { value: \"en\", label: \"English\" },\n    \n    // Major Indian Languages\n    { value: \"hi\", label: \"हिंदी (Hindi)\" },\n    { value: \"bn\", label: \"বাংলা (Bengali)\" },\n    { value: \"te\", label: \"తెలుగు (Telugu)\" },\n    { value: \"mr\", label: \"मराठी (Marathi)\" },\n    { value: \"ta\", label: \"தமிழ் (Tamil)\" },\n    { value: \"gu\", label: \"ગુજરાતી (Gujarati)\" },\n    { value: \"kn\", label: \"ಕನ್ನಡ (Kannada)\" },\n    { value: \"or\", label: \"ଓଡ଼ିଆ (Odia)\" },\n    { value: \"pa\", label: \"ਪੰਜਾਬੀ (Punjabi)\" },\n    { value: \"ml\", label: \"മലയാളം (Malayalam)\" },\n    { value: \"as\", label: \"অসমীয়া (Assamese)\" },\n    { value: \"ur\", label: \"اردو (Urdu)\" },\n    { value: \"sa\", label: \"संस्कृतम् (Sanskrit)\" },\n    \n    // Major World Languages\n    { value: \"es\", label: \"Español (Spanish)\" },\n    { value: \"fr\", label: \"Français (French)\" },\n    { value: \"de\", label: \"Deutsch (German)\" },\n    { value: \"it\", label: \"Italiano (Italian)\" },\n    { value: \"pt\", label: \"Português (Portuguese)\" },\n    { value: \"ru\", label: \"Русский (Russian)\" },\n    { value: \"zh\", label: \"中文 (Chinese)\" },\n    { value: \"ja\", label: \"日本語 (Japanese)\" },\n    { value: \"ko\", label: \"한국어 (Korean)\" },\n    { value: \"ar\", label: \"العربية (Arabic)\" },\n    \n    // European Languages\n    { value: \"nl\", label: \"Nederlands (Dutch)\" },\n    { value: \"sv\", label: \"Svenska (Swedish)\" },\n    { value: \"no\", label: \"Norsk (Norwegian)\" },\n    { value: \"da\", label: \"Dansk (Danish)\" },\n    { value: \"fi\", label: \"Suomi (Finnish)\" },\n    { value: \"pl\", label: \"Polski (Polish)\" },\n    { value: \"cs\", label: \"Čeština (Czech)\" },\n    { value: \"hu\", label: \"Magyar (Hungarian)\" },\n    { value: \"ro\", label: \"Română (Romanian)\" },\n    { value: \"el\", label: \"Ελληνικά (Greek)\" },\n    { value: \"tr\", label: \"Türkçe (Turkish)\" },\n    \n    // Middle Eastern & Central Asian\n    { value: \"fa\", label: \"فارسی (Persian)\" },\n    { value: \"he\", label: \"עברית (Hebrew)\" },\n    \n    // Southeast Asian\n    { value: \"th\", label: \"ไทย (Thai)\" },\n    { value: \"vi\", label: \"Tiếng Việt (Vietnamese)\" },\n    { value: \"id\", label: \"Bahasa Indonesia\" },\n    { value: \"ms\", label: \"Bahasa Melayu (Malay)\" },\n    { value: \"fil\", label: \"Filipino\" },\n    \n    // African Languages\n    { value: \"sw\", label: \"Kiswahili (Swahili)\" },\n    { value: \"af\", label: \"Afrikaans\" },\n    \n    // Additional Languages\n    { value: \"uk\", label: \"Українська (Ukrainian)\" },\n    { value: \"bg\", label: \"Български (Bulgarian)\" },\n    { value: \"hr\", label: \"Hrvatski (Croatian)\" },\n    { value: \"sk\", label: \"Slovenčina (Slovak)\" },\n    { value: \"sl\", label: \"Slovenščina (Slovenian)\" },\n    { value: \"et\", label: \"Eesti (Estonian)\" },\n    { value: \"lv\", label: \"Latviešu (Latvian)\" },\n    { value: \"lt\", label: \"Lietuvių (Lithuanian)\" },\n  ];\n\n  const navItems = [\n    { href: \"/\", label: t(\"home\") },\n    { href: \"/booking\", label: t(\"bookConsultation\") },\n    { href: \"/courses\", label: t(\"courses\") },\n    { href: \"/home-tuition\", label: t(\"homeTuition\") },\n    { href: \"/products\", label: t(\"products\") },\n  ];\n\n  // Only show Admin Dashboard on admin pages\n  if (location.startsWith('/admin')) {\n    navItems.push({ href: \"/admin\", label: t(\"adminDashboard\") });\n  }\n\n  return (\n    <nav className=\"fixed top-0 left-0 right-0 z-50 nav-glass\" data-testid=\"navigation\">\n      <div className=\"max-w-full mx-auto px-1 sm:px-2 lg:px-4\">\n        <div className=\"flex items-center justify-center h-16\">\n          {/* Logo */}\n          <Link href=\"/\" className=\"flex items-center space-x-3\" data-testid=\"logo-link\">\n            <div className=\"w-10 h-10 rounded-lg bg-primary/20 border-2 border-dashed border-primary/50 flex items-center justify-center neon-border hover:bg-primary/30 transition-colors\">\n              <span className=\"text-primary text-xs font-medium\">LOGO</span>\n            </div>\n            <span className=\"font-bold text-xl neon-text text-primary hidden md:block whitespace-nowrap\">\n              Jai Guru Astro Remedy\n            </span>\n          </Link>\n\n          {/* Navigation - Close to Logo */}\n          <div className=\"hidden lg:flex items-center space-x-6 ml-8\">\n            {navItems.map((item) => (\n              <Link\n                key={item.href}\n                href={item.href}\n                className={`text-foreground hover:text-primary transition-colors text-base font-medium whitespace-nowrap ${\n                  location === item.href ? \"text-primary\" : \"\"\n                }`}\n                data-testid={`nav-link-${item.label.toLowerCase().replace(/\\s+/g, \"-\")}`}\n              >\n                {item.label}\n              </Link>\n            ))}\n          </div>\n\n          {/* Right Side Actions - Close to Navigation */}\n          <div className=\"hidden lg:flex items-center space-x-4 ml-8\">\n            {/* Language Selector */}\n            <Select value={currentLanguage} onValueChange={(value) => setLanguage(value as any)} data-testid=\"language-selector\">\n              <SelectTrigger className=\"w-32 form-input text-base\">\n                <SelectValue />\n              </SelectTrigger>\n              <SelectContent className=\"glass-card border-primary/20\">\n                {languages.map((lang) => (\n                  <SelectItem key={lang.value} value={lang.value}>\n                    {lang.label}\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n\n            <CartDrawer />\n            \n            {/* Auth Buttons */}\n            {isAuthenticated ? (\n              <div className=\"flex items-center space-x-4\">\n                <span className=\"text-foreground text-sm\">{t(\"welcome\")}, {user && typeof user === 'object' && 'fullName' in user ? (user.fullName || (user as any).username) : 'User'}</span>\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={handleLogout}\n                  className=\"text-foreground border-primary/30 hover:bg-primary/10\"\n                  data-testid=\"logout-button\"\n                >\n                  <LogOut className=\"w-4 h-4 mr-2\" />\n                  {t(\"logout\")}\n                </Button>\n              </div>\n            ) : (\n              <div className=\"flex items-center space-x-4\">\n                <Link href=\"/mobile-login\">\n                  <Button variant=\"outline\" size=\"sm\" className=\"text-foreground border-primary/30 hover:bg-primary/10\" data-testid=\"login-button\">\n                    <User className=\"w-4 h-4 mr-2\" />\n                    {t(\"login\")}\n                  </Button>\n                </Link>\n                <Link href=\"/booking\">\n                  <Button className=\"neon-button text-primary-foreground font-semibold\" data-testid=\"book-consultation-button\">\n                    {t(\"bookConsultation\")}\n                  </Button>\n                </Link>\n              </div>\n            )}\n          </div>\n\n          {/* Mobile Menu Button */}\n          <Sheet open={isMobileMenuOpen} onOpenChange={setIsMobileMenuOpen}>\n            <SheetTrigger asChild>\n              <Button variant=\"outline\" size=\"sm\" className=\"md:hidden\" data-testid=\"mobile-menu-button\">\n                <Menu className=\"w-5 h-5\" />\n              </Button>\n            </SheetTrigger>\n            <SheetContent side=\"right\" className=\"glass-card w-full sm:w-80\">\n              <div className=\"flex flex-col space-y-6 mt-6\">\n                {/* Mobile Navigation Links */}\n                <div className=\"space-y-4\">\n                  {navItems.map((item) => (\n                    <Link\n                      key={item.href}\n                      href={item.href}\n                      className={`block text-foreground hover:text-primary transition-colors py-2 ${\n                        location === item.href ? \"text-primary font-semibold\" : \"\"\n                      }`}\n                      onClick={() => setIsMobileMenuOpen(false)}\n                      data-testid={`mobile-nav-link-${item.label.toLowerCase().replace(/\\s+/g, \"-\")}`}\n                    >\n                      {item.label}\n                    </Link>\n                  ))}\n                </div>\n\n                {/* Mobile Language Selector */}\n                <div>\n                  <label className=\"block text-sm font-medium text-foreground mb-2\">Language</label>\n                  <Select value={currentLanguage} onValueChange={(value) => setLanguage(value as any)}>\n                    <SelectTrigger className=\"w-full form-input\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent className=\"glass-card border-primary/20\">\n                      {languages.map((lang) => (\n                        <SelectItem key={lang.value} value={lang.value}>\n                          {lang.label}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                {/* Mobile Auth Buttons */}\n                <div className=\"space-y-3 pt-4 border-t border-primary/20\">\n                  {isAuthenticated ? (\n                    <>\n                      <div className=\"text-foreground text-sm\">{t(\"welcome\")}, {user && typeof user === 'object' && 'fullName' in user ? (user.fullName || (user as any).username) : 'User'}</div>\n                      <Button\n                        variant=\"outline\"\n                        className=\"w-full text-foreground border-primary/30 hover:bg-primary/10\"\n                        onClick={handleLogout}\n                        data-testid=\"mobile-logout-button\"\n                      >\n                        <LogOut className=\"w-4 h-4 mr-2\" />\n                        {t(\"logout\")}\n                      </Button>\n                    </>\n                  ) : (\n                    <>\n                      <Link href=\"/login\" className=\"block\" onClick={() => setIsMobileMenuOpen(false)}>\n                        <Button variant=\"outline\" className=\"w-full text-foreground border-primary/30 hover:bg-primary/10\" data-testid=\"mobile-login-button\">\n                          <User className=\"w-4 h-4 mr-2\" />\n                          {t(\"login\")}\n                          Login\n                        </Button>\n                      </Link>\n                      <Link href=\"/booking\" className=\"block\" onClick={() => setIsMobileMenuOpen(false)}>\n                        <Button className=\"w-full neon-button text-primary-foreground font-semibold\" data-testid=\"mobile-book-consultation-button\">\n                          Book Consultation\n                        </Button>\n                      </Link>\n                    </>\n                  )}\n                </div>\n              </div>\n            </SheetContent>\n          </Sheet>\n        </div>\n      </div>\n    </nav>\n  );\n}\n","size_bytes":12133},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/glass-card.tsx":{"content":"import { cn } from \"@/lib/utils\";\nimport { forwardRef } from \"react\";\n\nexport interface GlassCardProps extends React.HTMLAttributes<HTMLDivElement> {\n  variant?: \"default\" | \"primary\" | \"secondary\" | \"accent\";\n  hover?: boolean;\n}\n\nconst GlassCard = forwardRef<HTMLDivElement, GlassCardProps>(\n  ({ className, variant = \"default\", hover = false, children, ...props }, ref) => {\n    const baseClasses = \"backdrop-blur-xl border rounded-xl transition-all duration-300\";\n    \n    const variants = {\n      default: \"glass-card\",\n      primary: \"glass-card border-primary/10 shadow-lg shadow-primary/5\",\n      secondary: \"glass-card border-secondary/10 shadow-lg shadow-secondary/5\", \n      accent: \"glass-card border-accent/10 shadow-lg shadow-accent/5\",\n    };\n\n    const hoverEffects = hover ? \"hover:scale-[1.02] hover:shadow-2xl hover:backdrop-blur-2xl\" : \"\";\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          baseClasses,\n          variants[variant],\n          hoverEffects,\n          className\n        )}\n        {...props}\n      >\n        {children}\n      </div>\n    );\n  }\n);\n\nGlassCard.displayName = \"GlassCard\";\n\nexport { GlassCard };\n","size_bytes":1167},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/neon-button.tsx":{"content":"import { cn } from \"@/lib/utils\";\nimport { Button, ButtonProps } from \"@/components/ui/button\";\nimport { forwardRef } from \"react\";\n\nexport interface NeonButtonProps extends ButtonProps {\n  variant?: \"primary\" | \"secondary\" | \"accent\" | \"gradient\";\n  glow?: boolean;\n  pulse?: boolean;\n}\n\nconst NeonButton = forwardRef<HTMLButtonElement, NeonButtonProps>(\n  ({ className, variant = \"gradient\", glow = true, pulse = false, children, ...props }, ref) => {\n    const baseClasses = \"font-semibold transition-all duration-300 transform hover:scale-105\";\n    \n    const variants = {\n      primary: \"bg-primary text-primary-foreground shadow-lg shadow-primary/30 hover:shadow-primary/50\",\n      secondary: \"bg-secondary text-secondary-foreground shadow-lg shadow-secondary/30 hover:shadow-secondary/50\",\n      accent: \"bg-accent text-accent-foreground shadow-lg shadow-accent/30 hover:shadow-accent/50\",\n      gradient: \"neon-button text-primary-foreground\",\n    };\n\n    const glowEffect = glow ? \"hover:shadow-2xl\" : \"\";\n    const pulseEffect = pulse ? \"animate-pulse-neon\" : \"\";\n\n    return (\n      <Button\n        ref={ref}\n        className={cn(\n          baseClasses,\n          variants[variant],\n          glowEffect,\n          pulseEffect,\n          className\n        )}\n        {...props}\n      >\n        {children}\n      </Button>\n    );\n  }\n);\n\nNeonButton.displayName = \"NeonButton\";\n\nexport { NeonButton };\n","size_bytes":1411},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/pages/admin/clients.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useLocation } from \"wouter\";\nimport { GlassCard } from \"@/components/ui/glass-card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Search, UserPlus, Mail, Phone, Calendar, MapPin } from \"lucide-react\";\n\n\nexport default function AdminClients() {\n  const [, setLocation] = useLocation();\n  const [searchTerm, setSearchTerm] = useState(\"\");\n\n  // Mock data for testing (bypass authentication)\n  const user = { isAdmin: true };\n  const users = [\n    { id: \"1\", fullName: \"Ravi Kumar\", email: \"ravi@email.com\", phoneNumber: \"+91-9876543210\", createdAt: \"2024-01-15T10:00:00Z\", isAdmin: false, consultationsCount: 5, totalSpent: 12500 },\n    { id: \"2\", fullName: \"Priya Sharma\", email: \"priya@email.com\", phoneNumber: \"+91-9876543211\", createdAt: \"2024-01-20T11:00:00Z\", isAdmin: false, consultationsCount: 3, totalSpent: 7500 }\n  ];\n  const isLoading = false;\n\n  // Bypass authentication for testing\n  // if (!user?.isAdmin) {\n  //   setLocation(\"/\");\n  //   return null;\n  // }\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen pt-16 flex items-center justify-center\">\n        <div className=\"animate-spin w-8 h-8 border-4 border-primary border-t-transparent rounded-full\" />\n      </div>\n    );\n  }\n\n  const filteredUsers = users?.filter((user: any) => \n    !user.isAdmin && (\n      user.fullName?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      user.email?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      user.phoneNumber?.includes(searchTerm)\n    )\n  ) || [];\n\n  return (\n    <div className=\"min-h-screen pt-16 pb-16\" data-testid=\"admin-clients\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        {/* Header */}\n        <div className=\"flex flex-col sm:flex-row justify-between items-start sm:items-center mb-8\">\n          <div>\n            <h1 className=\"text-4xl font-bold neon-text text-primary mb-2\">\n              \"Client Management\"\n            </h1>\n            <p className=\"text-muted-foreground\">\n              \"Manage your astrology clients and their information\"\n            </p>\n          </div>\n          <Button className=\"neon-button mt-4 sm:mt-0\" data-testid=\"add-client-button\">\n            <UserPlus className=\"w-4 h-4 mr-2\" />\n            \"Add New Client\"\n          </Button>\n        </div>\n\n        {/* Search and Filters */}\n        <GlassCard className=\"p-6 mb-8\">\n          <div className=\"flex flex-col sm:flex-row gap-4\">\n            <div className=\"relative flex-1\">\n              <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground w-4 h-4\" />\n              <Input\n                placeholder={\"Search clients by name, email, or phone...\"}\n                value={searchTerm}\n                onChange={(e) => setSearchTerm(e.target.value)}\n                className=\"pl-10 form-input\"\n                data-testid=\"search-clients\"\n              />\n            </div>\n            <div className=\"flex gap-2\">\n              <Button variant=\"outline\" size=\"sm\" className=\"glass\">\n                All Clients ({filteredUsers.length})\n              </Button>\n              <Button variant=\"outline\" size=\"sm\" className=\"glass\">\n                Verified\n              </Button>\n              <Button variant=\"outline\" size=\"sm\" className=\"glass\">\n                Unverified\n              </Button>\n            </div>\n          </div>\n        </GlassCard>\n\n        {/* Clients Table */}\n        <GlassCard className=\"p-6\">\n          {filteredUsers.length === 0 ? (\n            <div className=\"text-center py-12\">\n              <UserPlus className=\"w-12 h-12 text-muted-foreground mx-auto mb-4\" />\n              <h3 className=\"text-lg font-semibold text-foreground mb-2\">No Clients Found</h3>\n              <p className=\"text-muted-foreground\">\n                {searchTerm ? \"Try adjusting your search criteria\" : \"Start by adding your first client\"}\n              </p>\n            </div>\n          ) : (\n            <div className=\"overflow-x-auto\">\n              <Table>\n                <TableHeader>\n                  <TableRow className=\"border-primary/20\">\n                    <TableHead className=\"text-foreground\">Client Info</TableHead>\n                    <TableHead className=\"text-foreground\">Contact</TableHead>\n                    <TableHead className=\"text-foreground\">Birth Details</TableHead>\n                    <TableHead className=\"text-foreground\">Status</TableHead>\n                    <TableHead className=\"text-foreground\">Joined</TableHead>\n                    <TableHead className=\"text-foreground\">Actions</TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {filteredUsers.map((client: any, index: number) => (\n                    <TableRow key={client.id} className=\"border-primary/10\" data-testid={`client-row-${index}`}>\n                      <TableCell>\n                        <div className=\"flex items-center space-x-3\">\n                          <div className=\"w-10 h-10 rounded-full bg-primary/20 flex items-center justify-center\">\n                            <span className=\"text-primary font-semibold\">\n                              {client.fullName?.charAt(0) || 'U'}\n                            </span>\n                          </div>\n                          <div>\n                            <p className=\"font-semibold text-foreground\" data-testid={`client-name-${index}`}>\n                              {client.fullName || 'Unknown'}\n                            </p>\n                            <p className=\"text-sm text-muted-foreground\">\n                              @{client.username}\n                            </p>\n                          </div>\n                        </div>\n                      </TableCell>\n                      <TableCell>\n                        <div className=\"space-y-1\">\n                          {client.email && (\n                            <div className=\"flex items-center text-sm text-muted-foreground\">\n                              <Mail className=\"w-3 h-3 mr-1\" />\n                              {client.email}\n                            </div>\n                          )}\n                          <div className=\"flex items-center text-sm text-muted-foreground\">\n                            <Phone className=\"w-3 h-3 mr-1\" />\n                            {client.countryCode} {client.phoneNumber}\n                          </div>\n                        </div>\n                      </TableCell>\n                      <TableCell>\n                        <div className=\"space-y-1\">\n                          {client.dateOfBirth && (\n                            <div className=\"flex items-center text-sm text-muted-foreground\">\n                              <Calendar className=\"w-3 h-3 mr-1\" />\n                              {new Date(client.dateOfBirth).toLocaleDateString()}\n                            </div>\n                          )}\n                          {client.placeOfBirth && (\n                            <div className=\"flex items-center text-sm text-muted-foreground\">\n                              <MapPin className=\"w-3 h-3 mr-1\" />\n                              {client.placeOfBirth}\n                            </div>\n                          )}\n                          {client.timeOfBirth && (\n                            <div className=\"text-sm text-muted-foreground\">\n                              Time: {client.timeOfBirth}\n                            </div>\n                          )}\n                        </div>\n                      </TableCell>\n                      <TableCell>\n                        <div className=\"flex flex-col space-y-1\">\n                          <Badge variant={client.isVerified ? \"default\" : \"secondary\"}>\n                            {client.isVerified ? \"Verified\" : \"Unverified\"}\n                          </Badge>\n                          <span className=\"text-xs text-muted-foreground\">\n                            {client.preferredLanguage?.toUpperCase() || 'EN'}\n                          </span>\n                        </div>\n                      </TableCell>\n                      <TableCell>\n                        <span className=\"text-sm text-muted-foreground\">\n                          {new Date(client.createdAt).toLocaleDateString()}\n                        </span>\n                      </TableCell>\n                      <TableCell>\n                        <div className=\"flex space-x-2\">\n                          <Button size=\"sm\" variant=\"outline\" className=\"glass text-xs\">\n                            View\n                          </Button>\n                          <Button size=\"sm\" variant=\"outline\" className=\"glass text-xs\">\n                            Edit\n                          </Button>\n                          <Button size=\"sm\" variant=\"outline\" className=\"glass text-xs\">\n                            History\n                          </Button>\n                        </div>\n                      </TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n            </div>\n          )}\n        </GlassCard>\n\n        {/* Client Statistics */}\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6 mt-8\">\n          <GlassCard className=\"p-6 text-center\">\n            <div className=\"text-2xl font-bold text-primary mb-2\">\n              {filteredUsers.filter((u: any) => u.isVerified).length}\n            </div>\n            <div className=\"text-sm text-muted-foreground\">Verified Clients</div>\n          </GlassCard>\n          <GlassCard className=\"p-6 text-center\">\n            <div className=\"text-2xl font-bold text-secondary mb-2\">\n              {filteredUsers.filter((u: any) => u.dateOfBirth).length}\n            </div>\n            <div className=\"text-sm text-muted-foreground\">Complete Profiles</div>\n          </GlassCard>\n          <GlassCard className=\"p-6 text-center\">\n            <div className=\"text-2xl font-bold text-accent mb-2\">\n              {filteredUsers.filter((u: any) => \n                new Date(u.createdAt) > new Date(Date.now() - 30 * 24 * 60 * 60 * 1000)\n              ).length}\n            </div>\n            <div className=\"text-sm text-muted-foreground\">New This Month</div>\n          </GlassCard>\n          <GlassCard className=\"p-6 text-center\">\n            <div className=\"text-2xl font-bold text-yellow-500 mb-2\">\n              {new Set(filteredUsers.map((u: any) => u.preferredLanguage)).size}\n            </div>\n            <div className=\"text-sm text-muted-foreground\">Languages</div>\n          </GlassCard>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":10956},"client/src/pages/admin/courses.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useLocation } from \"wouter\";\nimport { GlassCard } from \"@/components/ui/glass-card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { BookOpen, Plus, Users, Calendar, Edit, Trash2, Eye } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\n\nexport default function AdminCourses() {\n  const [, setLocation] = useLocation();\n  const [isCreateDialogOpen, setIsCreateDialogOpen] = useState(false);\n  const [newCourse, setNewCourse] = useState({\n    title: \"\",\n    description: \"\",\n    price: \"\",\n    maxStudents: \"100\",\n    level: \"beginner\",\n    teachingLanguage: \"en\",\n    modules: [],\n  });\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // Mock data for testing (bypass authentication)\n  const user = { isAdmin: true };\n  const courses = [\n    { id: \"1\", title: \"Vedic Astrology Basics\", description: \"Learn fundamental concepts of Vedic astrology\", price: 4999, level: \"beginner\", enrolledStudents: 45, maxStudents: 100 },\n    { id: \"2\", title: \"Advanced Birth Chart Analysis\", description: \"Master advanced chart reading techniques\", price: 7999, level: \"advanced\", enrolledStudents: 23, maxStudents: 50 }\n  ];\n  const isLoading = false;\n\n  const createCourseMutation = useMutation({\n    mutationFn: async (courseData: any) => {\n      return apiRequest(\"POST\", \"/api/courses\", courseData);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/courses\"] });\n      setIsCreateDialogOpen(false);\n      setNewCourse({\n        title: \"\",\n        description: \"\",\n        price: \"\",\n        maxStudents: \"100\",\n        level: \"beginner\",\n        teachingLanguage: \"en\",\n        modules: [],\n      });\n      toast({\n        title: \"Course Created\",\n        description: \"New course has been created successfully!\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to create course\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Bypass authentication for testing\n  // if (!user?.isAdmin) {\n  //   setLocation(\"/\");\n  //   return null;\n  // }\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen pt-16 flex items-center justify-center\">\n        <div className=\"animate-spin w-8 h-8 border-4 border-primary border-t-transparent rounded-full\" />\n      </div>\n    );\n  }\n\n  const handleCreateCourse = () => {\n    if (!newCourse.title || !newCourse.description || !newCourse.price) {\n      toast({\n        title: \"Error\",\n        description: \"Please fill in all required fields\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    createCourseMutation.mutate({\n      ...newCourse,\n      price: parseFloat(newCourse.price),\n      maxStudents: parseInt(newCourse.maxStudents),\n    });\n  };\n\n  const levelColors = {\n    beginner: \"bg-green-500/20 text-green-500\",\n    intermediate: \"bg-yellow-500/20 text-yellow-500\",\n    expert: \"bg-red-500/20 text-red-500\",\n  };\n\n  return (\n    <div className=\"min-h-screen pt-16 pb-16\" data-testid=\"admin-courses\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        {/* Header */}\n        <div className=\"flex flex-col sm:flex-row justify-between items-start sm:items-center mb-8\">\n          <div>\n            <h1 className=\"text-4xl font-bold neon-text text-primary mb-2\">\n              Course Management\n            </h1>\n            <p className=\"text-muted-foreground\">\n              Create and manage your astrology courses\n            </p>\n          </div>\n          \n          <Dialog open={isCreateDialogOpen} onOpenChange={setIsCreateDialogOpen}>\n            <DialogTrigger asChild>\n              <Button className=\"neon-button mt-4 sm:mt-0\" data-testid=\"create-course-button\">\n                <Plus className=\"w-4 h-4 mr-2\" />\n                Create Course\n              </Button>\n            </DialogTrigger>\n            <DialogContent className=\"glass-card max-w-2xl\">\n              <DialogHeader>\n                <DialogTitle className=\"text-primary\">Create New Course</DialogTitle>\n              </DialogHeader>\n              <div className=\"space-y-4\">\n                <div>\n                  <label className=\"block text-sm font-medium text-foreground mb-2\">\n                    Course Title *\n                  </label>\n                  <Input\n                    value={newCourse.title}\n                    onChange={(e) => setNewCourse({ ...newCourse, title: e.target.value })}\n                    placeholder=\"e.g., Astrology Fundamentals\"\n                    className=\"form-input\"\n                    data-testid=\"course-title-input\"\n                  />\n                </div>\n\n                <div>\n                  <label className=\"block text-sm font-medium text-foreground mb-2\">\n                    Description *\n                  </label>\n                  <Textarea\n                    value={newCourse.description}\n                    onChange={(e) => setNewCourse({ ...newCourse, description: e.target.value })}\n                    placeholder={\"Describe what students will learn...\"}\n                    className=\"form-input min-h-[100px]\"\n                    data-testid=\"course-description-input\"\n                  />\n                </div>\n\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div>\n                    <label className=\"block text-sm font-medium text-foreground mb-2\">\n                      Price (₹) *\n                    </label>\n                    <Input\n                      type=\"number\"\n                      value={newCourse.price}\n                      onChange={(e) => setNewCourse({ ...newCourse, price: e.target.value })}\n                      placeholder=\"15999\"\n                      className=\"form-input\"\n                      data-testid=\"course-price-input\"\n                    />\n                  </div>\n\n                  <div>\n                    <label className=\"block text-sm font-medium text-foreground mb-2\">\n                      Max Students\n                    </label>\n                    <Input\n                      type=\"number\"\n                      value={newCourse.maxStudents}\n                      onChange={(e) => setNewCourse({ ...newCourse, maxStudents: e.target.value })}\n                      placeholder=\"100\"\n                      className=\"form-input\"\n                      data-testid=\"course-max-students-input\"\n                    />\n                  </div>\n                </div>\n\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div>\n                    <label className=\"block text-sm font-medium text-foreground mb-2\">\n                      Level\n                    </label>\n                    <Select\n                      value={newCourse.level}\n                      onValueChange={(value) => setNewCourse({ ...newCourse, level: value })}\n                    >\n                      <SelectTrigger className=\"form-input\">\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent className=\"glass-card\">\n                        <SelectItem value=\"beginner\">Beginner</SelectItem>\n                        <SelectItem value=\"intermediate\">Intermediate</SelectItem>\n                        <SelectItem value=\"expert\">Expert</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n\n                  <div>\n                    <label className=\"block text-sm font-medium text-foreground mb-2\">\n                      Teaching Language\n                    </label>\n                    <Select\n                      value={newCourse.teachingLanguage}\n                      onValueChange={(value) => setNewCourse({ ...newCourse, teachingLanguage: value })}\n                    >\n                      <SelectTrigger className=\"form-input\">\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent className=\"glass-card\">\n                        <SelectItem value=\"en\">English</SelectItem>\n                        <SelectItem value=\"hi\">Hindi</SelectItem>\n                        <SelectItem value=\"bn\">Bengali</SelectItem>\n                        <SelectItem value=\"es\">Spanish</SelectItem>\n                        <SelectItem value=\"fr\">French</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                </div>\n\n                <div className=\"flex justify-end space-x-4 pt-4\">\n                  <Button\n                    variant=\"outline\"\n                    onClick={() => setIsCreateDialogOpen(false)}\n                    className=\"glass\"\n                  >\n                    Cancel\n                  </Button>\n                  <Button\n                    onClick={handleCreateCourse}\n                    disabled={createCourseMutation.isPending}\n                    className=\"neon-button\"\n                    data-testid=\"submit-course-button\"\n                  >\n                    {createCourseMutation.isPending ? \"Creating...\" : \"Create Course\"}\n                  </Button>\n                </div>\n              </div>\n            </DialogContent>\n          </Dialog>\n        </div>\n\n        {/* Course Statistics */}\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6 mb-8\">\n          <GlassCard className=\"p-6 text-center\">\n            <div className=\"text-2xl font-bold text-primary mb-2\">\n              {courses?.length || 0}\n            </div>\n            <div className=\"text-sm text-muted-foreground\">Total Courses</div>\n          </GlassCard>\n          <GlassCard className=\"p-6 text-center\">\n            <div className=\"text-2xl font-bold text-secondary mb-2\">\n              {courses?.filter((c: any) => c.isActive).length || 0}\n            </div>\n            <div className=\"text-sm text-muted-foreground\">Active Courses</div>\n          </GlassCard>\n          <GlassCard className=\"p-6 text-center\">\n            <div className=\"text-2xl font-bold text-accent mb-2\">\n              {courses?.reduce((total: number, course: any) => total + (course.currentStudents || 0), 0) || 0}\n            </div>\n            <div className=\"text-sm text-muted-foreground\">Total Students</div>\n          </GlassCard>\n          <GlassCard className=\"p-6 text-center\">\n            <div className=\"text-2xl font-bold text-yellow-500 mb-2\">\n              ₹{courses?.reduce((total: number, course: any) => total + (parseFloat(course.price) * (course.currentStudents || 0)), 0).toLocaleString() || 0}\n            </div>\n            <div className=\"text-sm text-muted-foreground\">Total Revenue</div>\n          </GlassCard>\n        </div>\n\n        {/* Courses Table */}\n        <GlassCard className=\"p-6\">\n          {!courses || courses.length === 0 ? (\n            <div className=\"text-center py-12\">\n              <BookOpen className=\"w-12 h-12 text-muted-foreground mx-auto mb-4\" />\n              <h3 className=\"text-lg font-semibold text-foreground mb-2\">No Courses Yet</h3>\n              <p className=\"text-muted-foreground mb-6\">\n                Create your first astrology course to start teaching students\n              </p>\n              <Button onClick={() => setIsCreateDialogOpen(true)} className=\"neon-button\">\n                <Plus className=\"w-4 h-4 mr-2\" />\n                Create First Course\n              </Button>\n            </div>\n          ) : (\n            <div className=\"overflow-x-auto\">\n              <Table>\n                <TableHeader>\n                  <TableRow className=\"border-primary/20\">\n                    <TableHead className=\"text-foreground\">Course</TableHead>\n                    <TableHead className=\"text-foreground\">Level</TableHead>\n                    <TableHead className=\"text-foreground\">Students</TableHead>\n                    <TableHead className=\"text-foreground\">Price</TableHead>\n                    <TableHead className=\"text-foreground\">Language</TableHead>\n                    <TableHead className=\"text-foreground\">Status</TableHead>\n                    <TableHead className=\"text-foreground\">Actions</TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {courses.map((course: any, index: number) => (\n                    <TableRow key={course.id} className=\"border-primary/10\" data-testid={`course-row-${index}`}>\n                      <TableCell>\n                        <div>\n                          <p className=\"font-semibold text-foreground\" data-testid={`course-title-${index}`}>\n                            {course.title}\n                          </p>\n                          <p className=\"text-sm text-muted-foreground line-clamp-2\">\n                            {course.description}\n                          </p>\n                        </div>\n                      </TableCell>\n                      <TableCell>\n                        <Badge className={levelColors[course.level as keyof typeof levelColors]}>\n                          {course.level}\n                        </Badge>\n                      </TableCell>\n                      <TableCell>\n                        <div className=\"flex items-center space-x-2\">\n                          <Users className=\"w-4 h-4 text-muted-foreground\" />\n                          <span className=\"text-foreground\">\n                            {course.currentStudents}/{course.maxStudents}\n                          </span>\n                        </div>\n                      </TableCell>\n                      <TableCell>\n                        <span className=\"font-semibold text-primary\">\n                          ₹{parseFloat(course.price).toLocaleString()}\n                        </span>\n                      </TableCell>\n                      <TableCell>\n                        <span className=\"text-sm text-muted-foreground uppercase\">\n                          {course.teachingLanguage}\n                        </span>\n                      </TableCell>\n                      <TableCell>\n                        <Badge variant={course.isActive ? \"default\" : \"secondary\"}>\n                          {course.isActive ? \"Active\" : \"Inactive\"}\n                        </Badge>\n                      </TableCell>\n                      <TableCell>\n                        <div className=\"flex space-x-2\">\n                          <Button size=\"sm\" variant=\"outline\" className=\"glass\">\n                            <Eye className=\"w-3 h-3\" />\n                          </Button>\n                          <Button size=\"sm\" variant=\"outline\" className=\"glass\">\n                            <Edit className=\"w-3 h-3\" />\n                          </Button>\n                          <Button size=\"sm\" variant=\"outline\" className=\"glass text-red-400\">\n                            <Trash2 className=\"w-3 h-3\" />\n                          </Button>\n                        </div>\n                      </TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n            </div>\n          )}\n        </GlassCard>\n      </div>\n    </div>\n  );\n}\n","size_bytes":15794},"client/src/pages/admin/dashboard.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { useEffect } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { GlassCard } from \"@/components/ui/glass-card\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { \n  Users, \n  BookOpen, \n  Package, \n  Calendar, \n  TrendingUp, \n  Clock,\n  DollarSign,\n  MessageCircle,\n  HelpCircle,\n  BarChart3,\n  Activity,\n  Star,\n  Globe,\n  Smartphone,\n  Video,\n  Headphones,\n  UserCheck,\n  AlertCircle,\n  CheckCircle,\n  Eye,\n  Settings,\n  Shield,\n  Home\n} from \"lucide-react\";\n\n\nexport default function AdminDashboard() {\n  const [location, setLocation] = useLocation();\n\n  // Mock data for testing (bypass API calls)\n  const user = { fullName: \"Admin User\", isAdmin: true };\n  const dashboardData = {\n    stats: {\n      totalUsers: 156,\n      monthlyRevenue: 48500,\n      totalConsultations: 89,\n      homeTuitionApplications: 23,\n      totalCourses: 12,\n      totalOrders: 67,\n      supportChats: 134,\n      faqViews: 456\n    },\n    upcomingConsultations: []\n  };\n  const isLoading = false;\n\n  // Temporarily bypass authentication for testing\n  // useEffect(() => {\n  //   if (!localStorage.getItem(\"token\")) {\n  //     setLocation(\"/login\");\n  //     return;\n  //   }\n    \n  //   if (user && typeof user === 'object' && 'isAdmin' in user && !user.isAdmin) {\n  //     setLocation(\"/\");\n  //     return;\n  //   }\n  // }, [user, setLocation]);\n\n  // if (!user || typeof user !== 'object' || !('isAdmin' in user) || !user.isAdmin) {\n  //   return (\n  //     <div className=\"min-h-screen pt-16 flex items-center justify-center\">\n  //       <GlassCard className=\"p-8 text-center\">\n  //         <h1 className=\"text-2xl font-bold text-foreground mb-4\">Access Denied</h1>\n  //         <p className=\"text-muted-foreground\">You need admin privileges to access this page.</p>\n  //       </GlassCard>\n  //     </div>\n  //   );\n  // }\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen pt-16 flex items-center justify-center\">\n        <div className=\"animate-spin w-8 h-8 border-4 border-primary border-t-transparent rounded-full\" />\n      </div>\n    );\n  }\n\n  const stats = (dashboardData as any)?.stats || {};\n  const upcomingConsultations = (dashboardData as any)?.upcomingConsultations || [];\n\n  // Enhanced stats with more business metrics\n  const statCards = [\n    {\n      title: \"Total Users\",\n      value: stats.totalUsers || 0,\n      icon: Users,\n      color: \"text-blue-400\",\n      bgColor: \"bg-blue-500/10\",\n      change: \"+12%\",\n      trend: \"up\"\n    },\n    {\n      title: \"Monthly Revenue\",\n      value: `₹${(stats.monthlyRevenue || 0).toLocaleString()}`,\n      icon: DollarSign,\n      color: \"text-green-400\",\n      bgColor: \"bg-green-500/10\",\n      change: \"+18%\",\n      trend: \"up\"\n    },\n    {\n      title: \"Consultations\",\n      value: stats.totalConsultations || 0,\n      icon: Video,\n      color: \"text-purple-400\",\n      bgColor: \"bg-purple-500/10\",\n      change: \"+8%\",\n      trend: \"up\"\n    },\n    {\n      title: \"Home Tuition\",\n      value: stats.homeTuitionApplications || 0,\n      icon: Home,\n      color: \"text-orange-400\",\n      bgColor: \"bg-orange-500/10\",\n      change: \"+15%\",\n      trend: \"up\"\n    },\n    {\n      title: \"Active Courses\",\n      value: stats.totalCourses || 0,\n      icon: BookOpen,\n      color: \"text-yellow-400\",\n      bgColor: \"bg-yellow-500/10\",\n      change: \"+5%\",\n      trend: \"up\"\n    },\n    {\n      title: \"Products Sold\",\n      value: stats.totalOrders || 0,\n      icon: Package,\n      color: \"text-pink-400\",\n      bgColor: \"bg-pink-500/10\",\n      change: \"+22%\",\n      trend: \"up\"\n    },\n    {\n      title: \"AI Chat Sessions\",\n      value: stats.supportChats || 0,\n      icon: MessageCircle,\n      color: \"text-cyan-400\",\n      bgColor: \"bg-cyan-500/10\",\n      change: \"+25%\",\n      trend: \"up\"\n    },\n    {\n      title: \"FAQ Views\",\n      value: stats.faqViews || 0,\n      icon: HelpCircle,\n      color: \"text-indigo-400\",\n      bgColor: \"bg-indigo-500/10\",\n      change: \"+8%\",\n      trend: \"up\"\n    }\n  ];\n\n  // Quick action cards with enhanced functionality\n  const quickActions = [\n    {\n      title: \"Client Management\",\n      description: \"View and manage user accounts\",\n      icon: Users,\n      route: \"/admin/clients\",\n      color: \"from-blue-500 to-cyan-500\"\n    },\n    {\n      title: \"Consultations\",\n      description: \"Manage appointments & sessions\",\n      icon: Calendar,\n      route: \"/admin/consultations\",\n      color: \"from-purple-500 to-pink-500\"\n    },\n    {\n      title: \"Course Management\",\n      description: \"Manage astrology courses\",\n      icon: BookOpen,\n      route: \"/admin/courses\",\n      color: \"from-yellow-500 to-orange-500\"\n    },\n    {\n      title: \"Home Tuition\",\n      description: \"Manage home tuition applications\",\n      icon: Home,\n      route: \"/admin/home-tuition\",\n      color: \"from-emerald-500 to-teal-500\"\n    },\n    {\n      title: \"Product Catalog\",\n      description: \"Manage remedies & products\",\n      icon: Package,\n      route: \"/admin/products\",\n      color: \"from-green-500 to-emerald-500\"\n    },\n    {\n      title: \"AI Support Chat\",\n      description: \"Monitor chatbot performance\",\n      icon: MessageCircle,\n      route: \"/admin/support-chat\",\n      color: \"from-cyan-500 to-blue-500\"\n    },\n    {\n      title: \"FAQ Management\",\n      description: \"Manage AI chatbot responses\",\n      icon: HelpCircle,\n      route: \"/admin/faqs\",\n      color: \"from-indigo-500 to-purple-500\"\n    },\n    {\n      title: \"Analytics\",\n      description: \"Revenue & performance insights\",\n      icon: BarChart3,\n      route: \"/admin/analytics\",\n      color: \"from-pink-500 to-rose-500\"\n    }\n  ];\n\n  // System status indicators\n  const systemStatus = [\n    { name: \"Server Status\", status: \"online\", color: \"bg-green-500\" },\n    { name: \"Payment Gateway\", status: \"active\", color: \"bg-green-500\" },\n    { name: \"Video Conferencing\", status: \"operational\", color: \"bg-green-500\" },\n    { name: \"SMS Service\", status: \"connected\", color: \"bg-green-500\" },\n    { name: \"Email Service\", status: \"operational\", color: \"bg-green-500\" },\n    { name: \"AI Chatbot\", status: \"active\", color: \"bg-green-500\" }\n  ];\n\n  // Recent activity data (mock data for now)\n  const recentActivities = [\n    {\n      type: \"consultation\",\n      message: \"New video consultation booked\",\n      user: \"Priya Sharma\",\n      time: \"2 minutes ago\",\n      icon: Video,\n      color: \"text-purple-400\"\n    },\n    {\n      type: \"order\",\n      message: \"Gemstone order placed\",\n      user: \"Rajesh Kumar\",\n      time: \"15 minutes ago\",\n      icon: Package,\n      color: \"text-green-400\"\n    },\n    {\n      type: \"course\",\n      message: \"Course enrollment completed\",\n      user: \"Anita Verma\",\n      time: \"1 hour ago\",\n      icon: BookOpen,\n      color: \"text-yellow-400\"\n    },\n    {\n      type: \"support\",\n      message: \"Support chat initiated\",\n      user: \"Anonymous User\",\n      time: \"2 hours ago\",\n      icon: MessageCircle,\n      color: \"text-cyan-400\"\n    }\n  ];\n\n  return (\n    <div className=\"min-h-screen pt-16 pb-16\" data-testid=\"admin-dashboard\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        {/* Header */}\n        <div className=\"mb-8\">\n          <h1 className=\"text-4xl font-bold neon-text text-primary mb-2\" data-testid=\"dashboard-title\">\n            Admin Dashboard\n          </h1>\n          <p className=\"text-muted-foreground\">\n            Welcome back, {user && typeof user === 'object' && 'fullName' in user ? (user as any).fullName : 'Admin'}. Here's what's happening with your astrology business.\n          </p>\n        </div>\n\n        {/* Enhanced Stats Grid */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\n          {statCards.map((stat, index) => (\n            <GlassCard key={index} className=\"p-6 hover:scale-105 transition-all duration-300 group\" data-testid={`stat-card-${index}`}>\n              <div className=\"flex items-center justify-between mb-4\">\n                <div className={`w-14 h-14 rounded-xl ${stat.bgColor} flex items-center justify-center group-hover:scale-110 transition-transform duration-300`}>\n                  <stat.icon className={`w-7 h-7 ${stat.color}`} />\n                </div>\n                <div className={`flex items-center space-x-1 text-sm ${\n                  stat.trend === 'up' ? 'text-green-400' : 'text-red-400'\n                }`}>\n                  <TrendingUp className={`w-4 h-4 ${stat.trend === 'down' ? 'rotate-180' : ''}`} />\n                  <span>{stat.change}</span>\n                </div>\n              </div>\n              <div>\n                <p className=\"text-sm text-muted-foreground mb-1\">{stat.title}</p>\n                <p className=\"text-2xl font-bold text-foreground group-hover:text-primary transition-colors\" data-testid={`stat-value-${index}`}>\n                  {stat.value}\n                </p>\n              </div>\n            </GlassCard>\n          ))}\n        </div>\n\n        {/* Quick Actions Grid */}\n        <div className=\"mb-8\">\n          <h3 className=\"text-2xl font-bold text-foreground mb-6\">Management Center</h3>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n            {quickActions.map((action, index) => (\n              <GlassCard \n                key={index} \n                className=\"p-6 cursor-pointer hover:scale-105 transition-all duration-300 group\"\n                onClick={(e) => {\n                  e.preventDefault();\n                  console.log('Navigating to:', action.route);\n                  setLocation(action.route);\n                }}\n                data-testid={`quick-action-${index}`}\n              >\n                <div className={`w-16 h-16 rounded-xl bg-gradient-to-br ${action.color} flex items-center justify-center mb-4 group-hover:scale-110 transition-transform duration-300`}>\n                  <action.icon className=\"w-8 h-8 text-white\" />\n                </div>\n                <h4 className=\"font-bold text-foreground mb-2 group-hover:text-primary transition-colors\">\n                  {action.title}\n                </h4>\n                <p className=\"text-sm text-muted-foreground\">\n                  {action.description}\n                </p>\n              </GlassCard>\n            ))}\n          </div>\n        </div>\n\n        {/* System Health & Performance */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8 mb-8\">\n          <GlassCard className=\"p-6\">\n            <div className=\"flex items-center justify-between mb-6\">\n              <h3 className=\"text-xl font-bold text-foreground\">System Health</h3>\n              <Shield className=\"w-6 h-6 text-green-400\" />\n            </div>\n            <div className=\"space-y-4\">\n              {systemStatus.map((status, index) => (\n                <div key={index} className=\"flex items-center justify-between\">\n                  <span className=\"text-muted-foreground\">{status.name}</span>\n                  <div className=\"flex items-center space-x-2\">\n                    <div className={`w-3 h-3 rounded-full ${status.color}`} />\n                    <Badge variant=\"outline\" className=\"text-xs\">\n                      {status.status}\n                    </Badge>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </GlassCard>\n\n          <GlassCard className=\"p-6\">\n            <div className=\"flex items-center justify-between mb-6\">\n              <h3 className=\"text-xl font-bold text-foreground\">Recent Activity</h3>\n              <Activity className=\"w-6 h-6 text-primary\" />\n            </div>\n            <div className=\"space-y-4\">\n              {recentActivities.map((activity, index) => (\n                <div key={index} className=\"flex items-center space-x-3\">\n                  <div className={`w-8 h-8 rounded-full bg-background flex items-center justify-center`}>\n                    <activity.icon className={`w-4 h-4 ${activity.color}`} />\n                  </div>\n                  <div className=\"flex-1\">\n                    <p className=\"text-sm font-medium text-foreground\">{activity.message}</p>\n                    <p className=\"text-xs text-muted-foreground\">{activity.user} • {activity.time}</p>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </GlassCard>\n        </div>\n\n        {/* Upcoming Consultations */}\n        <GlassCard className=\"p-6\">\n          <div className=\"flex items-center justify-between mb-6\">\n            <h3 className=\"text-xl font-bold text-foreground\">Upcoming Consultations</h3>\n            <Clock className=\"w-5 h-5 text-primary\" />\n          </div>\n          \n          {upcomingConsultations.length === 0 ? (\n            <div className=\"text-center py-8\">\n              <Calendar className=\"w-12 h-12 text-muted-foreground mx-auto mb-4\" />\n              <p className=\"text-muted-foreground\">No upcoming consultations scheduled</p>\n            </div>\n          ) : (\n            <div className=\"space-y-4\">\n              {upcomingConsultations.map((consultation: any, index: number) => (\n                <div\n                  key={consultation.id}\n                  className=\"glass p-4 rounded-lg\"\n                  data-testid={`upcoming-consultation-${index}`}\n                >\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center space-x-4\">\n                      <div className={`w-3 h-3 rounded-full ${\n                        consultation.type === 'video' ? 'bg-primary' :\n                        consultation.type === 'audio' ? 'bg-secondary' :\n                        consultation.type === 'chat' ? 'bg-accent' :\n                        'bg-yellow-500'\n                      }`} />\n                      <div>\n                        <p className=\"font-semibold text-foreground\">\n                          {consultation.type} consultation - {consultation.plan}\n                        </p>\n                        <p className=\"text-sm text-muted-foreground\">\n                          {new Date(consultation.scheduledAt).toLocaleString()}\n                        </p>\n                      </div>\n                    </div>\n                    <div className=\"text-right\">\n                      <p className=\"font-semibold text-primary\">₹{consultation.price}</p>\n                      <Badge variant={\n                        consultation.status === 'scheduled' ? 'default' :\n                        consultation.status === 'ongoing' ? 'secondary' :\n                        'outline'\n                      }>\n                        {consultation.status}\n                      </Badge>\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          )}\n        </GlassCard>\n      </div>\n    </div>\n  );\n}\n","size_bytes":14985},"client/src/pages/admin/products.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useLocation } from \"wouter\";\nimport { GlassCard } from \"@/components/ui/glass-card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Package, Plus, Edit, Trash2, Eye, Star } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\n\nexport default function AdminProducts() {\n  const [, setLocation] = useLocation();\n  const [isCreateDialogOpen, setIsCreateDialogOpen] = useState(false);\n  const [selectedCategory, setSelectedCategory] = useState(\"all\");\n  const [newProduct, setNewProduct] = useState({\n    name: \"\",\n    description: \"\",\n    category: \"gemstones\",\n    price: \"\",\n    currency: \"INR\",\n    stock: \"10\",\n    specifications: {},\n  });\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // Mock data for testing (bypass authentication)\n  const user = { isAdmin: true };\n  const products = [\n    { id: \"1\", name: \"Blue Sapphire\", description: \"Powerful gemstone for Saturn benefits\", category: \"gemstones\", price: 15000, stock: 5, rating: 4.8 },\n    { id: \"2\", name: \"Rudraksha Mala\", description: \"108 bead authentic rudraksha mala\", category: \"jewelry\", price: 2500, stock: 12, rating: 4.9 }\n  ];\n  const isLoading = false;\n\n  const createProductMutation = useMutation({\n    mutationFn: async (productData: any) => {\n      return apiRequest(\"POST\", \"/api/products\", productData);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/products\"] });\n      setIsCreateDialogOpen(false);\n      setNewProduct({\n        name: \"\",\n        description: \"\",\n        category: \"gemstones\",\n        price: \"\",\n        currency: \"INR\",\n        stock: \"10\",\n        specifications: {},\n      });\n      toast({\n        title: \"Product Created\",\n        description: \"New product has been added successfully!\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to create product\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Bypass authentication for testing\n  // if (!user?.isAdmin) {\n  //   setLocation(\"/\");\n  //   return null;\n  // }\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen pt-16 flex items-center justify-center\">\n        <div className=\"animate-spin w-8 h-8 border-4 border-primary border-t-transparent rounded-full\" />\n      </div>\n    );\n  }\n\n  const handleCreateProduct = () => {\n    if (!newProduct.name || !newProduct.description || !newProduct.price) {\n      toast({\n        title: \"Error\",\n        description: \"Please fill in all required fields\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    createProductMutation.mutate({\n      ...newProduct,\n      price: parseFloat(newProduct.price),\n      stock: parseInt(newProduct.stock),\n    });\n  };\n\n  const categories = [\n    { value: \"all\", label: \"All Categories\" },\n    { value: \"gemstones\", label: \"Gemstones\" },\n    { value: \"yantras\", label: \"Yantras\" },\n    { value: \"malas\", label: \"Malas\" },\n    { value: \"books\", label: \"Books\" },\n    { value: \"kits\", label: \"Remedy Kits\" },\n  ];\n\n  const categoryColors = {\n    gemstones: \"bg-purple-500/20 text-purple-500\",\n    yantras: \"bg-yellow-500/20 text-yellow-500\",\n    malas: \"bg-green-500/20 text-green-500\",\n    books: \"bg-blue-500/20 text-blue-500\",\n    kits: \"bg-red-500/20 text-red-500\",\n  };\n\n  const filteredProducts = selectedCategory === \"all\" \n    ? products \n    : products?.filter((product: any) => product.category === selectedCategory);\n\n  return (\n    <div className=\"min-h-screen pt-16 pb-16\" data-testid=\"admin-products\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        {/* Header */}\n        <div className=\"flex flex-col sm:flex-row justify-between items-start sm:items-center mb-8\">\n          <div>\n            <h1 className=\"text-4xl font-bold neon-text text-primary mb-2\">\n              Product Management\n            </h1>\n            <p className=\"text-muted-foreground\">\n              Manage your astrological products and remedies\n            </p>\n          </div>\n          \n          <Dialog open={isCreateDialogOpen} onOpenChange={setIsCreateDialogOpen}>\n            <DialogTrigger asChild>\n              <Button className=\"neon-button mt-4 sm:mt-0\" data-testid=\"create-product-button\">\n                <Plus className=\"w-4 h-4 mr-2\" />\n                Add Product\n              </Button>\n            </DialogTrigger>\n            <DialogContent className=\"glass-card max-w-2xl\">\n              <DialogHeader>\n                <DialogTitle className=\"text-primary\">Add New Product</DialogTitle>\n              </DialogHeader>\n              <div className=\"space-y-4\">\n                <div>\n                  <label className=\"block text-sm font-medium text-foreground mb-2\">\n                    Product Name *\n                  </label>\n                  <Input\n                    value={newProduct.name}\n                    onChange={(e) => setNewProduct({ ...newProduct, name: e.target.value })}\n                    placeholder=\"e.g., Ruby Gemstone\"\n                    className=\"form-input\"\n                    data-testid=\"product-name-input\"\n                  />\n                </div>\n\n                <div>\n                  <label className=\"block text-sm font-medium text-foreground mb-2\">\n                    Description *\n                  </label>\n                  <Textarea\n                    value={newProduct.description}\n                    onChange={(e) => setNewProduct({ ...newProduct, description: e.target.value })}\n                    placeholder={\"Describe the product and its benefits...\"}\n                    className=\"form-input min-h-[100px]\"\n                    data-testid=\"product-description-input\"\n                  />\n                </div>\n\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div>\n                    <label className=\"block text-sm font-medium text-foreground mb-2\">\n                      Category *\n                    </label>\n                    <Select\n                      value={newProduct.category}\n                      onValueChange={(value) => setNewProduct({ ...newProduct, category: value })}\n                    >\n                      <SelectTrigger className=\"form-input\">\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent className=\"glass-card\">\n                        <SelectItem value=\"gemstones\">Gemstones</SelectItem>\n                        <SelectItem value=\"yantras\">Yantras</SelectItem>\n                        <SelectItem value=\"malas\">Malas</SelectItem>\n                        <SelectItem value=\"books\">Books</SelectItem>\n                        <SelectItem value=\"kits\">Remedy Kits</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n\n                  <div>\n                    <label className=\"block text-sm font-medium text-foreground mb-2\">\n                      Stock Quantity\n                    </label>\n                    <Input\n                      type=\"number\"\n                      value={newProduct.stock}\n                      onChange={(e) => setNewProduct({ ...newProduct, stock: e.target.value })}\n                      placeholder=\"10\"\n                      className=\"form-input\"\n                      data-testid=\"product-stock-input\"\n                    />\n                  </div>\n                </div>\n\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div>\n                    <label className=\"block text-sm font-medium text-foreground mb-2\">\n                      Price *\n                    </label>\n                    <Input\n                      type=\"number\"\n                      value={newProduct.price}\n                      onChange={(e) => setNewProduct({ ...newProduct, price: e.target.value })}\n                      placeholder=\"2500\"\n                      className=\"form-input\"\n                      data-testid=\"product-price-input\"\n                    />\n                  </div>\n\n                  <div>\n                    <label className=\"block text-sm font-medium text-foreground mb-2\">\n                      Currency\n                    </label>\n                    <Select\n                      value={newProduct.currency}\n                      onValueChange={(value) => setNewProduct({ ...newProduct, currency: value })}\n                    >\n                      <SelectTrigger className=\"form-input\">\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent className=\"glass-card\">\n                        <SelectItem value=\"INR\">INR (₹)</SelectItem>\n                        <SelectItem value=\"USD\">USD ($)</SelectItem>\n                        <SelectItem value=\"EUR\">EUR (€)</SelectItem>\n                        <SelectItem value=\"GBP\">GBP (£)</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                </div>\n\n                <div className=\"flex justify-end space-x-4 pt-4\">\n                  <Button\n                    variant=\"outline\"\n                    onClick={() => setIsCreateDialogOpen(false)}\n                    className=\"glass\"\n                  >\n                    Cancel\n                  </Button>\n                  <Button\n                    onClick={handleCreateProduct}\n                    disabled={createProductMutation.isPending}\n                    className=\"neon-button\"\n                    data-testid=\"submit-product-button\"\n                  >\n                    {createProductMutation.isPending ? \"Adding...\" : \"Add Product\"}\n                  </Button>\n                </div>\n              </div>\n            </DialogContent>\n          </Dialog>\n        </div>\n\n        {/* Category Filter */}\n        <GlassCard className=\"p-6 mb-8\">\n          <div className=\"flex flex-wrap gap-2\">\n            {categories.map((category) => (\n              <Button\n                key={category.value}\n                variant={selectedCategory === category.value ? \"default\" : \"outline\"}\n                size=\"sm\"\n                onClick={() => setSelectedCategory(category.value)}\n                className={selectedCategory === category.value ? \"neon-button\" : \"glass\"}\n                data-testid={`category-${category.value}`}\n              >\n                {category.label}\n                {category.value !== \"all\" && (\n                  <span className=\"ml-2 px-2 py-1 text-xs rounded-full bg-primary/20\">\n                    {products?.filter((p: any) => p.category === category.value).length || 0}\n                  </span>\n                )}\n              </Button>\n            ))}\n          </div>\n        </GlassCard>\n\n        {/* Product Statistics */}\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6 mb-8\">\n          <GlassCard className=\"p-6 text-center\">\n            <div className=\"text-2xl font-bold text-primary mb-2\">\n              {products?.length || 0}\n            </div>\n            <div className=\"text-sm text-muted-foreground\">Total Products</div>\n          </GlassCard>\n          <GlassCard className=\"p-6 text-center\">\n            <div className=\"text-2xl font-bold text-secondary mb-2\">\n              {products?.filter((p: any) => p.isActive).length || 0}\n            </div>\n            <div className=\"text-sm text-muted-foreground\">Active Products</div>\n          </GlassCard>\n          <GlassCard className=\"p-6 text-center\">\n            <div className=\"text-2xl font-bold text-accent mb-2\">\n              {products?.reduce((total: number, product: any) => total + (product.stock || 0), 0) || 0}\n            </div>\n            <div className=\"text-sm text-muted-foreground\">Total Stock</div>\n          </GlassCard>\n          <GlassCard className=\"p-6 text-center\">\n            <div className=\"text-2xl font-bold text-yellow-500 mb-2\">\n              {new Set(products?.map((p: any) => p.category)).size || 0}\n            </div>\n            <div className=\"text-sm text-muted-foreground\">Categories</div>\n          </GlassCard>\n        </div>\n\n        {/* Products Table */}\n        <GlassCard className=\"p-6\">\n          {!filteredProducts || filteredProducts.length === 0 ? (\n            <div className=\"text-center py-12\">\n              <Package className=\"w-12 h-12 text-muted-foreground mx-auto mb-4\" />\n              <h3 className=\"text-lg font-semibold text-foreground mb-2\">\n                {selectedCategory === \"all\" ? \"No Products Yet\" : `No ${selectedCategory} Products`}\n              </h3>\n              <p className=\"text-muted-foreground mb-6\">\n                Add your first astrological product to start selling\n              </p>\n              <Button onClick={() => setIsCreateDialogOpen(true)} className=\"neon-button\">\n                <Plus className=\"w-4 h-4 mr-2\" />\n                Add Product\n              </Button>\n            </div>\n          ) : (\n            <div className=\"overflow-x-auto\">\n              <Table>\n                <TableHeader>\n                  <TableRow className=\"border-primary/20\">\n                    <TableHead className=\"text-foreground\">Product</TableHead>\n                    <TableHead className=\"text-foreground\">Category</TableHead>\n                    <TableHead className=\"text-foreground\">Price</TableHead>\n                    <TableHead className=\"text-foreground\">Stock</TableHead>\n                    <TableHead className=\"text-foreground\">Status</TableHead>\n                    <TableHead className=\"text-foreground\">Actions</TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {filteredProducts.map((product: any, index: number) => (\n                    <TableRow key={product.id} className=\"border-primary/10\" data-testid={`product-row-${index}`}>\n                      <TableCell>\n                        <div className=\"flex items-center space-x-3\">\n                          <div className=\"w-12 h-12 rounded-lg bg-muted flex items-center justify-center\">\n                            <Package className=\"w-6 h-6 text-muted-foreground\" />\n                          </div>\n                          <div>\n                            <p className=\"font-semibold text-foreground\" data-testid={`product-name-${index}`}>\n                              {product.name}\n                            </p>\n                            <p className=\"text-sm text-muted-foreground line-clamp-1\">\n                              {product.description}\n                            </p>\n                          </div>\n                        </div>\n                      </TableCell>\n                      <TableCell>\n                        <Badge className={categoryColors[product.category as keyof typeof categoryColors]}>\n                          {product.category}\n                        </Badge>\n                      </TableCell>\n                      <TableCell>\n                        <span className=\"font-semibold text-primary\">\n                          {product.currency === \"INR\" ? \"₹\" : \"$\"}{parseFloat(product.price).toLocaleString()}\n                        </span>\n                      </TableCell>\n                      <TableCell>\n                        <div className=\"flex items-center space-x-2\">\n                          <span className={`text-sm ${product.stock > 5 ? 'text-green-500' : product.stock > 0 ? 'text-yellow-500' : 'text-red-500'}`}>\n                            {product.stock} units\n                          </span>\n                        </div>\n                      </TableCell>\n                      <TableCell>\n                        <Badge variant={product.isActive ? \"default\" : \"secondary\"}>\n                          {product.isActive ? \"Active\" : \"Inactive\"}\n                        </Badge>\n                      </TableCell>\n                      <TableCell>\n                        <div className=\"flex space-x-2\">\n                          <Button size=\"sm\" variant=\"outline\" className=\"glass\">\n                            <Eye className=\"w-3 h-3\" />\n                          </Button>\n                          <Button size=\"sm\" variant=\"outline\" className=\"glass\">\n                            <Edit className=\"w-3 h-3\" />\n                          </Button>\n                          <Button size=\"sm\" variant=\"outline\" className=\"glass text-red-400\">\n                            <Trash2 className=\"w-3 h-3\" />\n                          </Button>\n                        </div>\n                      </TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n            </div>\n          )}\n        </GlassCard>\n      </div>\n    </div>\n  );\n}\n","size_bytes":17416},"client/src/pages/auth/login.tsx":{"content":"import { useState } from \"react\";\nimport { Link, useLocation } from \"wouter\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { GlassCard } from \"@/components/ui/glass-card\";\nimport { NeonButton } from \"@/components/ui/neon-button\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Eye, EyeOff, User, Lock, Mail, Phone, Smartphone, Shield, AlertCircle } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\n// AutoTranslate import removed for fast loading\n// Temporary local phone codes (most common countries)\nconst globalPhoneCodes = [\n  { value: \"+91\", label: \"🇮🇳 +91\", country: \"India\", flag: \"🇮🇳\" },\n  { value: \"+1\", label: \"🇺🇸 +1\", country: \"United States\", flag: \"🇺🇸\" },\n  { value: \"+86\", label: \"🇨🇳 +86\", country: \"China\", flag: \"🇨🇳\" },\n  { value: \"+81\", label: \"🇯🇵 +81\", country: \"Japan\", flag: \"🇯🇵\" },\n  { value: \"+49\", label: \"🇩🇪 +49\", country: \"Germany\", flag: \"🇩🇪\" },\n  { value: \"+33\", label: \"🇫🇷 +33\", country: \"France\", flag: \"🇫🇷\" },\n  { value: \"+44\", label: \"🇬🇧 +44\", country: \"United Kingdom\", flag: \"🇬🇧\" },\n  { value: \"+82\", label: \"🇰🇷 +82\", country: \"South Korea\", flag: \"🇰🇷\" },\n  { value: \"+61\", label: \"🇦🇺 +61\", country: \"Australia\", flag: \"🇦🇺\" },\n  { value: \"+7\", label: \"🇷🇺 +7\", country: \"Russia\", flag: \"🇷🇺\" },\n  { value: \"+971\", label: \"🇦🇪 +971\", country: \"UAE\", flag: \"🇦🇪\" },\n  { value: \"+65\", label: \"🇸🇬 +65\", country: \"Singapore\", flag: \"🇸🇬\" },\n  { value: \"+52\", label: \"🇲🇽 +52\", country: \"Mexico\", flag: \"🇲🇽\" },\n  { value: \"+55\", label: \"🇧🇷 +55\", country: \"Brazil\", flag: \"🇧🇷\" },\n  { value: \"+39\", label: \"🇮🇹 +39\", country: \"Italy\", flag: \"🇮🇹\" },\n  { value: \"+34\", label: \"🇪🇸 +34\", country: \"Spain\", flag: \"🇪🇸\" },\n  { value: \"+31\", label: \"🇳🇱 +31\", country: \"Netherlands\", flag: \"🇳🇱\" },\n  { value: \"+41\", label: \"🇨🇭 +41\", country: \"Switzerland\", flag: \"🇨🇭\" },\n  { value: \"+46\", label: \"🇸🇪 +46\", country: \"Sweden\", flag: \"🇸🇪\" },\n  { value: \"+47\", label: \"🇳🇴 +47\", country: \"Norway\", flag: \"🇳🇴\" },\n];\n\nexport default function Login() {\n  const [, setLocation] = useLocation();\n  const [showPassword, setShowPassword] = useState(false);\n  const [rememberMe, setRememberMe] = useState(false);\n  const [loginMethod, setLoginMethod] = useState(\"mobile_otp\"); // mobile_otp, userid_password, mobile_password\n  const [otpSent, setOtpSent] = useState(false);\n  const [formData, setFormData] = useState({\n    // Mobile + OTP\n    countryCode: \"+91\",\n    phoneNumber: \"\",\n    otp: \"\",\n    \n    // User ID + Password\n    userId: \"\",\n    \n    // Mobile + Password  \n    password: \"\",\n  });\n  const { toast } = useToast();\n\n  // Send OTP Mutation for Mobile + OTP login\n  const sendLoginOtpMutation = useMutation({\n    mutationFn: async (phoneData: { countryCode: string; phoneNumber: string }) => {\n      const response = await apiRequest(\"POST\", \"/api/auth/send-login-otp\", { \n        ...phoneData, \n        purpose: \"login\" \n      });\n      return response.json();\n    },\n    onSuccess: () => {\n      setOtpSent(true);\n      toast({\n        title: \"OTP Sent\",\n        description: \"Please check your phone for the login verification code\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Failed to Send OTP\",\n        description: error.message || \"Unable to send verification code. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Main Login Mutation for all three methods\n  const loginMutation = useMutation({\n    mutationFn: async (loginData: any) => {\n      let endpoint = \"\";\n      let payload = {};\n\n      switch (loginMethod) {\n        case \"mobile_otp\":\n          endpoint = \"/api/auth/login-mobile-otp\";\n          payload = {\n            countryCode: loginData.countryCode,\n            phoneNumber: loginData.phoneNumber,\n            otp: loginData.otp,\n          };\n          break;\n        case \"userid_password\":\n          endpoint = \"/api/auth/login-userid-password\";\n          payload = {\n            userId: loginData.userId,\n            password: loginData.password,\n          };\n          break;\n        case \"mobile_password\":\n          endpoint = \"/api/auth/login-mobile-password\";\n          payload = {\n            countryCode: loginData.countryCode,\n            phoneNumber: loginData.phoneNumber,\n            password: loginData.password,\n          };\n          break;\n      }\n\n      const response = await apiRequest(\"POST\", endpoint, payload);\n      return response.json();\n    },\n    onSuccess: (data) => {\n      localStorage.setItem(\"token\", data.token);\n      toast({\n        title: \"Login Successful\",\n        description: `Welcome back, ${data.user.fullName || data.user.username}!`,\n      });\n      \n      // Redirect based on user role\n      if (data.user.isAdmin) {\n        setLocation(\"/admin/dashboard\");\n      } else {\n        setLocation(\"/\");\n      }\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Login Failed\",\n        description: error.message || \"Invalid credentials. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const sendOtp = () => {\n    if (!formData.phoneNumber) {\n      toast({\n        title: \"Phone Number Required\",\n        description: \"Please enter your phone number first\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    sendLoginOtpMutation.mutate({\n      countryCode: formData.countryCode,\n      phoneNumber: formData.phoneNumber,\n    });\n  };\n\n  const validateForm = () => {\n    switch (loginMethod) {\n      case \"mobile_otp\":\n        if (!formData.phoneNumber || !formData.otp) {\n          toast({\n            title: \"Validation Error\",\n            description: \"Please enter your phone number and OTP\",\n            variant: \"destructive\",\n          });\n          return false;\n        }\n        break;\n      case \"userid_password\":\n        if (!formData.userId || !formData.password) {\n          toast({\n            title: \"Validation Error\",\n            description: \"Please enter your User ID and password\",\n            variant: \"destructive\",\n          });\n          return false;\n        }\n        break;\n      case \"mobile_password\":\n        if (!formData.phoneNumber || !formData.password) {\n          toast({\n            title: \"Validation Error\",\n            description: \"Please enter your phone number and password\",\n            variant: \"destructive\",\n          });\n          return false;\n        }\n        break;\n    }\n    return true;\n  };\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!validateForm()) return;\n\n    loginMutation.mutate(formData);\n  };\n\n  return (\n    <div className=\"min-h-screen pt-16 pb-16 flex items-center justify-center\" data-testid=\"login-page\">\n      <div className=\"max-w-md w-full mx-4\">\n        <GlassCard className=\"p-8\">\n          {/* Header */}\n          <div className=\"text-center mb-8\">\n            <div className=\"w-16 h-16 rounded-lg bg-primary flex items-center justify-center neon-border mx-auto mb-4\">\n              <span className=\"text-primary-foreground font-bold text-2xl\">JG</span>\n            </div>\n            <h1 className=\"text-3xl font-bold neon-text text-primary mb-2\" data-testid=\"login-title\">\n              Welcome Back\n            </h1>\n            <p className=\"text-muted-foreground\">\n              Choose your preferred login method to access your cosmic journey\n            </p>\n          </div>\n\n          {/* Login Method Selection */}\n          <div className=\"mb-6\">\n            <Label className=\"text-foreground mb-3 block\">Choose Login Method</Label>\n            <div className=\"grid grid-cols-1 gap-3\">\n              <Button\n                type=\"button\"\n                variant={loginMethod === \"mobile_otp\" ? \"default\" : \"outline\"}\n                onClick={() => {\n                  setLoginMethod(\"mobile_otp\");\n                  setOtpSent(false);\n                  setFormData({ ...formData, otp: \"\" });\n                }}\n                className={`w-full text-left justify-start space-x-2 ${\n                  loginMethod === \"mobile_otp\" ? \"neon-border bg-primary\" : \"glass\"\n                }`}\n                data-testid=\"mobile-otp-method\"\n              >\n                <Smartphone className=\"w-4 h-4\" />\n                <div>\n                  <div className=\"font-medium\">Mobile + OTP</div>\n                  <div className=\"text-xs opacity-70\">Most secure option</div>\n                </div>\n              </Button>\n              \n              <Button\n                type=\"button\"\n                variant={loginMethod === \"userid_password\" ? \"default\" : \"outline\"}\n                onClick={() => setLoginMethod(\"userid_password\")}\n                className={`w-full text-left justify-start space-x-2 ${\n                  loginMethod === \"userid_password\" ? \"neon-border bg-primary\" : \"glass\"\n                }`}\n                data-testid=\"userid-password-method\"\n              >\n                <User className=\"w-4 h-4\" />\n                <div>\n                  <div className=\"font-medium\">User ID + Password</div>\n                  <div className=\"text-xs opacity-70\">Quick login</div>\n                </div>\n              </Button>\n              \n              <Button\n                type=\"button\"\n                variant={loginMethod === \"mobile_password\" ? \"default\" : \"outline\"}\n                onClick={() => setLoginMethod(\"mobile_password\")}\n                className={`w-full text-left justify-start space-x-2 ${\n                  loginMethod === \"mobile_password\" ? \"neon-border bg-primary\" : \"glass\"\n                }`}\n                data-testid=\"mobile-password-method\"\n              >\n                <Phone className=\"w-4 h-4\" />\n                <div>\n                  <div className=\"font-medium\">Mobile + Password</div>\n                  <div className=\"text-xs opacity-70\">Alternative login</div>\n                </div>\n              </Button>\n            </div>\n          </div>\n\n          {/* Login Form */}\n          <form onSubmit={handleSubmit} className=\"space-y-6\">\n            {/* Mobile + OTP Form */}\n            {loginMethod === \"mobile_otp\" && (\n              <div className=\"space-y-4\">\n                <div className=\"grid grid-cols-3 gap-3\">\n                  <div className=\"space-y-2\">\n                    <Label className=\"text-foreground\">Country Code *</Label>\n                    <Select\n                      value={formData.countryCode}\n                      onValueChange={(value) => setFormData({ ...formData, countryCode: value })}\n                    >\n                      <SelectTrigger className=\"form-input text-xs\">\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent className=\"glass-card max-h-40\">\n                        {globalPhoneCodes.slice(0, 20).map((code) => (\n                          <SelectItem key={code.value} value={code.value} className=\"text-xs\">\n                            {code.label}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                  </div>\n                  <div className=\"col-span-2 space-y-2\">\n                    <Label htmlFor=\"phoneNumber\" className=\"text-foreground\">\n                      Phone Number *\n                    </Label>\n                    <div className=\"relative\">\n                      <Phone className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground w-4 h-4\" />\n                      <Input\n                        id=\"phoneNumber\"\n                        value={formData.phoneNumber}\n                        onChange={(e) => setFormData({ ...formData, phoneNumber: e.target.value })}\n                        placeholder=\"Your phone number\"\n                        className=\"form-input pl-10\"\n                        required\n                        data-testid=\"phone-input\"\n                      />\n                    </div>\n                  </div>\n                </div>\n\n                {/* OTP Section */}\n                <div className=\"glass p-4 rounded-lg space-y-4\">\n                  <div className=\"flex items-center space-x-2\">\n                    <Shield className=\"w-4 h-4 text-primary\" />\n                    <span className=\"text-sm font-medium text-foreground\">Secure Login Verification</span>\n                  </div>\n                  \n                  {!otpSent ? (\n                    <Button\n                      type=\"button\"\n                      onClick={sendOtp}\n                      disabled={!formData.phoneNumber || sendLoginOtpMutation.isPending}\n                      className=\"w-full glass\"\n                      data-testid=\"send-login-otp-button\"\n                    >\n                      {sendLoginOtpMutation.isPending ? \"Sending...\" : \"Send Login Code\"}\n                    </Button>\n                  ) : (\n                    <div className=\"space-y-3\">\n                      <div className=\"space-y-2\">\n                        <Label htmlFor=\"otp\" className=\"text-foreground\">\n                          Enter Login Code *\n                        </Label>\n                        <Input\n                          id=\"otp\"\n                          value={formData.otp}\n                          onChange={(e) => setFormData({ ...formData, otp: e.target.value })}\n                          placeholder=\"6-digit code\"\n                          className=\"form-input\"\n                          maxLength={6}\n                          data-testid=\"login-otp-input\"\n                        />\n                      </div>\n                      <Button\n                        type=\"button\"\n                        variant=\"outline\"\n                        onClick={() => setOtpSent(false)}\n                        className=\"w-full glass text-xs\"\n                        data-testid=\"resend-login-otp-button\"\n                      >\n                        Resend Code\n                      </Button>\n                    </div>\n                  )}\n                </div>\n              </div>\n            )}\n\n            {/* User ID + Password Form */}\n            {loginMethod === \"userid_password\" && (\n              <div className=\"space-y-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"userId\" className=\"text-foreground\">\n                    User ID *\n                  </Label>\n                  <div className=\"relative\">\n                    <User className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground w-4 h-4\" />\n                    <Input\n                      id=\"userId\"\n                      type=\"text\"\n                      value={formData.userId}\n                      onChange={(e) => setFormData({ ...formData, userId: e.target.value })}\n                      placeholder=\"Enter your unique User ID\"\n                      className=\"form-input pl-10\"\n                      required\n                      data-testid=\"userid-input\"\n                    />\n                  </div>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"password\" className=\"text-foreground\">\n                    Password *\n                  </Label>\n                  <div className=\"relative\">\n                    <Lock className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground w-4 h-4\" />\n                    <Input\n                      id=\"password\"\n                      type={showPassword ? \"text\" : \"password\"}\n                      value={formData.password}\n                      onChange={(e) => setFormData({ ...formData, password: e.target.value })}\n                      placeholder=\"Enter your password\"\n                      className=\"form-input pl-10 pr-10\"\n                      required\n                      data-testid=\"password-input\"\n                    />\n                    <Button\n                      type=\"button\"\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      className=\"absolute right-2 top-1/2 transform -translate-y-1/2 h-8 w-8 p-0\"\n                      onClick={() => setShowPassword(!showPassword)}\n                      data-testid=\"toggle-password\"\n                    >\n                      {showPassword ? (\n                        <EyeOff className=\"w-4 h-4 text-muted-foreground\" />\n                      ) : (\n                        <Eye className=\"w-4 h-4 text-muted-foreground\" />\n                      )}\n                    </Button>\n                  </div>\n                </div>\n              </div>\n            )}\n\n            {/* Mobile + Password Form */}\n            {loginMethod === \"mobile_password\" && (\n              <div className=\"space-y-4\">\n                <div className=\"grid grid-cols-3 gap-3\">\n                  <div className=\"space-y-2\">\n                    <Label className=\"text-foreground\">Country Code *</Label>\n                    <Select\n                      value={formData.countryCode}\n                      onValueChange={(value) => setFormData({ ...formData, countryCode: value })}\n                    >\n                      <SelectTrigger className=\"form-input text-xs\">\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent className=\"glass-card max-h-40\">\n                        {globalPhoneCodes.slice(0, 20).map((code) => (\n                          <SelectItem key={code.value} value={code.value} className=\"text-xs\">\n                            {code.label}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                  </div>\n                  <div className=\"col-span-2 space-y-2\">\n                    <Label htmlFor=\"phoneNumber\" className=\"text-foreground\">\n                      Phone Number *\n                    </Label>\n                    <div className=\"relative\">\n                      <Phone className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground w-4 h-4\" />\n                      <Input\n                        id=\"phoneNumber\"\n                        value={formData.phoneNumber}\n                        onChange={(e) => setFormData({ ...formData, phoneNumber: e.target.value })}\n                        placeholder=\"Your phone number\"\n                        className=\"form-input pl-10\"\n                        required\n                        data-testid=\"phone-input\"\n                      />\n                    </div>\n                  </div>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"password\" className=\"text-foreground\">\n                    Password *\n                  </Label>\n                  <div className=\"relative\">\n                    <Lock className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground w-4 h-4\" />\n                    <Input\n                      id=\"password\"\n                      type={showPassword ? \"text\" : \"password\"}\n                      value={formData.password}\n                      onChange={(e) => setFormData({ ...formData, password: e.target.value })}\n                      placeholder=\"Enter your password\"\n                      className=\"form-input pl-10 pr-10\"\n                      required\n                      data-testid=\"password-input\"\n                    />\n                    <Button\n                      type=\"button\"\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      className=\"absolute right-2 top-1/2 transform -translate-y-1/2 h-8 w-8 p-0\"\n                      onClick={() => setShowPassword(!showPassword)}\n                      data-testid=\"toggle-password\"\n                    >\n                      {showPassword ? (\n                        <EyeOff className=\"w-4 h-4 text-muted-foreground\" />\n                      ) : (\n                        <Eye className=\"w-4 h-4 text-muted-foreground\" />\n                      )}\n                    </Button>\n                  </div>\n                </div>\n              </div>\n            )}\n\n            {/* Remember Me & Recovery Options */}\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center space-x-2\">\n                <Checkbox\n                  id=\"remember\"\n                  checked={rememberMe}\n                  onCheckedChange={(checked) => setRememberMe(!!checked)}\n                  data-testid=\"remember-checkbox\"\n                />\n                <Label htmlFor=\"remember\" className=\"text-sm text-muted-foreground cursor-pointer\">\n                  Remember me\n                </Label>\n              </div>\n              <div className=\"flex flex-col space-y-1\">\n                {loginMethod !== \"mobile_otp\" && (\n                  <Link href=\"/forgot-password\">\n                    <Button variant=\"link\" className=\"text-primary p-0 h-auto text-xs\">\n                      Forgot password?\n                    </Button>\n                  </Link>\n                )}\n                <Link href=\"/account-recovery\">\n                  <Button variant=\"link\" className=\"text-secondary p-0 h-auto text-xs\">\n                    Lost mobile access?\n                  </Button>\n                </Link>\n              </div>\n            </div>\n\n            {/* Security Notice based on login method */}\n            <div className=\"glass p-3 rounded-lg\">\n              <div className=\"flex items-start space-x-2\">\n                <AlertCircle className=\"w-4 h-4 text-yellow-500 mt-0.5\" />\n                <div className=\"text-xs text-muted-foreground\">\n                  {loginMethod === \"mobile_otp\" && (\n                    <span>Most secure login method. OTP expires in 10 minutes.</span>\n                  )}\n                  {loginMethod === \"userid_password\" && (\n                    <span>Use your unique User ID provided during registration.</span>\n                  )}\n                  {loginMethod === \"mobile_password\" && (\n                    <span>Alternative login using your registered mobile number.</span>\n                  )}\n                </div>\n              </div>\n            </div>\n\n            {/* Submit Button */}\n            <NeonButton\n              type=\"submit\"\n              className=\"w-full\"\n              disabled={loginMutation.isPending}\n              data-testid=\"login-submit-button\"\n            >\n              {loginMutation.isPending ? \"Signing In...\" : \"Sign In\"}\n            </NeonButton>\n          </form>\n\n          {/* Method Switch Shortcuts */}\n          <div className=\"relative my-6\">\n            <div className=\"absolute inset-0 flex items-center\">\n              <div className=\"w-full border-t border-primary/20\" />\n            </div>\n            <div className=\"relative flex justify-center text-sm\">\n              <span className=\"bg-card px-4 text-muted-foreground\">Quick Switch</span>\n            </div>\n          </div>\n\n          <div className=\"grid grid-cols-3 gap-2 text-xs\">\n            <Button\n              type=\"button\"\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={() => setLoginMethod(\"mobile_otp\")}\n              className={`glass ${loginMethod === \"mobile_otp\" ? \"ring-1 ring-primary\" : \"\"}`}\n              data-testid=\"switch-mobile-otp\"\n            >\n              📱 OTP\n            </Button>\n            <Button\n              type=\"button\"\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={() => setLoginMethod(\"userid_password\")}\n              className={`glass ${loginMethod === \"userid_password\" ? \"ring-1 ring-primary\" : \"\"}`}\n              data-testid=\"switch-userid\"\n            >\n              🆔 User ID\n            </Button>\n            <Button\n              type=\"button\"\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={() => setLoginMethod(\"mobile_password\")}\n              className={`glass ${loginMethod === \"mobile_password\" ? \"ring-1 ring-primary\" : \"\"}`}\n              data-testid=\"switch-mobile-pass\"\n            >\n              📞 Mobile\n            </Button>\n          </div>\n\n          {/* Register Link */}\n          <div className=\"text-center mt-6\">\n            <p className=\"text-muted-foreground text-sm\">\n              Don't have an account?{\" \"}\n              <Link href=\"/register\">\n                <Button variant=\"link\" className=\"text-primary p-0 h-auto text-sm\" data-testid=\"register-link\">\n                  Create account\n                </Button>\n              </Link>\n            </p>\n          </div>\n\n          {/* Demo Access */}\n          <div className=\"mt-6 p-4 glass rounded-lg\">\n            <p className=\"text-xs text-muted-foreground text-center mb-3\">\n              Demo Access (For Testing)\n            </p>\n            <div className=\"grid grid-cols-2 gap-2 text-xs\">\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                className=\"glass\"\n                onClick={() => {\n                  setLoginMethod(\"userid_password\");\n                  setFormData({ ...formData, userId: \"admin\", password: \"admin123\" });\n                }}\n                data-testid=\"admin-demo-button\"\n              >\n                Admin Demo\n              </Button>\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                className=\"glass\"\n                onClick={() => {\n                  setLoginMethod(\"userid_password\");\n                  setFormData({ ...formData, userId: \"demo\", password: \"demo123\" });\n                }}\n                data-testid=\"user-demo-button\"\n              >\n                User Demo\n              </Button>\n            </div>\n          </div>\n        </GlassCard>\n\n        {/* Security Notice */}\n        <div className=\"mt-6 text-center space-y-2\">\n          <p className=\"text-xs text-muted-foreground\">\n            🔒 Enterprise-grade security with multiple authentication options\n          </p>\n          <p className=\"text-xs text-muted-foreground\">\n            🔐 All login attempts are monitored and logged for your security\n          </p>\n          <p className=\"text-xs text-yellow-400\">\n            📱 Mobile + OTP is the most secure login method\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":26899},"client/src/pages/auth/register.tsx":{"content":"import { useState } from \"react\";\nimport { Link, useLocation } from \"wouter\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { GlassCard } from \"@/components/ui/glass-card\";\nimport { NeonButton } from \"@/components/ui/neon-button\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Eye, EyeOff, User, Mail, Phone, Lock, Calendar, MapPin, Shield, Smartphone, FileText, AlertTriangle } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\n// AutoTranslate import removed for fast loading\nimport { apiRequest } from \"@/lib/queryClient\";\n// Temporary local phone codes (most common countries)  \nconst globalPhoneCodes = [\n  { value: \"+91\", label: \"🇮🇳 +91\", country: \"India\", flag: \"🇮🇳\" },\n  { value: \"+1\", label: \"🇺🇸 +1\", country: \"United States\", flag: \"🇺🇸\" },\n  { value: \"+86\", label: \"🇨🇳 +86\", country: \"China\", flag: \"🇨🇳\" },\n  { value: \"+81\", label: \"🇯🇵 +81\", country: \"Japan\", flag: \"🇯🇵\" },\n  { value: \"+49\", label: \"🇩🇪 +49\", country: \"Germany\", flag: \"🇩🇪\" },\n  { value: \"+33\", label: \"🇫🇷 +33\", country: \"France\", flag: \"🇫🇷\" },\n  { value: \"+44\", label: \"🇬🇧 +44\", country: \"United Kingdom\", flag: \"🇬🇧\" },\n  { value: \"+82\", label: \"🇰🇷 +82\", country: \"South Korea\", flag: \"🇰🇷\" },\n  { value: \"+61\", label: \"🇦🇺 +61\", country: \"Australia\", flag: \"🇦🇺\" },\n  { value: \"+7\", label: \"🇷🇺 +7\", country: \"Russia\", flag: \"🇷🇺\" },\n  { value: \"+971\", label: \"🇦🇪 +971\", country: \"UAE\", flag: \"🇦🇪\" },\n  { value: \"+65\", label: \"🇸🇬 +65\", country: \"Singapore\", flag: \"🇸🇬\" },\n  { value: \"+52\", label: \"🇲🇽 +52\", country: \"Mexico\", flag: \"🇲🇽\" },\n  { value: \"+55\", label: \"🇧🇷 +55\", country: \"Brazil\", flag: \"🇧🇷\" },\n  { value: \"+39\", label: \"🇮🇹 +39\", country: \"Italy\", flag: \"🇮🇹\" },\n  { value: \"+34\", label: \"🇪🇸 +34\", country: \"Spain\", flag: \"🇪🇸\" },\n  { value: \"+31\", label: \"🇳🇱 +31\", country: \"Netherlands\", flag: \"🇳🇱\" },\n  { value: \"+41\", label: \"🇨🇭 +41\", country: \"Switzerland\", flag: \"🇨🇭\" },\n  { value: \"+46\", label: \"🇸🇪 +46\", country: \"Sweden\", flag: \"🇸🇪\" },\n  { value: \"+47\", label: \"🇳🇴 +47\", country: \"Norway\", flag: \"🇳🇴\" },\n  { value: \"+45\", label: \"🇩🇰 +45\", country: \"Denmark\", flag: \"🇩🇰\" },\n  { value: \"+358\", label: \"🇫🇮 +358\", country: \"Finland\", flag: \"🇫🇮\" },\n  { value: \"+43\", label: \"🇦🇹 +43\", country: \"Austria\", flag: \"🇦🇹\" },\n  { value: \"+32\", label: \"🇧🇪 +32\", country: \"Belgium\", flag: \"🇧🇪\" },\n  { value: \"+351\", label: \"🇵🇹 +351\", country: \"Portugal\", flag: \"🇵🇹\" },\n  { value: \"+30\", label: \"🇬🇷 +30\", country: \"Greece\", flag: \"🇬🇷\" },\n  { value: \"+48\", label: \"🇵🇱 +48\", country: \"Poland\", flag: \"🇵🇱\" },\n  { value: \"+420\", label: \"🇨🇿 +420\", country: \"Czech Republic\", flag: \"🇨🇿\" },\n  { value: \"+36\", label: \"🇭🇺 +36\", country: \"Hungary\", flag: \"🇭🇺\" },\n  { value: \"+40\", label: \"🇷🇴 +40\", country: \"Romania\", flag: \"🇷🇴\" },\n  { value: \"+359\", label: \"🇧🇬 +359\", country: \"Bulgaria\", flag: \"🇧🇬\" },\n  { value: \"+385\", label: \"🇭🇷 +385\", country: \"Croatia\", flag: \"🇭🇷\" },\n  { value: \"+381\", label: \"🇷🇸 +381\", country: \"Serbia\", flag: \"🇷🇸\" },\n  { value: \"+386\", label: \"🇸🇮 +386\", country: \"Slovenia\", flag: \"🇸🇮\" },\n  { value: \"+421\", label: \"🇸🇰 +421\", country: \"Slovakia\", flag: \"🇸🇰\" },\n  { value: \"+370\", label: \"🇱🇹 +370\", country: \"Lithuania\", flag: \"🇱🇹\" },\n  { value: \"+371\", label: \"🇱🇻 +371\", country: \"Latvia\", flag: \"🇱🇻\" },\n  { value: \"+372\", label: \"🇪🇪 +372\", country: \"Estonia\", flag: \"🇪🇪\" },\n  { value: \"+353\", label: \"🇮🇪 +353\", country: \"Ireland\", flag: \"🇮🇪\" },\n  { value: \"+354\", label: \"🇮🇸 +354\", country: \"Iceland\", flag: \"🇮🇸\" },\n  { value: \"+852\", label: \"🇭🇰 +852\", country: \"Hong Kong\", flag: \"🇭🇰\" },\n  { value: \"+853\", label: \"🇲🇴 +853\", country: \"Macao\", flag: \"🇲🇴\" },\n  { value: \"+886\", label: \"🇹🇼 +886\", country: \"Taiwan\", flag: \"🇹🇼\" },\n];\n\nexport default function Register() {\n  const [, setLocation] = useLocation();\n  const [showPassword, setShowPassword] = useState(false);\n  const [showConfirmPassword, setShowConfirmPassword] = useState(false);\n  const [step, setStep] = useState(1);\n  const [otpSent, setOtpSent] = useState(false);\n  const [otpVerified, setOtpVerified] = useState(false);\n  const [formData, setFormData] = useState({\n    // Basic Info\n    username: \"\",\n    email: \"\",\n    password: \"\",\n    confirmPassword: \"\",\n    fullName: \"\",\n    \n    // Contact Info\n    countryCode: \"+91\",\n    phoneNumber: \"\",\n    whatsappNumber: \"\",\n    \n    // OTP Verification\n    otp: \"\",\n    \n    // Birth Details\n    dateOfBirth: \"\",\n    timeOfBirth: \"\",\n    placeOfBirth: \"\",\n    \n    // Preferences\n    preferredLanguage: \"en\",\n    \n    // Legal Agreements (Required for legal security)\n    agreedToTerms: false,\n    agreedToPrivacy: false,\n    agreedToDisclaimer: false,\n    agreedToReturnPolicy: false,\n    dataProcessingConsent: false,\n    marketingConsent: false,\n  });\n  const { toast } = useToast();\n\n  const registerMutation = useMutation({\n    mutationFn: async (registerData: any) => {\n      const response = await apiRequest(\"POST\", \"/api/auth/register\", registerData);\n      return response.json();\n    },\n    onSuccess: (data) => {\n      localStorage.setItem(\"token\", data.token);\n      toast({\n        title: \"Registration Successful!\",\n        description: `Welcome to Jai Guru Astro Remedy, ${data.user.fullName}!`,\n      });\n      setLocation(\"/\");\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Registration Failed\",\n        description: error.message || \"Failed to create account. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // OTP Sending Mutation\n  const sendOtpMutation = useMutation({\n    mutationFn: async (phoneData: { countryCode: string; phoneNumber: string }) => {\n      const response = await apiRequest(\"POST\", \"/api/auth/send-otp\", phoneData);\n      return response.json();\n    },\n    onSuccess: () => {\n      setOtpSent(true);\n      toast({\n        title: \"OTP Sent\",\n        description: \"Please check your phone for the verification code\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Failed to Send OTP\",\n        description: error.message || \"Unable to send verification code. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // OTP Verification Mutation\n  const verifyOtpMutation = useMutation({\n    mutationFn: async (otpData: { countryCode: string; phoneNumber: string; otp: string }) => {\n      const response = await apiRequest(\"POST\", \"/api/auth/verify-otp\", otpData);\n      return response.json();\n    },\n    onSuccess: () => {\n      setOtpVerified(true);\n      toast({\n        title: \"Phone Verified\",\n        description: \"Your phone number has been successfully verified\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Invalid OTP\",\n        description: error.message || \"The verification code is incorrect. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const languages = [\n    { value: \"en\", label: \"English\" },\n    { value: \"hi\", label: \"हिंदी (Hindi)\" },\n    { value: \"bn\", label: \"বাংলা (Bengali)\" },\n    { value: \"es\", label: \"Español (Spanish)\" },\n    { value: \"fr\", label: \"Français (French)\" },\n    { value: \"de\", label: \"Deutsch (German)\" },\n    { value: \"zh\", label: \"中文 (Chinese)\" },\n    { value: \"ja\", label: \"日本語 (Japanese)\" },\n    { value: \"ko\", label: \"한국어 (Korean)\" },\n    { value: \"ar\", label: \"العربية (Arabic)\" },\n  ];\n\n  const validateStep1 = () => {\n    if (!formData.username || !formData.email || !formData.password || !formData.confirmPassword || !formData.fullName) {\n      toast({\n        title: \"Validation Error\",\n        description: \"Please fill in all required fields\",\n        variant: \"destructive\",\n      });\n      return false;\n    }\n\n    if (formData.password !== formData.confirmPassword) {\n      toast({\n        title: \"Password Mismatch\",\n        description: \"Passwords do not match\",\n        variant: \"destructive\",\n      });\n      return false;\n    }\n\n    if (formData.password.length < 6) {\n      toast({\n        title: \"Weak Password\",\n        description: \"Password must be at least 6 characters long\",\n        variant: \"destructive\",\n      });\n      return false;\n    }\n\n    return true;\n  };\n\n  const validateStep2 = () => {\n    if (!formData.phoneNumber) {\n      toast({\n        title: \"Validation Error\",\n        description: \"Phone number is required\",\n        variant: \"destructive\",\n      });\n      return false;\n    }\n    if (!otpVerified) {\n      toast({\n        title: \"Phone Verification Required\",\n        description: \"Please verify your phone number with OTP\",\n        variant: \"destructive\",\n      });\n      return false;\n    }\n    return true;\n  };\n\n  const validateStep3 = () => {\n    const requiredAgreements = [\n      formData.agreedToTerms,\n      formData.agreedToPrivacy,\n      formData.agreedToDisclaimer,\n      formData.agreedToReturnPolicy,\n      formData.dataProcessingConsent\n    ];\n\n    if (!requiredAgreements.every(Boolean)) {\n      toast({\n        title: \"Legal Agreements Required\",\n        description: \"All legal agreements must be accepted to proceed. This is required for your legal protection and ours.\",\n        variant: \"destructive\",\n      });\n      return false;\n    }\n    return true;\n  };\n\n  const sendOtp = () => {\n    if (!formData.phoneNumber) {\n      toast({\n        title: \"Phone Number Required\",\n        description: \"Please enter your phone number first\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    sendOtpMutation.mutate({\n      countryCode: formData.countryCode,\n      phoneNumber: formData.phoneNumber,\n    });\n  };\n\n  const verifyOtp = () => {\n    if (!formData.otp) {\n      toast({\n        title: \"OTP Required\",\n        description: \"Please enter the verification code\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    verifyOtpMutation.mutate({\n      countryCode: formData.countryCode,\n      phoneNumber: formData.phoneNumber,\n      otp: formData.otp,\n    });\n  };\n\n  const handleNext = () => {\n    if (step === 1 && validateStep1()) {\n      setStep(2);\n    } else if (step === 2 && validateStep2()) {\n      setStep(3);\n    } else if (step === 3 && validateStep3()) {\n      setStep(4);\n    }\n  };\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!validateStep3()) return;\n\n    const registerData = {\n      username: formData.username,\n      email: formData.email,\n      password: formData.password,\n      fullName: formData.fullName,\n      phoneNumber: formData.phoneNumber,\n      countryCode: formData.countryCode,\n      whatsappNumber: formData.whatsappNumber || formData.phoneNumber,\n      dateOfBirth: formData.dateOfBirth ? new Date(formData.dateOfBirth) : null,\n      timeOfBirth: formData.timeOfBirth,\n      placeOfBirth: formData.placeOfBirth,\n      preferredLanguage: formData.preferredLanguage,\n    };\n\n    registerMutation.mutate(registerData);\n  };\n\n  return (\n    <div className=\"min-h-screen pt-16 pb-16 flex items-center justify-center\" data-testid=\"register-page\">\n      <div className=\"max-w-md w-full mx-4\">\n        <GlassCard className=\"p-8\">\n          {/* Header */}\n          <div className=\"text-center mb-8\">\n            <div className=\"w-16 h-16 rounded-lg bg-primary flex items-center justify-center neon-border mx-auto mb-4\">\n              <span className=\"text-primary-foreground font-bold text-2xl\">JG</span>\n            </div>\n            <h1 className=\"text-3xl font-bold neon-text text-primary mb-2\" data-testid=\"register-title\">\n              Create Account\n            </h1>\n            <p className=\"text-muted-foreground\">\n              Join thousands discovering their cosmic destiny with expert guidance\n            </p>\n          </div>\n\n          {/* Progress Indicator */}\n          <div className=\"flex items-center justify-center mb-8\">\n            {[1, 2, 3, 4].map((stepNumber) => (\n              <div key={stepNumber} className=\"flex items-center\">\n                <div className={`w-8 h-8 rounded-full flex items-center justify-center text-sm font-semibold ${\n                  step >= stepNumber \n                    ? \"bg-primary text-primary-foreground neon-border\" \n                    : \"bg-muted text-muted-foreground\"\n                }`}>\n                  {stepNumber}\n                </div>\n                {stepNumber < 4 && (\n                  <div className={`w-12 h-0.5 mx-2 ${\n                    step > stepNumber ? \"bg-primary\" : \"bg-muted\"\n                  }`} />\n                )}\n              </div>\n            ))}\n          </div>\n\n          {/* Step Labels */}\n          <div className=\"flex items-center justify-center mb-6\">\n            <div className=\"text-xs text-muted-foreground text-center\">\n              {step === 1 && \"Basic Information\"}\n              {step === 2 && \"Phone Verification\"}\n              {step === 3 && \"Birth Details & Preferences\"}\n              {step === 4 && \"Legal Agreements\"}\n            </div>\n          </div>\n\n          <form onSubmit={step === 4 ? handleSubmit : undefined} className=\"space-y-6\">\n            {/* Step 1: Basic Information */}\n            {step === 1 && (\n              <div className=\"space-y-4\">\n                <h3 className=\"text-lg font-semibold text-foreground mb-4\">Basic Information</h3>\n                \n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"fullName\" className=\"text-foreground\">\n                    Full Name *\n                  </Label>\n                  <div className=\"relative\">\n                    <User className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground w-4 h-4\" />\n                    <Input\n                      id=\"fullName\"\n                      value={formData.fullName}\n                      onChange={(e) => setFormData({ ...formData, fullName: e.target.value })}\n                      placeholder=\"Enter your full name\"\n                      className=\"form-input pl-10\"\n                      required\n                      data-testid=\"full-name-input\"\n                    />\n                  </div>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"username\" className=\"text-foreground\">\n                    Username *\n                  </Label>\n                  <div className=\"relative\">\n                    <User className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground w-4 h-4\" />\n                    <Input\n                      id=\"username\"\n                      value={formData.username}\n                      onChange={(e) => setFormData({ ...formData, username: e.target.value })}\n                      placeholder=\"Choose a unique username\"\n                      className=\"form-input pl-10\"\n                      required\n                      data-testid=\"username-input\"\n                    />\n                  </div>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"email\" className=\"text-foreground\">\n                    Email Address *\n                  </Label>\n                  <div className=\"relative\">\n                    <Mail className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground w-4 h-4\" />\n                    <Input\n                      id=\"email\"\n                      type=\"email\"\n                      value={formData.email}\n                      onChange={(e) => setFormData({ ...formData, email: e.target.value })}\n                      placeholder=\"Enter your email address\"\n                      className=\"form-input pl-10\"\n                      required\n                      data-testid=\"email-input\"\n                    />\n                  </div>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"password\" className=\"text-foreground\">\n                    Password *\n                  </Label>\n                  <div className=\"relative\">\n                    <Lock className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground w-4 h-4\" />\n                    <Input\n                      id=\"password\"\n                      type={showPassword ? \"text\" : \"password\"}\n                      value={formData.password}\n                      onChange={(e) => setFormData({ ...formData, password: e.target.value })}\n                      placeholder=\"Create a strong password\"\n                      className=\"form-input pl-10 pr-10\"\n                      required\n                      data-testid=\"password-input\"\n                    />\n                    <Button\n                      type=\"button\"\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      className=\"absolute right-2 top-1/2 transform -translate-y-1/2 h-8 w-8 p-0\"\n                      onClick={() => setShowPassword(!showPassword)}\n                    >\n                      {showPassword ? (\n                        <EyeOff className=\"w-4 h-4 text-muted-foreground\" />\n                      ) : (\n                        <Eye className=\"w-4 h-4 text-muted-foreground\" />\n                      )}\n                    </Button>\n                  </div>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"confirmPassword\" className=\"text-foreground\">\n                    Confirm Password *\n                  </Label>\n                  <div className=\"relative\">\n                    <Lock className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground w-4 h-4\" />\n                    <Input\n                      id=\"confirmPassword\"\n                      type={showConfirmPassword ? \"text\" : \"password\"}\n                      value={formData.confirmPassword}\n                      onChange={(e) => setFormData({ ...formData, confirmPassword: e.target.value })}\n                      placeholder=\"Confirm your password\"\n                      className=\"form-input pl-10 pr-10\"\n                      required\n                      data-testid=\"confirm-password-input\"\n                    />\n                    <Button\n                      type=\"button\"\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      className=\"absolute right-2 top-1/2 transform -translate-y-1/2 h-8 w-8 p-0\"\n                      onClick={() => setShowConfirmPassword(!showConfirmPassword)}\n                    >\n                      {showConfirmPassword ? (\n                        <EyeOff className=\"w-4 h-4 text-muted-foreground\" />\n                      ) : (\n                        <Eye className=\"w-4 h-4 text-muted-foreground\" />\n                      )}\n                    </Button>\n                  </div>\n                </div>\n              </div>\n            )}\n\n            {/* Step 2: Phone Verification */}\n            {step === 2 && (\n              <div className=\"space-y-4\">\n                <h3 className=\"text-lg font-semibold text-foreground mb-4\">Phone Verification</h3>\n                \n                <div className=\"grid grid-cols-3 gap-3\">\n                  <div className=\"space-y-2\">\n                    <Label className=\"text-foreground\">Country Code *</Label>\n                    <Select\n                      value={formData.countryCode}\n                      onValueChange={(value) => setFormData({ ...formData, countryCode: value })}\n                    >\n                      <SelectTrigger className=\"form-input text-xs\">\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent className=\"glass-card max-h-40\">\n                        {globalPhoneCodes.map((code) => (\n                          <SelectItem key={code.value} value={code.value} className=\"text-xs\">\n                            {code.label}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                  </div>\n                  <div className=\"col-span-2 space-y-2\">\n                    <Label htmlFor=\"phoneNumber\" className=\"text-foreground\">\n                      Phone Number *\n                    </Label>\n                    <div className=\"relative\">\n                      <Phone className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground w-4 h-4\" />\n                      <Input\n                        id=\"phoneNumber\"\n                        value={formData.phoneNumber}\n                        onChange={(e) => setFormData({ ...formData, phoneNumber: e.target.value })}\n                        placeholder=\"Your phone number\"\n                        className=\"form-input pl-10\"\n                        required\n                        data-testid=\"phone-input\"\n                      />\n                    </div>\n                  </div>\n                </div>\n\n                {/* OTP Section */}\n                <div className=\"glass p-4 rounded-lg space-y-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center space-x-2\">\n                      <Smartphone className=\"w-4 h-4 text-primary\" />\n                      <span className=\"text-sm font-medium text-foreground\">Phone Verification</span>\n                    </div>\n                    {otpVerified && (\n                      <div className=\"flex items-center space-x-1 text-green-500\">\n                        <Shield className=\"w-4 h-4\" />\n                        <span className=\"text-xs\">Verified</span>\n                      </div>\n                    )}\n                  </div>\n                  \n                  {!otpSent ? (\n                    <Button\n                      type=\"button\"\n                      onClick={sendOtp}\n                      disabled={!formData.phoneNumber || sendOtpMutation.isPending}\n                      className=\"w-full glass\"\n                      data-testid=\"send-otp-button\"\n                    >\n                      {sendOtpMutation.isPending ? \"Sending...\" : \"Send Verification Code\"}\n                    </Button>\n                  ) : !otpVerified ? (\n                    <div className=\"space-y-3\">\n                      <div className=\"space-y-2\">\n                        <Label htmlFor=\"otp\" className=\"text-foreground\">\n                          Enter Verification Code *\n                        </Label>\n                        <div className=\"flex space-x-2\">\n                          <Input\n                            id=\"otp\"\n                            value={formData.otp}\n                            onChange={(e) => setFormData({ ...formData, otp: e.target.value })}\n                            placeholder=\"6-digit code\"\n                            className=\"form-input\"\n                            maxLength={6}\n                            data-testid=\"otp-input\"\n                          />\n                          <Button\n                            type=\"button\"\n                            onClick={verifyOtp}\n                            disabled={!formData.otp || verifyOtpMutation.isPending}\n                            className=\"glass\"\n                            data-testid=\"verify-otp-button\"\n                          >\n                            {verifyOtpMutation.isPending ? \"Verifying...\" : \"Verify\"}\n                          </Button>\n                        </div>\n                      </div>\n                      <Button\n                        type=\"button\"\n                        variant=\"outline\"\n                        onClick={() => {\n                          setOtpSent(false);\n                          setFormData({ ...formData, otp: \"\" });\n                        }}\n                        className=\"w-full glass text-xs\"\n                        data-testid=\"resend-otp-button\"\n                      >\n                        Resend Code\n                      </Button>\n                    </div>\n                  ) : (\n                    <div className=\"text-center py-2\">\n                      <p className=\"text-sm text-green-500\">✓ Phone number verified successfully</p>\n                    </div>\n                  )}\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"whatsappNumber\" className=\"text-foreground\">\n                    WhatsApp Number (Optional)\n                  </Label>\n                  <div className=\"relative\">\n                    <Phone className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground w-4 h-4\" />\n                    <Input\n                      id=\"whatsappNumber\"\n                      value={formData.whatsappNumber}\n                      onChange={(e) => setFormData({ ...formData, whatsappNumber: e.target.value })}\n                      placeholder=\"WhatsApp number (if different)\"\n                      className=\"form-input pl-10\"\n                      data-testid=\"whatsapp-input\"\n                    />\n                  </div>\n                </div>\n              </div>\n            )}\n\n            {/* Step 3: Birth Details & Preferences */}\n            {step === 3 && (\n              <div className=\"space-y-4\">\n                <h3 className=\"text-lg font-semibold text-foreground mb-4\">Birth Details & Preferences</h3>\n                \n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"whatsappNumber\" className=\"text-foreground\">\n                    WhatsApp Number (Optional)\n                  </Label>\n                  <div className=\"relative\">\n                    <Phone className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground w-4 h-4\" />\n                    <Input\n                      id=\"whatsappNumber\"\n                      value={formData.whatsappNumber}\n                      onChange={(e) => setFormData({ ...formData, whatsappNumber: e.target.value })}\n                      placeholder=\"WhatsApp number (if different)\"\n                      className=\"form-input pl-10\"\n                      data-testid=\"whatsapp-input\"\n                    />\n                  </div>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"dateOfBirth\" className=\"text-foreground\">\n                    Date of Birth (Optional)\n                  </Label>\n                  <div className=\"relative\">\n                    <Calendar className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground w-4 h-4\" />\n                    <Input\n                      id=\"dateOfBirth\"\n                      type=\"date\"\n                      value={formData.dateOfBirth}\n                      onChange={(e) => setFormData({ ...formData, dateOfBirth: e.target.value })}\n                      className=\"form-input pl-10\"\n                      data-testid=\"birth-date-input\"\n                    />\n                  </div>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"timeOfBirth\" className=\"text-foreground\">\n                    Time of Birth (Optional)\n                  </Label>\n                  <Input\n                    id=\"timeOfBirth\"\n                    type=\"time\"\n                    value={formData.timeOfBirth}\n                    onChange={(e) => setFormData({ ...formData, timeOfBirth: e.target.value })}\n                    className=\"form-input\"\n                    data-testid=\"birth-time-input\"\n                  />\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"placeOfBirth\" className=\"text-foreground\">\n                    Place of Birth (Optional)\n                  </Label>\n                  <div className=\"relative\">\n                    <MapPin className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground w-4 h-4\" />\n                    <Input\n                      id=\"placeOfBirth\"\n                      value={formData.placeOfBirth}\n                      onChange={(e) => setFormData({ ...formData, placeOfBirth: e.target.value })}\n                      placeholder=\"City, State, Country\"\n                      className=\"form-input pl-10\"\n                      data-testid=\"birth-place-input\"\n                    />\n                  </div>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label className=\"text-foreground\">Preferred Language</Label>\n                  <Select\n                    value={formData.preferredLanguage}\n                    onValueChange={(value) => setFormData({ ...formData, preferredLanguage: value })}\n                  >\n                    <SelectTrigger className=\"form-input\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent className=\"glass-card\">\n                      {languages.map((lang) => (\n                        <SelectItem key={lang.value} value={lang.value}>\n                          {lang.label}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div className=\"glass p-4 rounded-lg\">\n                  <p className=\"text-xs text-muted-foreground leading-relaxed\">\n                    <strong>Astrology Note:</strong> Birth details help provide accurate readings. \n                    All information is kept confidential and used only for astrological analysis.\n                  </p>\n                </div>\n              </div>\n            )}\n\n            {/* Step 4: Legal Agreements - Critical for Legal Security */}\n            {step === 4 && (\n              <div className=\"space-y-4\">\n                <div className=\"flex items-center space-x-2 mb-4\">\n                  <FileText className=\"w-5 h-5 text-primary\" />\n                  <h3 className=\"text-lg font-semibold text-foreground\">Legal Agreements</h3>\n                </div>\n                \n                <div className=\"glass p-4 rounded-lg border border-yellow-500/20\">\n                  <div className=\"flex items-start space-x-2 mb-3\">\n                    <AlertTriangle className=\"w-4 h-4 text-yellow-500 mt-0.5\" />\n                    <p className=\"text-sm text-yellow-100 leading-relaxed\">\n                      <strong>Legal Protection Notice:</strong> The following agreements are mandatory for your protection \n                      and ours. Please read each carefully before accepting.\n                    </p>\n                  </div>\n                </div>\n                \n                <div className=\"space-y-4\">\n                  {/* Terms of Service */}\n                  <div className=\"glass p-4 rounded-lg space-y-3\">\n                    <div className=\"flex items-start space-x-3\">\n                      <Checkbox\n                        checked={formData.agreedToTerms}\n                        onCheckedChange={(checked) => setFormData({ ...formData, agreedToTerms: !!checked })}\n                        data-testid=\"terms-checkbox\"\n                      />\n                      <div className=\"text-sm text-muted-foreground leading-relaxed\">\n                        <strong>Terms of Service Agreement *</strong><br />\n                        I agree to the{\" \"}\n                        <a href=\"#\" className=\"text-primary hover:underline\">Terms of Service</a>{\" \"}\n                        and understand that:\n                        <ul className=\"mt-2 ml-4 list-disc space-y-1 text-xs\">\n                          <li>All consultations, courses, and products are non-refundable</li>\n                          <li>Clients cannot cancel bookings or purchased items</li>\n                          <li>Rescheduling is allowed only when Astrologer cancels due to unavoidable reasons</li>\n                          <li>Services are for guidance purposes only</li>\n                        </ul>\n                      </div>\n                    </div>\n                  </div>\n\n                  {/* Privacy Policy */}\n                  <div className=\"glass p-4 rounded-lg space-y-3\">\n                    <div className=\"flex items-start space-x-3\">\n                      <Checkbox\n                        checked={formData.agreedToPrivacy}\n                        onCheckedChange={(checked) => setFormData({ ...formData, agreedToPrivacy: !!checked })}\n                        data-testid=\"privacy-checkbox\"\n                      />\n                      <div className=\"text-sm text-muted-foreground leading-relaxed\">\n                        <strong>Privacy Policy Agreement *</strong><br />\n                        I agree to the{\" \"}\n                        <a href=\"#\" className=\"text-primary hover:underline\">Privacy Policy</a>{\" \"}\n                        and understand how my personal data will be collected, used, and protected.\n                      </div>\n                    </div>\n                  </div>\n\n                  {/* Disclaimer */}\n                  <div className=\"glass p-4 rounded-lg space-y-3\">\n                    <div className=\"flex items-start space-x-3\">\n                      <Checkbox\n                        checked={formData.agreedToDisclaimer}\n                        onCheckedChange={(checked) => setFormData({ ...formData, agreedToDisclaimer: !!checked })}\n                        data-testid=\"disclaimer-checkbox\"\n                      />\n                      <div className=\"text-sm text-muted-foreground leading-relaxed\">\n                        <strong>Disclaimer Agreement *</strong><br />\n                        I acknowledge the{\" \"}\n                        <a href=\"#\" className=\"text-primary hover:underline\">Disclaimer</a>{\" \"}\n                        and understand that:\n                        <ul className=\"mt-2 ml-4 list-disc space-y-1 text-xs\">\n                          <li>Astrology is for guidance and entertainment purposes only</li>\n                          <li>Services should not replace professional medical, legal, or financial advice</li>\n                          <li>Results and outcomes are not guaranteed</li>\n                        </ul>\n                      </div>\n                    </div>\n                  </div>\n\n                  {/* Return Policy */}\n                  <div className=\"glass p-4 rounded-lg space-y-3\">\n                    <div className=\"flex items-start space-x-3\">\n                      <Checkbox\n                        checked={formData.agreedToReturnPolicy}\n                        onCheckedChange={(checked) => setFormData({ ...formData, agreedToReturnPolicy: !!checked })}\n                        data-testid=\"return-policy-checkbox\"\n                      />\n                      <div className=\"text-sm text-muted-foreground leading-relaxed\">\n                        <strong>Return Policy Agreement *</strong><br />\n                        I agree to the{\" \"}\n                        <a href=\"#\" className=\"text-primary hover:underline\">Return Policy</a>{\" \"}\n                        and understand that:\n                        <ul className=\"mt-2 ml-4 list-disc space-y-1 text-xs\">\n                          <li>No returns or refunds for any products or services</li>\n                          <li>All sales are final upon purchase</li>\n                          <li>Hard copy horoscopes are non-returnable</li>\n                        </ul>\n                      </div>\n                    </div>\n                  </div>\n\n                  {/* Data Processing Consent */}\n                  <div className=\"glass p-4 rounded-lg space-y-3\">\n                    <div className=\"flex items-start space-x-3\">\n                      <Checkbox\n                        checked={formData.dataProcessingConsent}\n                        onCheckedChange={(checked) => setFormData({ ...formData, dataProcessingConsent: !!checked })}\n                        data-testid=\"data-processing-checkbox\"\n                      />\n                      <div className=\"text-sm text-muted-foreground leading-relaxed\">\n                        <strong>Data Processing Consent *</strong><br />\n                        I consent to the processing of my personal data including birth details, contact information, \n                        and consultation records for the purpose of providing astrological services.\n                      </div>\n                    </div>\n                  </div>\n\n                  {/* Marketing Consent (Optional) */}\n                  <div className=\"glass p-4 rounded-lg space-y-3\">\n                    <div className=\"flex items-start space-x-3\">\n                      <Checkbox\n                        checked={formData.marketingConsent}\n                        onCheckedChange={(checked) => setFormData({ ...formData, marketingConsent: !!checked })}\n                        data-testid=\"marketing-checkbox\"\n                      />\n                      <div className=\"text-sm text-muted-foreground leading-relaxed\">\n                        <strong>Marketing Communications (Optional)</strong><br />\n                        I would like to receive updates about new courses, special offers, \n                        and astrological insights via email and SMS.\n                      </div>\n                    </div>\n                  </div>\n                </div>\n\n                <div className=\"glass p-4 rounded-lg border border-red-500/20\">\n                  <p className=\"text-xs text-red-100 leading-relaxed\">\n                    <strong>Final Notice:</strong> By proceeding, you confirm that you are at least 18 years old, \n                    have read and understood all agreements, and agree to be legally bound by these terms. \n                    All agreements are tracked with timestamps and IP addresses for legal compliance.\n                  </p>\n                </div>\n              </div>\n            )}\n\n            {/* Navigation Buttons */}\n            <div className=\"flex justify-between pt-6\">\n              {step > 1 && (\n                <Button\n                  type=\"button\"\n                  variant=\"outline\"\n                  onClick={() => setStep(step - 1)}\n                  className=\"glass\"\n                  data-testid=\"back-button\"\n                >\n                  Back\n                </Button>\n              )}\n              \n              <div className=\"ml-auto\">\n                {step < 4 ? (\n                  <NeonButton\n                    type=\"button\"\n                    onClick={handleNext}\n                    data-testid=\"next-button\"\n                  >\n                    {step === 3 ? \"Review Legal Terms\" : \"Next Step\"}\n                  </NeonButton>\n                ) : (\n                  <NeonButton\n                    type=\"submit\"\n                    disabled={registerMutation.isPending}\n                    data-testid=\"register-submit-button\"\n                  >\n                    {registerMutation.isPending ? \"Creating Account...\" : \"Create Account\"}\n                  </NeonButton>\n                )}\n              </div>\n            </div>\n          </form>\n\n          {/* Login Link */}\n          <div className=\"text-center mt-6\">\n            <p className=\"text-muted-foreground text-sm\">\n              Already have an account?{\" \"}\n              <Link href=\"/login\">\n                <Button variant=\"link\" className=\"text-primary p-0 h-auto text-sm\" data-testid=\"login-link\">\n                  Sign in here\n                </Button>\n              </Link>\n            </p>\n          </div>\n        </GlassCard>\n\n        {/* Security Notice */}\n        <div className=\"mt-6 text-center space-y-2\">\n          <p className=\"text-xs text-muted-foreground\">\n            🔒 Your data is protected with enterprise-grade security and encryption\n          </p>\n          <p className=\"text-xs text-muted-foreground\">\n            🌟 Join thousands discovering their cosmic destiny with Astrologer Arup Shastri\n          </p>\n          <p className=\"text-xs text-yellow-400\">\n            ⚖️ All legal agreements are tracked for your protection\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":40855},"client/src/components/support/ai-chatbot.tsx":{"content":"import { useState, useEffect, useRef } from \"react\";\nimport { useMutation, useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { GlassCard } from \"@/components/ui/glass-card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { \n  MessageCircle, \n  Send, \n  X, \n  Bot, \n  User, \n  ThumbsUp, \n  ThumbsDown,\n  Minimize2,\n  Maximize2,\n  HelpCircle,\n  Sparkles\n} from \"lucide-react\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport type { SupportChatMessage } from \"@shared/schema\";\n// AutoTranslate import removed - using t() function instead\nimport { useLanguage } from \"@/contexts/LanguageContext\";\n\ninterface ChatSession {\n  sessionId: string;\n  messages: SupportChatMessage[];\n}\n\nexport default function AIChatbot() {\n  const [isOpen, setIsOpen] = useState(false);\n  const [message, setMessage] = useState(\"\");\n  const [sessionId, setSessionId] = useState<string>(\"\");\n  const [isMinimized, setIsMinimized] = useState(false);\n  const [isTyping, setIsTyping] = useState(false);\n  const messagesEndRef = useRef<HTMLDivElement>(null);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const { t } = useLanguage();\n\n  // Generate session ID on mount\n  useEffect(() => {\n    if (!sessionId) {\n      const newSessionId = `session_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n      setSessionId(newSessionId);\n    }\n  }, [sessionId]);\n\n  // Get chat messages for current session\n  const { data: chatSession } = useQuery<{ messages: SupportChatMessage[] }>({\n    queryKey: [\"/api/support-chat\", sessionId],\n    enabled: !!sessionId && isOpen,\n  });\n\n  // Send message mutation\n  const sendMessageMutation = useMutation({\n    mutationFn: async (messageData: { message: string; sessionId: string }) => {\n      setIsTyping(true);\n      const response = await apiRequest(\"POST\", \"/api/support-chat/message\", messageData);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/support-chat\", sessionId] });\n      setMessage(\"\");\n      setIsTyping(false);\n    },\n    onError: () => {\n      setIsTyping(false);\n      toast({\n        title: t(\"error\") || \"Error\",\n        description: t(\"failedToSendMessage\") || \"Failed to send message. Please try again.\",\n        variant: \"destructive\",\n      });\n    }\n  });\n\n  // Rate message mutation\n  const rateMessageMutation = useMutation({\n    mutationFn: async ({ messageId, isHelpful }: { messageId: string; isHelpful: boolean }) => {\n      const response = await apiRequest(\"POST\", `/api/support-chat/rate/${messageId}`, { isHelpful });\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/support-chat\", sessionId] });\n    }\n  });\n\n  // Auto-scroll to bottom\n  useEffect(() => {\n    messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\n  }, [chatSession?.messages]);\n\n  const handleSendMessage = () => {\n    if (!message.trim() || !sessionId) return;\n    \n    sendMessageMutation.mutate({\n      message: message.trim(),\n      sessionId\n    });\n  };\n\n  const handleKeyPress = (e: React.KeyboardEvent) => {\n    if (e.key === \"Enter\" && !e.shiftKey) {\n      e.preventDefault();\n      handleSendMessage();\n    }\n  };\n\n  const handleRateMessage = (messageId: string, isHelpful: boolean) => {\n    rateMessageMutation.mutate({ messageId, isHelpful });\n  };\n\n  if (!isOpen) {\n    return (\n      <Button\n        onClick={() => setIsOpen(true)}\n        className=\"fixed bottom-6 right-24 w-14 h-14 rounded-full shadow-2xl neon-button z-50 group\"\n        style={{ \n          background: 'linear-gradient(135deg, hsl(279, 100%, 50%) 0%, hsl(195, 100%, 50%) 100%)',\n          boxShadow: '0 0 30px rgba(186, 85, 211, 0.6), 0 8px 25px rgba(0, 0, 0, 0.3)'\n        }}\n        data-testid=\"chatbot-open-button\"\n      >\n        <MessageCircle className=\"w-6 h-6 text-white group-hover:scale-110 transition-transform\" />\n        <div className=\"absolute -top-2 -right-2 w-6 h-6 bg-primary rounded-full flex items-center justify-center animate-pulse\">\n          <Sparkles className=\"w-3 h-3 text-primary-foreground\" />\n        </div>\n      </Button>\n    );\n  }\n\n  return (\n    <div className=\"fixed bottom-6 right-24 z-50\" data-testid=\"chatbot-widget\">\n      <GlassCard \n        className={`w-96 transition-all duration-300 ${\n          isMinimized ? 'h-16' : 'h-[600px]'\n        }`}\n        style={{\n          background: 'linear-gradient(135deg, rgba(14, 8, 30, 0.95) 0%, rgba(26, 11, 46, 0.95) 100%)',\n          backdropFilter: 'blur(20px) saturate(1.8)',\n          border: '1px solid rgba(186, 85, 211, 0.3)',\n          boxShadow: '0 20px 40px rgba(0, 0, 0, 0.6), 0 0 30px rgba(186, 85, 211, 0.2)'\n        }}\n      >\n        {/* Header */}\n        <div className=\"p-4 border-b border-primary/20 flex items-center justify-between\">\n          <div className=\"flex items-center space-x-3\">\n            <div className=\"w-10 h-10 bg-gradient-to-br from-purple-500 to-pink-500 rounded-full flex items-center justify-center\">\n              <Bot className=\"w-5 h-5 text-white\" />\n            </div>\n            <div>\n              <h3 className=\"font-semibold text-primary neon-text\">AI Assistant</h3>\n              <p className=\"text-xs text-muted-foreground\">\n                {isTyping ? \"Typing...\" : \"Online • Here to help\"}\n              </p>\n            </div>\n          </div>\n          <div className=\"flex items-center space-x-2\">\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={() => setIsMinimized(!isMinimized)}\n              className=\"text-muted-foreground hover:text-primary\"\n              data-testid=\"chatbot-minimize-button\"\n            >\n              {isMinimized ? <Maximize2 className=\"w-4 h-4\" /> : <Minimize2 className=\"w-4 h-4\" />}\n            </Button>\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={() => setIsOpen(false)}\n              className=\"text-muted-foreground hover:text-primary\"\n              data-testid=\"chatbot-close-button\"\n            >\n              <X className=\"w-4 h-4\" />\n            </Button>\n          </div>\n        </div>\n\n        {!isMinimized && (\n          <>\n            {/* Messages */}\n            <div className=\"flex-1 p-4 space-y-4 overflow-y-auto max-h-[440px]\" data-testid=\"chatbot-messages\">\n              {!chatSession?.messages || chatSession.messages.length === 0 ? (\n                <div className=\"text-center py-8\">\n                  <div className=\"w-16 h-16 bg-gradient-to-br from-purple-500 to-pink-500 rounded-full flex items-center justify-center mx-auto mb-4\">\n                    <HelpCircle className=\"w-8 h-8 text-white\" />\n                  </div>\n                  <h4 className=\"font-semibold text-primary mb-2\">Welcome to AI Support!</h4>\n                  <p className=\"text-sm text-muted-foreground mb-4\">\n                    I'm here to help with questions about consultations, courses, products, and more.\n                  </p>\n                  <div className=\"space-y-2\">\n                    <Badge variant=\"outline\" className=\"mr-2\">Consultation Booking</Badge>\n                    <Badge variant=\"outline\" className=\"mr-2\">Course Information</Badge>\n                    <Badge variant=\"outline\" className=\"mr-2\">Product Details</Badge>\n                    <Badge variant=\"outline\">Technical Support</Badge>\n                  </div>\n                </div>\n              ) : (\n                chatSession.messages.map((msg, index) => (\n                  <div\n                    key={index}\n                    className={`flex ${msg.sender === 'user' ? 'justify-end' : 'justify-start'} mb-4`}\n                  >\n                    <div className={`flex max-w-[80%] ${msg.sender === 'user' ? 'flex-row-reverse' : 'flex-row'} items-start space-x-2`}>\n                      <div className={`w-8 h-8 rounded-full flex items-center justify-center flex-shrink-0 ${\n                        msg.sender === 'user' ? 'bg-primary ml-2' : 'bg-gradient-to-br from-purple-500 to-pink-500 mr-2'\n                      }`}>\n                        {msg.sender === 'user' ? (\n                          <User className=\"w-4 h-4 text-primary-foreground\" />\n                        ) : (\n                          <Bot className=\"w-4 h-4 text-white\" />\n                        )}\n                      </div>\n                      <div className={`glass p-3 rounded-lg ${\n                        msg.sender === 'user' \n                          ? 'bg-primary/20 border-primary/30' \n                          : 'bg-secondary/20 border-secondary/30'\n                      }`}>\n                        <p className=\"text-sm text-foreground\">{msg.message}</p>\n                        <p className=\"text-xs text-muted-foreground mt-1\">\n                          {msg.createdAt ? new Date(msg.createdAt).toLocaleTimeString() : ''}\n                        </p>\n                        {msg.sender === 'bot' && (\n                          <div className=\"flex items-center space-x-2 mt-2\">\n                            <Button\n                              variant=\"ghost\"\n                              size=\"sm\"\n                              onClick={() => handleRateMessage(msg.id, true)}\n                              className=\"text-xs text-muted-foreground hover:text-green-500\"\n                              disabled={msg.isHelpful !== undefined}\n                            >\n                              <ThumbsUp className=\"w-3 h-3 mr-1\" />\n                              {msg.isHelpful === true ? t(\"helpful\") : \"\"}\n                            </Button>\n                            <Button\n                              variant=\"ghost\"\n                              size=\"sm\"\n                              onClick={() => handleRateMessage(msg.id, false)}\n                              className=\"text-xs text-muted-foreground hover:text-red-500\"\n                              disabled={msg.isHelpful !== undefined}\n                            >\n                              <ThumbsDown className=\"w-3 h-3 mr-1\" />\n                              {msg.isHelpful === false ? t(\"notHelpful\") : \"\"}\n                            </Button>\n                          </div>\n                        )}\n                      </div>\n                    </div>\n                  </div>\n                ))\n              )}\n              \n              {isTyping && (\n                <div className=\"flex justify-start mb-4\">\n                  <div className=\"flex items-start space-x-2\">\n                    <div className=\"w-8 h-8 bg-gradient-to-br from-purple-500 to-pink-500 rounded-full flex items-center justify-center\">\n                      <Bot className=\"w-4 h-4 text-white\" />\n                    </div>\n                    <div className=\"glass p-3 rounded-lg bg-secondary/20 border-secondary/30\">\n                      <div className=\"flex space-x-1\">\n                        <div className=\"w-2 h-2 bg-secondary rounded-full animate-bounce\"></div>\n                        <div className=\"w-2 h-2 bg-secondary rounded-full animate-bounce delay-100\"></div>\n                        <div className=\"w-2 h-2 bg-secondary rounded-full animate-bounce delay-200\"></div>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              )}\n              <div ref={messagesEndRef} />\n            </div>\n\n            {/* Input */}\n            <div className=\"p-4 border-t border-primary/20\">\n              <div className=\"flex space-x-2\">\n                <Input\n                  value={message}\n                  onChange={(e) => setMessage(e.target.value)}\n                  onKeyPress={handleKeyPress}\n                  placeholder={t(\"askAnything\") || \"Ask me anything about our services...\"}\n                  className=\"flex-1 bg-background/50 border-primary/30 focus:border-primary\"\n                  disabled={sendMessageMutation.isPending}\n                  data-testid=\"chatbot-input\"\n                />\n                <Button\n                  onClick={handleSendMessage}\n                  disabled={!message.trim() || sendMessageMutation.isPending}\n                  className=\"neon-button\"\n                  data-testid=\"chatbot-send-button\"\n                >\n                  <Send className=\"w-4 h-4\" />\n                </Button>\n              </div>\n              <p className=\"text-xs text-muted-foreground mt-2 text-center\">\n                AI responses are generated automatically. For complex issues, request human support.\n              </p>\n            </div>\n          </>\n        )}\n      </GlassCard>\n    </div>\n  );\n}","size_bytes":12804},"client/src/components/support/chatbot-provider.tsx":{"content":"import { useState, createContext, useContext } from \"react\";\nimport AIChatbot from \"./ai-chatbot\";\n\ninterface ChatbotContextType {\n  isOpen: boolean;\n  openChatbot: () => void;\n  closeChatbot: () => void;\n  toggleChatbot: () => void;\n}\n\nconst ChatbotContext = createContext<ChatbotContextType | undefined>(undefined);\n\nexport function useChatbot() {\n  const context = useContext(ChatbotContext);\n  if (!context) {\n    throw new Error(\"useChatbot must be used within a ChatbotProvider\");\n  }\n  return context;\n}\n\ninterface ChatbotProviderProps {\n  children: React.ReactNode;\n}\n\nexport function ChatbotProvider({ children }: ChatbotProviderProps) {\n  const [isOpen, setIsOpen] = useState(false);\n\n  const openChatbot = () => setIsOpen(true);\n  const closeChatbot = () => setIsOpen(false);\n  const toggleChatbot = () => setIsOpen(!isOpen);\n\n  return (\n    <ChatbotContext.Provider value={{ isOpen, openChatbot, closeChatbot, toggleChatbot }}>\n      {children}\n      <AIChatbot isOpen={isOpen} onToggle={toggleChatbot} />\n    </ChatbotContext.Provider>\n  );\n}","size_bytes":1055},"client/src/pages/admin/faqs.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Plus, Edit, Trash2, Search, Eye, ThumbsUp } from \"lucide-react\";\nimport type { Faq } from \"@shared/schema\";\n\n\nexport default function AdminFAQs() {\n  const [isCreateDialogOpen, setIsCreateDialogOpen] = useState(false);\n  const [isEditDialogOpen, setIsEditDialogOpen] = useState(false);\n  const [editingFaq, setEditingFaq] = useState<Faq | null>(null);\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [selectedCategory, setSelectedCategory] = useState<string>(\"all\");\n  const { toast } = useToast();\n\n  // Get all FAQs\n  const { data: faqs = [], isLoading } = useQuery<Faq[]>({\n    queryKey: [\"/api/faqs\"],\n  });\n\n  // Filter FAQs based on search and category\n  const filteredFaqs = faqs.filter((faq) => {\n    const matchesSearch = faq.question.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         faq.answer.toLowerCase().includes(searchTerm.toLowerCase());\n    const matchesCategory = selectedCategory === \"all\" || faq.category === selectedCategory;\n    return matchesSearch && matchesCategory;\n  });\n\n  // Get unique categories\n  const categories = Array.from(new Set(faqs.map(faq => faq.category)));\n\n  // Create FAQ mutation\n  const createFaqMutation = useMutation({\n    mutationFn: async (faqData: any) => {\n      return apiRequest(\"POST\", \"/api/faqs\", faqData);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/faqs\"] });\n      setIsCreateDialogOpen(false);\n      toast({ title: \"FAQ created successfully\" });\n    },\n    onError: () => {\n      toast({ title: \"Failed to create FAQ\", variant: \"destructive\" });\n    },\n  });\n\n  // Update FAQ mutation\n  const updateFaqMutation = useMutation({\n    mutationFn: async ({ id, ...faqData }: any) => {\n      return apiRequest(\"PUT\", `/api/faqs/${id}`, faqData);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/faqs\"] });\n      setIsEditDialogOpen(false);\n      setEditingFaq(null);\n      toast({ title: \"FAQ updated successfully\" });\n    },\n    onError: () => {\n      toast({ title: \"Failed to update FAQ\", variant: \"destructive\" });\n    },\n  });\n\n  // Delete FAQ mutation\n  const deleteFaqMutation = useMutation({\n    mutationFn: async (id: string) => {\n      return apiRequest(\"DELETE\", `/api/faqs/${id}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/faqs\"] });\n      toast({ title: \"FAQ deleted successfully\" });\n    },\n    onError: () => {\n      toast({ title: \"Failed to delete FAQ\", variant: \"destructive\" });\n    },\n  });\n\n  const handleCreateFaq = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    const formData = new FormData(event.currentTarget);\n    const keywords = formData.get(\"keywords\") as string;\n    \n    const faqData = {\n      question: formData.get(\"question\"),\n      answer: formData.get(\"answer\"),\n      category: formData.get(\"category\"),\n      keywords: keywords ? keywords.split(\",\").map(k => k.trim()) : [],\n      priority: parseInt(formData.get(\"priority\") as string) || 5,\n      isActive: true,\n    };\n\n    createFaqMutation.mutate(faqData);\n  };\n\n  const handleUpdateFaq = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    if (!editingFaq) return;\n\n    const formData = new FormData(event.currentTarget);\n    const keywords = formData.get(\"keywords\") as string;\n    \n    const faqData = {\n      id: editingFaq.id,\n      question: formData.get(\"question\"),\n      answer: formData.get(\"answer\"),\n      category: formData.get(\"category\"),\n      keywords: keywords ? keywords.split(\",\").map(k => k.trim()) : [],\n      priority: parseInt(formData.get(\"priority\") as string) || 5,\n      isActive: formData.get(\"isActive\") === \"true\",\n    };\n\n    updateFaqMutation.mutate(faqData);\n  };\n\n  const handleEdit = (faq: Faq) => {\n    setEditingFaq(faq);\n    setIsEditDialogOpen(true);\n  };\n\n  const handleDelete = (id: string) => {\n    if (confirm(\"Are you sure you want to delete this FAQ?\")) {\n      deleteFaqMutation.mutate(id);\n    }\n  };\n\n  const getCategoryColor = (category: string) => {\n    const colors = {\n      consultation: \"bg-blue-500/20 text-blue-400\",\n      courses: \"bg-green-500/20 text-green-400\",\n      products: \"bg-purple-500/20 text-purple-400\",\n      billing: \"bg-yellow-500/20 text-yellow-400\",\n      technical: \"bg-red-500/20 text-red-400\",\n      general: \"bg-gray-500/20 text-gray-400\",\n    };\n    return colors[category as keyof typeof colors] || \"bg-gray-500/20 text-gray-400\";\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"container mx-auto px-4 py-8\">\n        <div className=\"animate-pulse space-y-4\">\n          <div className=\"h-8 bg-white/10 rounded w-1/4\"></div>\n          <div className=\"h-64 bg-white/10 rounded\"></div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"container mx-auto px-4 py-8 space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold bg-gradient-to-r from-yellow-400 to-yellow-200 bg-clip-text text-transparent drop-shadow-[0_0_15px_rgba(255,255,0,0.5)]\">\n            FAQ Management\n          </h1>\n          <p className=\"text-gray-300 mt-2\">Manage frequently asked questions and AI responses</p>\n        </div>\n\n        <Dialog open={isCreateDialogOpen} onOpenChange={setIsCreateDialogOpen}>\n          <DialogTrigger asChild>\n            <Button \n              className=\"bg-gradient-to-r from-pink-500 to-purple-600 hover:from-pink-600 hover:to-purple-700 text-white shadow-lg hover:shadow-pink-500/25\"\n              data-testid=\"button-create-faq\"\n            >\n              <Plus className=\"w-4 h-4 mr-2\" />\n              Create FAQ\n            </Button>\n          </DialogTrigger>\n          <DialogContent className=\"max-w-2xl max-h-[80vh] overflow-y-auto\">\n            <DialogHeader>\n              <DialogTitle>Create New FAQ</DialogTitle>\n              <DialogDescription>\n                Add a new frequently asked question to help users get instant answers.\n              </DialogDescription>\n            </DialogHeader>\n\n            <form onSubmit={handleCreateFaq} className=\"space-y-4\">\n              <div>\n                <label className=\"block text-sm font-medium mb-2\">Question</label>\n                <Input \n                  name=\"question\" \n                  placeholder=\"Enter the question...\"\n                  required \n                  data-testid=\"input-question\"\n                />\n              </div>\n\n              <div>\n                <label className=\"block text-sm font-medium mb-2\">Answer</label>\n                <Textarea \n                  name=\"answer\" \n                  placeholder=\"Enter the detailed answer...\"\n                  rows={4}\n                  required \n                  data-testid=\"textarea-answer\"\n                />\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <label className=\"block text-sm font-medium mb-2\">Category</label>\n                  <Select name=\"category\" defaultValue=\"general\">\n                    <SelectTrigger data-testid=\"select-category\">\n                      <SelectValue placeholder={\"Select category\"} />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"general\">General</SelectItem>\n                      <SelectItem value=\"consultation\">Consultation</SelectItem>\n                      <SelectItem value=\"courses\">Courses</SelectItem>\n                      <SelectItem value=\"products\">Products</SelectItem>\n                      <SelectItem value=\"billing\">Billing</SelectItem>\n                      <SelectItem value=\"technical\">Technical</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div>\n                  <label className=\"block text-sm font-medium mb-2\">Priority</label>\n                  <Input \n                    name=\"priority\" \n                    type=\"number\" \n                    defaultValue={5}\n                    min={1}\n                    max={10}\n                    data-testid=\"input-priority\"\n                  />\n                </div>\n              </div>\n\n              <div>\n                <label className=\"block text-sm font-medium mb-2\">Keywords (comma-separated)</label>\n                <Input \n                  name=\"keywords\" \n                  placeholder=\"booking, appointment, schedule\"\n                  data-testid=\"input-keywords\"\n                />\n              </div>\n\n              <div className=\"flex justify-end space-x-2 pt-4\">\n                <Button \n                  type=\"button\" \n                  variant=\"outline\" \n                  onClick={() => setIsCreateDialogOpen(false)}\n                  data-testid=\"button-cancel\"\n                >\n                  Cancel\n                </Button>\n                <Button \n                  type=\"submit\" \n                  disabled={createFaqMutation.isPending}\n                  data-testid=\"button-submit\"\n                >\n                  {createFaqMutation.isPending ? \"Creating...\" : \"Create FAQ\"}\n                </Button>\n              </div>\n            </form>\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      {/* Statistics */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n        <Card className=\"bg-white/5 border-white/10\">\n          <CardHeader className=\"pb-2\">\n            <CardTitle className=\"text-sm font-medium text-gray-400\">Total FAQs</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-white\">{faqs.length}</div>\n          </CardContent>\n        </Card>\n\n        <Card className=\"bg-white/5 border-white/10\">\n          <CardHeader className=\"pb-2\">\n            <CardTitle className=\"text-sm font-medium text-gray-400\">Active FAQs</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-green-400\">\n              {faqs.filter(faq => faq.isActive).length}\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card className=\"bg-white/5 border-white/10\">\n          <CardHeader className=\"pb-2\">\n            <CardTitle className=\"text-sm font-medium text-gray-400\">Categories</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-blue-400\">{categories.length}</div>\n          </CardContent>\n        </Card>\n\n        <Card className=\"bg-white/5 border-white/10\">\n          <CardHeader className=\"pb-2\">\n            <CardTitle className=\"text-sm font-medium text-gray-400\">Total Views</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-purple-400\">\n              {faqs.reduce((sum, faq) => sum + (faq.viewCount || 0), 0)}\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Filters */}\n      <Card className=\"bg-white/5 border-white/10\">\n        <CardContent className=\"p-4\">\n          <div className=\"flex flex-col sm:flex-row gap-4\">\n            <div className=\"relative flex-1\">\n              <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4\" />\n              <Input\n                placeholder=\"Search FAQs...\"\n                value={searchTerm}\n                onChange={(e) => setSearchTerm(e.target.value)}\n                className=\"pl-10\"\n                data-testid=\"input-search\"\n              />\n            </div>\n\n            <Select value={selectedCategory} onValueChange={setSelectedCategory}>\n              <SelectTrigger className=\"w-full sm:w-48\" data-testid=\"select-filter-category\">\n                <SelectValue placeholder={\"Filter by category\"} />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All Categories</SelectItem>\n                {categories.map(category => (\n                  <SelectItem key={category} value={category}>\n                    {category.charAt(0).toUpperCase() + category.slice(1)}\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* FAQ Table */}\n      <Card className=\"bg-white/5 border-white/10\">\n        <CardContent className=\"p-0\">\n          <Table>\n            <TableHeader>\n              <TableRow className=\"border-white/10\">\n                <TableHead>Question</TableHead>\n                <TableHead>Category</TableHead>\n                <TableHead>Priority</TableHead>\n                <TableHead>Stats</TableHead>\n                <TableHead>Status</TableHead>\n                <TableHead>Actions</TableHead>\n              </TableRow>\n            </TableHeader>\n            <TableBody>\n              {filteredFaqs.map((faq) => (\n                <TableRow key={faq.id} className=\"border-white/10\">\n                  <TableCell className=\"max-w-md\">\n                    <div>\n                      <div className=\"font-medium text-white truncate\">{faq.question}</div>\n                      <div className=\"text-sm text-gray-400 truncate mt-1\">\n                        {faq.answer.substring(0, 100)}...\n                      </div>\n                    </div>\n                  </TableCell>\n                  <TableCell>\n                    <Badge className={getCategoryColor(faq.category)}>\n                      {faq.category}\n                    </Badge>\n                  </TableCell>\n                  <TableCell>\n                    <span className=\"text-white font-medium\">{faq.priority}</span>\n                  </TableCell>\n                  <TableCell>\n                    <div className=\"flex items-center space-x-4 text-sm text-gray-400\">\n                      <div className=\"flex items-center\">\n                        <Eye className=\"w-3 h-3 mr-1\" />\n                        {faq.viewCount}\n                      </div>\n                      <div className=\"flex items-center\">\n                        <ThumbsUp className=\"w-3 h-3 mr-1\" />\n                        {faq.helpfulCount}\n                      </div>\n                    </div>\n                  </TableCell>\n                  <TableCell>\n                    <Badge variant={faq.isActive ? \"default\" : \"secondary\"}>\n                      {faq.isActive ? \"Active\" : \"Inactive\"}\n                    </Badge>\n                  </TableCell>\n                  <TableCell>\n                    <div className=\"flex items-center space-x-2\">\n                      <Button\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        onClick={() => handleEdit(faq)}\n                        data-testid={`button-edit-${faq.id}`}\n                      >\n                        <Edit className=\"w-4 h-4\" />\n                      </Button>\n                      <Button\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        onClick={() => handleDelete(faq.id)}\n                        className=\"text-red-400 hover:text-red-300\"\n                        data-testid={`button-delete-${faq.id}`}\n                      >\n                        <Trash2 className=\"w-4 h-4\" />\n                      </Button>\n                    </div>\n                  </TableCell>\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n\n          {filteredFaqs.length === 0 && (\n            <div className=\"text-center py-8 text-gray-400\">\n              {searchTerm || selectedCategory !== \"all\" \n                ? \"No FAQs match your filters\" \n                : \"No FAQs found. Create your first FAQ to get started.\"\n              }\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Edit Dialog */}\n      <Dialog open={isEditDialogOpen} onOpenChange={setIsEditDialogOpen}>\n        <DialogContent className=\"max-w-2xl max-h-[80vh] overflow-y-auto\">\n          <DialogHeader>\n            <DialogTitle>Edit FAQ</DialogTitle>\n            <DialogDescription>\n              Update the FAQ details.\n            </DialogDescription>\n          </DialogHeader>\n\n          {editingFaq && (\n            <form onSubmit={handleUpdateFaq} className=\"space-y-4\">\n              <div>\n                <label className=\"block text-sm font-medium mb-2\">Question</label>\n                <Input \n                  name=\"question\" \n                  defaultValue={editingFaq.question}\n                  required \n                  data-testid=\"input-edit-question\"\n                />\n              </div>\n\n              <div>\n                <label className=\"block text-sm font-medium mb-2\">Answer</label>\n                <Textarea \n                  name=\"answer\" \n                  defaultValue={editingFaq.answer}\n                  rows={4}\n                  required \n                  data-testid=\"textarea-edit-answer\"\n                />\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <label className=\"block text-sm font-medium mb-2\">Category</label>\n                  <Select name=\"category\" defaultValue={editingFaq.category}>\n                    <SelectTrigger data-testid=\"select-edit-category\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"general\">General</SelectItem>\n                      <SelectItem value=\"consultation\">Consultation</SelectItem>\n                      <SelectItem value=\"courses\">Courses</SelectItem>\n                      <SelectItem value=\"products\">Products</SelectItem>\n                      <SelectItem value=\"billing\">Billing</SelectItem>\n                      <SelectItem value=\"technical\">Technical</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div>\n                  <label className=\"block text-sm font-medium mb-2\">Priority</label>\n                  <Input \n                    name=\"priority\" \n                    type=\"number\" \n                    defaultValue={editingFaq.priority || 5}\n                    min={1}\n                    max={10}\n                    data-testid=\"input-edit-priority\"\n                  />\n                </div>\n              </div>\n\n              <div>\n                <label className=\"block text-sm font-medium mb-2\">Keywords (comma-separated)</label>\n                <Input \n                  name=\"keywords\" \n                  defaultValue={editingFaq.keywords?.join(\", \") || \"\"}\n                  data-testid=\"input-edit-keywords\"\n                />\n              </div>\n\n              <div>\n                <label className=\"block text-sm font-medium mb-2\">Status</label>\n                <Select name=\"isActive\" defaultValue={editingFaq.isActive?.toString() || \"true\"}>\n                  <SelectTrigger data-testid=\"select-edit-status\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"true\">Active</SelectItem>\n                    <SelectItem value=\"false\">Inactive</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <div className=\"flex justify-end space-x-2 pt-4\">\n                <Button \n                  type=\"button\" \n                  variant=\"outline\" \n                  onClick={() => {\n                    setIsEditDialogOpen(false);\n                    setEditingFaq(null);\n                  }}\n                  data-testid=\"button-edit-cancel\"\n                >\n                  Cancel\n                </Button>\n                <Button \n                  type=\"submit\" \n                  disabled={updateFaqMutation.isPending}\n                  data-testid=\"button-edit-submit\"\n                >\n                  {updateFaqMutation.isPending ? \"Updating...\" : \"Update FAQ\"}\n                </Button>\n              </div>\n            </form>\n          )}\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}","size_bytes":21008},"data/global-phone-codes.ts":{"content":"// Global phone codes for all countries in the world\nexport const globalPhoneCodes = [\n  // Most common countries first\n  { value: \"+91\", label: \"🇮🇳 +91\", country: \"India\", flag: \"🇮🇳\" },\n  { value: \"+1\", label: \"🇺🇸 +1\", country: \"United States\", flag: \"🇺🇸\" },\n  { value: \"+86\", label: \"🇨🇳 +86\", country: \"China\", flag: \"🇨🇳\" },\n  { value: \"+81\", label: \"🇯🇵 +81\", country: \"Japan\", flag: \"🇯🇵\" },\n  { value: \"+49\", label: \"🇩🇪 +49\", country: \"Germany\", flag: \"🇩🇪\" },\n  { value: \"+33\", label: \"🇫🇷 +33\", country: \"France\", flag: \"🇫🇷\" },\n  { value: \"+44\", label: \"🇬🇧 +44\", country: \"United Kingdom\", flag: \"🇬🇧\" },\n  { value: \"+82\", label: \"🇰🇷 +82\", country: \"South Korea\", flag: \"🇰🇷\" },\n  { value: \"+61\", label: \"🇦🇺 +61\", country: \"Australia\", flag: \"🇦🇺\" },\n  { value: \"+7\", label: \"🇷🇺 +7\", country: \"Russia\", flag: \"🇷🇺\" },\n  \n  // All other countries alphabetically\n  { value: \"+93\", label: \"🇦🇫 +93\", country: \"Afghanistan\", flag: \"🇦🇫\" },\n  { value: \"+355\", label: \"🇦🇱 +355\", country: \"Albania\", flag: \"🇦🇱\" },\n  { value: \"+213\", label: \"🇩🇿 +213\", country: \"Algeria\", flag: \"🇩🇿\" },\n  { value: \"+1684\", label: \"🇦🇸 +1684\", country: \"American Samoa\", flag: \"🇦🇸\" },\n  { value: \"+376\", label: \"🇦🇩 +376\", country: \"Andorra\", flag: \"🇦🇩\" },\n  { value: \"+244\", label: \"🇦🇴 +244\", country: \"Angola\", flag: \"🇦🇴\" },\n  { value: \"+1264\", label: \"🇦🇮 +1264\", country: \"Anguilla\", flag: \"🇦🇮\" },\n  { value: \"+1268\", label: \"🇦🇬 +1268\", country: \"Antigua and Barbuda\", flag: \"🇦🇬\" },\n  { value: \"+54\", label: \"🇦🇷 +54\", country: \"Argentina\", flag: \"🇦🇷\" },\n  { value: \"+374\", label: \"🇦🇲 +374\", country: \"Armenia\", flag: \"🇦🇲\" },\n  { value: \"+297\", label: \"🇦🇼 +297\", country: \"Aruba\", flag: \"🇦🇼\" },\n  { value: \"+43\", label: \"🇦🇹 +43\", country: \"Austria\", flag: \"🇦🇹\" },\n  { value: \"+994\", label: \"🇦🇿 +994\", country: \"Azerbaijan\", flag: \"🇦🇿\" },\n  { value: \"+1242\", label: \"🇧🇸 +1242\", country: \"Bahamas\", flag: \"🇧🇸\" },\n  { value: \"+973\", label: \"🇧🇭 +973\", country: \"Bahrain\", flag: \"🇧🇭\" },\n  { value: \"+880\", label: \"🇧🇩 +880\", country: \"Bangladesh\", flag: \"🇧🇩\" },\n  { value: \"+1246\", label: \"🇧🇧 +1246\", country: \"Barbados\", flag: \"🇧🇧\" },\n  { value: \"+375\", label: \"🇧🇾 +375\", country: \"Belarus\", flag: \"🇧🇾\" },\n  { value: \"+32\", label: \"🇧🇪 +32\", country: \"Belgium\", flag: \"🇧🇪\" },\n  { value: \"+501\", label: \"🇧🇿 +501\", country: \"Belize\", flag: \"🇧🇿\" },\n  { value: \"+229\", label: \"🇧🇯 +229\", country: \"Benin\", flag: \"🇧🇯\" },\n  { value: \"+1441\", label: \"🇧🇲 +1441\", country: \"Bermuda\", flag: \"🇧🇲\" },\n  { value: \"+975\", label: \"🇧🇹 +975\", country: \"Bhutan\", flag: \"🇧🇹\" },\n  { value: \"+591\", label: \"🇧🇴 +591\", country: \"Bolivia\", flag: \"🇧🇴\" },\n  { value: \"+387\", label: \"🇧🇦 +387\", country: \"Bosnia and Herzegovina\", flag: \"🇧🇦\" },\n  { value: \"+267\", label: \"🇧🇼 +267\", country: \"Botswana\", flag: \"🇧🇼\" },\n  { value: \"+55\", label: \"🇧🇷 +55\", country: \"Brazil\", flag: \"🇧🇷\" },\n  { value: \"+673\", label: \"🇧🇳 +673\", country: \"Brunei\", flag: \"🇧🇳\" },\n  { value: \"+359\", label: \"🇧🇬 +359\", country: \"Bulgaria\", flag: \"🇧🇬\" },\n  { value: \"+226\", label: \"🇧🇫 +226\", country: \"Burkina Faso\", flag: \"🇧🇫\" },\n  { value: \"+257\", label: \"🇧🇮 +257\", country: \"Burundi\", flag: \"🇧🇮\" },\n  { value: \"+855\", label: \"🇰🇭 +855\", country: \"Cambodia\", flag: \"🇰🇭\" },\n  { value: \"+237\", label: \"🇨🇲 +237\", country: \"Cameroon\", flag: \"🇨🇲\" },\n  { value: \"+1\", label: \"🇨🇦 +1\", country: \"Canada\", flag: \"🇨🇦\" },\n  { value: \"+238\", label: \"🇨🇻 +238\", country: \"Cape Verde\", flag: \"🇨🇻\" },\n  { value: \"+1345\", label: \"🇰🇾 +1345\", country: \"Cayman Islands\", flag: \"🇰🇾\" },\n  { value: \"+236\", label: \"🇨🇫 +236\", country: \"Central African Republic\", flag: \"🇨🇫\" },\n  { value: \"+235\", label: \"🇹🇩 +235\", country: \"Chad\", flag: \"🇹🇩\" },\n  { value: \"+56\", label: \"🇨🇱 +56\", country: \"Chile\", flag: \"🇨🇱\" },\n  { value: \"+57\", label: \"🇨🇴 +57\", country: \"Colombia\", flag: \"🇨🇴\" },\n  { value: \"+269\", label: \"🇰🇲 +269\", country: \"Comoros\", flag: \"🇰🇲\" },\n  { value: \"+242\", label: \"🇨🇬 +242\", country: \"Congo\", flag: \"🇨🇬\" },\n  { value: \"+243\", label: \"🇨🇩 +243\", country: \"Congo (DRC)\", flag: \"🇨🇩\" },\n  { value: \"+682\", label: \"🇨🇰 +682\", country: \"Cook Islands\", flag: \"🇨🇰\" },\n  { value: \"+506\", label: \"🇨🇷 +506\", country: \"Costa Rica\", flag: \"🇨🇷\" },\n  { value: \"+225\", label: \"🇨🇮 +225\", country: \"Côte d'Ivoire\", flag: \"🇨🇮\" },\n  { value: \"+385\", label: \"🇭🇷 +385\", country: \"Croatia\", flag: \"🇭🇷\" },\n  { value: \"+53\", label: \"🇨🇺 +53\", country: \"Cuba\", flag: \"🇨🇺\" },\n  { value: \"+357\", label: \"🇨🇾 +357\", country: \"Cyprus\", flag: \"🇨🇾\" },\n  { value: \"+420\", label: \"🇨🇿 +420\", country: \"Czech Republic\", flag: \"🇨🇿\" },\n  { value: \"+45\", label: \"🇩🇰 +45\", country: \"Denmark\", flag: \"🇩🇰\" },\n  { value: \"+253\", label: \"🇩🇯 +253\", country: \"Djibouti\", flag: \"🇩🇯\" },\n  { value: \"+1767\", label: \"🇩🇲 +1767\", country: \"Dominica\", flag: \"🇩🇲\" },\n  { value: \"+1849\", label: \"🇩🇴 +1849\", country: \"Dominican Republic\", flag: \"🇩🇴\" },\n  { value: \"+593\", label: \"🇪🇨 +593\", country: \"Ecuador\", flag: \"🇪🇨\" },\n  { value: \"+20\", label: \"🇪🇬 +20\", country: \"Egypt\", flag: \"🇪🇬\" },\n  { value: \"+503\", label: \"🇸🇻 +503\", country: \"El Salvador\", flag: \"🇸🇻\" },\n  { value: \"+240\", label: \"🇬🇶 +240\", country: \"Equatorial Guinea\", flag: \"🇬🇶\" },\n  { value: \"+291\", label: \"🇪🇷 +291\", country: \"Eritrea\", flag: \"🇪🇷\" },\n  { value: \"+372\", label: \"🇪🇪 +372\", country: \"Estonia\", flag: \"🇪🇪\" },\n  { value: \"+268\", label: \"🇸🇿 +268\", country: \"Eswatini\", flag: \"🇸🇿\" },\n  { value: \"+251\", label: \"🇪🇹 +251\", country: \"Ethiopia\", flag: \"🇪🇹\" },\n  { value: \"+500\", label: \"🇫🇰 +500\", country: \"Falkland Islands\", flag: \"🇫🇰\" },\n  { value: \"+298\", label: \"🇫🇴 +298\", country: \"Faroe Islands\", flag: \"🇫🇴\" },\n  { value: \"+679\", label: \"🇫🇯 +679\", country: \"Fiji\", flag: \"🇫🇯\" },\n  { value: \"+358\", label: \"🇫🇮 +358\", country: \"Finland\", flag: \"🇫🇮\" },\n  { value: \"+594\", label: \"🇬🇫 +594\", country: \"French Guiana\", flag: \"🇬🇫\" },\n  { value: \"+689\", label: \"🇵🇫 +689\", country: \"French Polynesia\", flag: \"🇵🇫\" },\n  { value: \"+241\", label: \"🇬🇦 +241\", country: \"Gabon\", flag: \"🇬🇦\" },\n  { value: \"+220\", label: \"🇬🇲 +220\", country: \"Gambia\", flag: \"🇬🇲\" },\n  { value: \"+995\", label: \"🇬🇪 +995\", country: \"Georgia\", flag: \"🇬🇪\" },\n  { value: \"+233\", label: \"🇬🇭 +233\", country: \"Ghana\", flag: \"🇬🇭\" },\n  { value: \"+350\", label: \"🇬🇮 +350\", country: \"Gibraltar\", flag: \"🇬🇮\" },\n  { value: \"+30\", label: \"🇬🇷 +30\", country: \"Greece\", flag: \"🇬🇷\" },\n  { value: \"+299\", label: \"🇬🇱 +299\", country: \"Greenland\", flag: \"🇬🇱\" },\n  { value: \"+1473\", label: \"🇬🇩 +1473\", country: \"Grenada\", flag: \"🇬🇩\" },\n  { value: \"+590\", label: \"🇬🇵 +590\", country: \"Guadeloupe\", flag: \"🇬🇵\" },\n  { value: \"+1671\", label: \"🇬🇺 +1671\", country: \"Guam\", flag: \"🇬🇺\" },\n  { value: \"+502\", label: \"🇬🇹 +502\", country: \"Guatemala\", flag: \"🇬🇹\" },\n  { value: \"+224\", label: \"🇬🇳 +224\", country: \"Guinea\", flag: \"🇬🇳\" },\n  { value: \"+245\", label: \"🇬🇼 +245\", country: \"Guinea-Bissau\", flag: \"🇬🇼\" },\n  { value: \"+592\", label: \"🇬🇾 +592\", country: \"Guyana\", flag: \"🇬🇾\" },\n  { value: \"+509\", label: \"🇭🇹 +509\", country: \"Haiti\", flag: \"🇭🇹\" },\n  { value: \"+504\", label: \"🇭🇳 +504\", country: \"Honduras\", flag: \"🇭🇳\" },\n  { value: \"+852\", label: \"🇭🇰 +852\", country: \"Hong Kong\", flag: \"🇭🇰\" },\n  { value: \"+36\", label: \"🇭🇺 +36\", country: \"Hungary\", flag: \"🇭🇺\" },\n  { value: \"+354\", label: \"🇮🇸 +354\", country: \"Iceland\", flag: \"🇮🇸\" },\n  { value: \"+62\", label: \"🇮🇩 +62\", country: \"Indonesia\", flag: \"🇮🇩\" },\n  { value: \"+98\", label: \"🇮🇷 +98\", country: \"Iran\", flag: \"🇮🇷\" },\n  { value: \"+964\", label: \"🇮🇶 +964\", country: \"Iraq\", flag: \"🇮🇶\" },\n  { value: \"+353\", label: \"🇮🇪 +353\", country: \"Ireland\", flag: \"🇮🇪\" },\n  { value: \"+972\", label: \"🇮🇱 +972\", country: \"Israel\", flag: \"🇮🇱\" },\n  { value: \"+39\", label: \"🇮🇹 +39\", country: \"Italy\", flag: \"🇮🇹\" },\n  { value: \"+1876\", label: \"🇯🇲 +1876\", country: \"Jamaica\", flag: \"🇯🇲\" },\n  { value: \"+962\", label: \"🇯🇴 +962\", country: \"Jordan\", flag: \"🇯🇴\" },\n  { value: \"+77\", label: \"🇰🇿 +77\", country: \"Kazakhstan\", flag: \"🇰🇿\" },\n  { value: \"+254\", label: \"🇰🇪 +254\", country: \"Kenya\", flag: \"🇰🇪\" },\n  { value: \"+686\", label: \"🇰🇮 +686\", country: \"Kiribati\", flag: \"🇰🇮\" },\n  { value: \"+850\", label: \"🇰🇵 +850\", country: \"North Korea\", flag: \"🇰🇵\" },\n  { value: \"+965\", label: \"🇰🇼 +965\", country: \"Kuwait\", flag: \"🇰🇼\" },\n  { value: \"+996\", label: \"🇰🇬 +996\", country: \"Kyrgyzstan\", flag: \"🇰🇬\" },\n  { value: \"+856\", label: \"🇱🇦 +856\", country: \"Laos\", flag: \"🇱🇦\" },\n  { value: \"+371\", label: \"🇱🇻 +371\", country: \"Latvia\", flag: \"🇱🇻\" },\n  { value: \"+961\", label: \"🇱🇧 +961\", country: \"Lebanon\", flag: \"🇱🇧\" },\n  { value: \"+266\", label: \"🇱🇸 +266\", country: \"Lesotho\", flag: \"🇱🇸\" },\n  { value: \"+231\", label: \"🇱🇷 +231\", country: \"Liberia\", flag: \"🇱🇷\" },\n  { value: \"+218\", label: \"🇱🇾 +218\", country: \"Libya\", flag: \"🇱🇾\" },\n  { value: \"+423\", label: \"🇱🇮 +423\", country: \"Liechtenstein\", flag: \"🇱🇮\" },\n  { value: \"+370\", label: \"🇱🇹 +370\", country: \"Lithuania\", flag: \"🇱🇹\" },\n  { value: \"+352\", label: \"🇱🇺 +352\", country: \"Luxembourg\", flag: \"🇱🇺\" },\n  { value: \"+853\", label: \"🇲🇴 +853\", country: \"Macao\", flag: \"🇲🇴\" },\n  { value: \"+389\", label: \"🇲🇰 +389\", country: \"North Macedonia\", flag: \"🇲🇰\" },\n  { value: \"+261\", label: \"🇲🇬 +261\", country: \"Madagascar\", flag: \"🇲🇬\" },\n  { value: \"+265\", label: \"🇲🇼 +265\", country: \"Malawi\", flag: \"🇲🇼\" },\n  { value: \"+60\", label: \"🇲🇾 +60\", country: \"Malaysia\", flag: \"🇲🇾\" },\n  { value: \"+960\", label: \"🇲🇻 +960\", country: \"Maldives\", flag: \"🇲🇻\" },\n  { value: \"+223\", label: \"🇲🇱 +223\", country: \"Mali\", flag: \"🇲🇱\" },\n  { value: \"+356\", label: \"🇲🇹 +356\", country: \"Malta\", flag: \"🇲🇹\" },\n  { value: \"+692\", label: \"🇲🇭 +692\", country: \"Marshall Islands\", flag: \"🇲🇭\" },\n  { value: \"+596\", label: \"🇲🇶 +596\", country: \"Martinique\", flag: \"🇲🇶\" },\n  { value: \"+222\", label: \"🇲🇷 +222\", country: \"Mauritania\", flag: \"🇲🇷\" },\n  { value: \"+230\", label: \"🇲🇺 +230\", country: \"Mauritius\", flag: \"🇲🇺\" },\n  { value: \"+262\", label: \"🇾🇹 +262\", country: \"Mayotte\", flag: \"🇾🇹\" },\n  { value: \"+52\", label: \"🇲🇽 +52\", country: \"Mexico\", flag: \"🇲🇽\" },\n  { value: \"+691\", label: \"🇫🇲 +691\", country: \"Micronesia\", flag: \"🇫🇲\" },\n  { value: \"+373\", label: \"🇲🇩 +373\", country: \"Moldova\", flag: \"🇲🇩\" },\n  { value: \"+377\", label: \"🇲🇨 +377\", country: \"Monaco\", flag: \"🇲🇨\" },\n  { value: \"+976\", label: \"🇲🇳 +976\", country: \"Mongolia\", flag: \"🇲🇳\" },\n  { value: \"+382\", label: \"🇲🇪 +382\", country: \"Montenegro\", flag: \"🇲🇪\" },\n  { value: \"+1664\", label: \"🇲🇸 +1664\", country: \"Montserrat\", flag: \"🇲🇸\" },\n  { value: \"+212\", label: \"🇲🇦 +212\", country: \"Morocco\", flag: \"🇲🇦\" },\n  { value: \"+258\", label: \"🇲🇿 +258\", country: \"Mozambique\", flag: \"🇲🇿\" },\n  { value: \"+95\", label: \"🇲🇲 +95\", country: \"Myanmar\", flag: \"🇲🇲\" },\n  { value: \"+264\", label: \"🇳🇦 +264\", country: \"Namibia\", flag: \"🇳🇦\" },\n  { value: \"+674\", label: \"🇳🇷 +674\", country: \"Nauru\", flag: \"🇳🇷\" },\n  { value: \"+977\", label: \"🇳🇵 +977\", country: \"Nepal\", flag: \"🇳🇵\" },\n  { value: \"+31\", label: \"🇳🇱 +31\", country: \"Netherlands\", flag: \"🇳🇱\" },\n  { value: \"+687\", label: \"🇳🇨 +687\", country: \"New Caledonia\", flag: \"🇳🇨\" },\n  { value: \"+64\", label: \"🇳🇿 +64\", country: \"New Zealand\", flag: \"🇳🇿\" },\n  { value: \"+505\", label: \"🇳🇮 +505\", country: \"Nicaragua\", flag: \"🇳🇮\" },\n  { value: \"+227\", label: \"🇳🇪 +227\", country: \"Niger\", flag: \"🇳🇪\" },\n  { value: \"+234\", label: \"🇳🇬 +234\", country: \"Nigeria\", flag: \"🇳🇬\" },\n  { value: \"+683\", label: \"🇳🇺 +683\", country: \"Niue\", flag: \"🇳🇺\" },\n  { value: \"+672\", label: \"🇳🇫 +672\", country: \"Norfolk Island\", flag: \"🇳🇫\" },\n  { value: \"+1670\", label: \"🇲🇵 +1670\", country: \"Northern Mariana Islands\", flag: \"🇲🇵\" },\n  { value: \"+47\", label: \"🇳🇴 +47\", country: \"Norway\", flag: \"🇳🇴\" },\n  { value: \"+968\", label: \"🇴🇲 +968\", country: \"Oman\", flag: \"🇴🇲\" },\n  { value: \"+92\", label: \"🇵🇰 +92\", country: \"Pakistan\", flag: \"🇵🇰\" },\n  { value: \"+680\", label: \"🇵🇼 +680\", country: \"Palau\", flag: \"🇵🇼\" },\n  { value: \"+970\", label: \"🇵🇸 +970\", country: \"Palestine\", flag: \"🇵🇸\" },\n  { value: \"+507\", label: \"🇵🇦 +507\", country: \"Panama\", flag: \"🇵🇦\" },\n  { value: \"+675\", label: \"🇵🇬 +675\", country: \"Papua New Guinea\", flag: \"🇵🇬\" },\n  { value: \"+595\", label: \"🇵🇾 +595\", country: \"Paraguay\", flag: \"🇵🇾\" },\n  { value: \"+51\", label: \"🇵🇪 +51\", country: \"Peru\", flag: \"🇵🇪\" },\n  { value: \"+63\", label: \"🇵🇭 +63\", country: \"Philippines\", flag: \"🇵🇭\" },\n  { value: \"+48\", label: \"🇵🇱 +48\", country: \"Poland\", flag: \"🇵🇱\" },\n  { value: \"+351\", label: \"🇵🇹 +351\", country: \"Portugal\", flag: \"🇵🇹\" },\n  { value: \"+1787\", label: \"🇵🇷 +1787\", country: \"Puerto Rico\", flag: \"🇵🇷\" },\n  { value: \"+974\", label: \"🇶🇦 +974\", country: \"Qatar\", flag: \"🇶🇦\" },\n  { value: \"+262\", label: \"🇷🇪 +262\", country: \"Réunion\", flag: \"🇷🇪\" },\n  { value: \"+40\", label: \"🇷🇴 +40\", country: \"Romania\", flag: \"🇷🇴\" },\n  { value: \"+250\", label: \"🇷🇼 +250\", country: \"Rwanda\", flag: \"🇷🇼\" },\n  { value: \"+290\", label: \"🇸🇭 +290\", country: \"Saint Helena\", flag: \"🇸🇭\" },\n  { value: \"+1869\", label: \"🇰🇳 +1869\", country: \"Saint Kitts and Nevis\", flag: \"🇰🇳\" },\n  { value: \"+1758\", label: \"🇱🇨 +1758\", country: \"Saint Lucia\", flag: \"🇱🇨\" },\n  { value: \"+508\", label: \"🇵🇲 +508\", country: \"Saint Pierre and Miquelon\", flag: \"🇵🇲\" },\n  { value: \"+1784\", label: \"🇻🇨 +1784\", country: \"Saint Vincent and the Grenadines\", flag: \"🇻🇨\" },\n  { value: \"+685\", label: \"🇼🇸 +685\", country: \"Samoa\", flag: \"🇼🇸\" },\n  { value: \"+378\", label: \"🇸🇲 +378\", country: \"San Marino\", flag: \"🇸🇲\" },\n  { value: \"+239\", label: \"🇸🇹 +239\", country: \"São Tomé and Príncipe\", flag: \"🇸🇹\" },\n  { value: \"+966\", label: \"🇸🇦 +966\", country: \"Saudi Arabia\", flag: \"🇸🇦\" },\n  { value: \"+221\", label: \"🇸🇳 +221\", country: \"Senegal\", flag: \"🇸🇳\" },\n  { value: \"+381\", label: \"🇷🇸 +381\", country: \"Serbia\", flag: \"🇷🇸\" },\n  { value: \"+248\", label: \"🇸🇨 +248\", country: \"Seychelles\", flag: \"🇸🇨\" },\n  { value: \"+232\", label: \"🇸🇱 +232\", country: \"Sierra Leone\", flag: \"🇸🇱\" },\n  { value: \"+65\", label: \"🇸🇬 +65\", country: \"Singapore\", flag: \"🇸🇬\" },\n  { value: \"+421\", label: \"🇸🇰 +421\", country: \"Slovakia\", flag: \"🇸🇰\" },\n  { value: \"+386\", label: \"🇸🇮 +386\", country: \"Slovenia\", flag: \"🇸🇮\" },\n  { value: \"+677\", label: \"🇸🇧 +677\", country: \"Solomon Islands\", flag: \"🇸🇧\" },\n  { value: \"+252\", label: \"🇸🇴 +252\", country: \"Somalia\", flag: \"🇸🇴\" },\n  { value: \"+27\", label: \"🇿🇦 +27\", country: \"South Africa\", flag: \"🇿🇦\" },\n  { value: \"+211\", label: \"🇸🇸 +211\", country: \"South Sudan\", flag: \"🇸🇸\" },\n  { value: \"+34\", label: \"🇪🇸 +34\", country: \"Spain\", flag: \"🇪🇸\" },\n  { value: \"+94\", label: \"🇱🇰 +94\", country: \"Sri Lanka\", flag: \"🇱🇰\" },\n  { value: \"+249\", label: \"🇸🇩 +249\", country: \"Sudan\", flag: \"🇸🇩\" },\n  { value: \"+597\", label: \"🇸🇷 +597\", country: \"Suriname\", flag: \"🇸🇷\" },\n  { value: \"+46\", label: \"🇸🇪 +46\", country: \"Sweden\", flag: \"🇸🇪\" },\n  { value: \"+41\", label: \"🇨🇭 +41\", country: \"Switzerland\", flag: \"🇨🇭\" },\n  { value: \"+963\", label: \"🇸🇾 +963\", country: \"Syria\", flag: \"🇸🇾\" },\n  { value: \"+886\", label: \"🇹🇼 +886\", country: \"Taiwan\", flag: \"🇹🇼\" },\n  { value: \"+992\", label: \"🇹🇯 +992\", country: \"Tajikistan\", flag: \"🇹🇯\" },\n  { value: \"+255\", label: \"🇹🇿 +255\", country: \"Tanzania\", flag: \"🇹🇿\" },\n  { value: \"+66\", label: \"🇹🇭 +66\", country: \"Thailand\", flag: \"🇹🇭\" },\n  { value: \"+670\", label: \"🇹🇱 +670\", country: \"Timor-Leste\", flag: \"🇹🇱\" },\n  { value: \"+228\", label: \"🇹🇬 +228\", country: \"Togo\", flag: \"🇹🇬\" },\n  { value: \"+690\", label: \"🇹🇰 +690\", country: \"Tokelau\", flag: \"🇹🇰\" },\n  { value: \"+676\", label: \"🇹🇴 +676\", country: \"Tonga\", flag: \"🇹🇴\" },\n  { value: \"+1868\", label: \"🇹🇹 +1868\", country: \"Trinidad and Tobago\", flag: \"🇹🇹\" },\n  { value: \"+216\", label: \"🇹🇳 +216\", country: \"Tunisia\", flag: \"🇹🇳\" },\n  { value: \"+90\", label: \"🇹🇷 +90\", country: \"Turkey\", flag: \"🇹🇷\" },\n  { value: \"+993\", label: \"🇹🇲 +993\", country: \"Turkmenistan\", flag: \"🇹🇲\" },\n  { value: \"+1649\", label: \"🇹🇨 +1649\", country: \"Turks and Caicos Islands\", flag: \"🇹🇨\" },\n  { value: \"+688\", label: \"🇹🇻 +688\", country: \"Tuvalu\", flag: \"🇹🇻\" },\n  { value: \"+256\", label: \"🇺🇬 +256\", country: \"Uganda\", flag: \"🇺🇬\" },\n  { value: \"+380\", label: \"🇺🇦 +380\", country: \"Ukraine\", flag: \"🇺🇦\" },\n  { value: \"+971\", label: \"🇦🇪 +971\", country: \"United Arab Emirates\", flag: \"🇦🇪\" },\n  { value: \"+598\", label: \"🇺🇾 +598\", country: \"Uruguay\", flag: \"🇺🇾\" },\n  { value: \"+998\", label: \"🇺🇿 +998\", country: \"Uzbekistan\", flag: \"🇺🇿\" },\n  { value: \"+678\", label: \"🇻🇺 +678\", country: \"Vanuatu\", flag: \"🇻🇺\" },\n  { value: \"+39\", label: \"🇻🇦 +39\", country: \"Vatican City\", flag: \"🇻🇦\" },\n  { value: \"+58\", label: \"🇻🇪 +58\", country: \"Venezuela\", flag: \"🇻🇪\" },\n  { value: \"+84\", label: \"🇻🇳 +84\", country: \"Vietnam\", flag: \"🇻🇳\" },\n  { value: \"+1284\", label: \"🇻🇬 +1284\", country: \"British Virgin Islands\", flag: \"🇻🇬\" },\n  { value: \"+1340\", label: \"🇻🇮 +1340\", country: \"U.S. Virgin Islands\", flag: \"🇻🇮\" },\n  { value: \"+681\", label: \"🇼🇫 +681\", country: \"Wallis and Futuna\", flag: \"🇼🇫\" },\n  { value: \"+212\", label: \"🇪🇭 +212\", country: \"Western Sahara\", flag: \"🇪🇭\" },\n  { value: \"+967\", label: \"🇾🇪 +967\", country: \"Yemen\", flag: \"🇾🇪\" },\n  { value: \"+260\", label: \"🇿🇲 +260\", country: \"Zambia\", flag: \"🇿🇲\" },\n  { value: \"+263\", label: \"🇿🇼 +263\", country: \"Zimbabwe\", flag: \"🇿🇼\" },\n];\n\n// Helper function to get country by phone code\nexport const getCountryByPhoneCode = (phoneCode: string) => {\n  return globalPhoneCodes.find(country => country.value === phoneCode);\n};\n\n// Helper function to get all unique country codes\nexport const getAllCountryCodes = () => {\n  return globalPhoneCodes.map(country => country.value);\n};","size_bytes":19906},"client/src/components/FileUploader.tsx":{"content":"import { useState, useRef } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card } from \"@/components/ui/card\";\nimport { Upload, File, X, CheckCircle } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nimport { useLanguage } from \"@/contexts/LanguageContext\";\n\ninterface FileUploaderProps {\n  onFileUpload: (fileUrl: string) => void;\n  accept?: string;\n  maxFileSize?: number; // in bytes\n  fileType?: string; // for backend upload URL\n  placeholder?: string;\n  className?: string;\n}\n\nexport function FileUploader({\n  onFileUpload,\n  accept = \"image/*,.pdf\",\n  maxFileSize = 5 * 1024 * 1024, // 5MB\n  fileType = \"aadhar\",\n  placeholder = \"Upload file\",\n  className = \"\",\n}: FileUploaderProps) {\n  const [uploading, setUploading] = useState(false);\n  const [uploadedFile, setUploadedFile] = useState<string | null>(null);\n  const [selectedFile, setSelectedFile] = useState<File | null>(null);\n  const fileInputRef = useRef<HTMLInputElement>(null);\n  const { toast } = useToast();\n  const { t } = useLanguage();\n\n  const handleFileSelect = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0];\n    if (!file) return;\n\n    // Validate file size\n    if (file.size > maxFileSize) {\n      toast({\n        title: t(\"fileTooLarge\") || \"File too large\",\n        description: `File must be smaller than ${Math.round(maxFileSize / (1024 * 1024))}MB`,\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setSelectedFile(file);\n  };\n\n  const uploadFile = async () => {\n    if (!selectedFile) return;\n\n    setUploading(true);\n    try {\n      // Get upload URL from backend\n      const response = await fetch(\"/api/objects/upload\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({ fileType }),\n      });\n\n      if (!response.ok) {\n        throw new Error(\"Failed to get upload URL\");\n      }\n\n      const { uploadURL } = await response.json();\n\n      // Upload file directly to object storage\n      const uploadResponse = await fetch(uploadURL, {\n        method: \"PUT\",\n        body: selectedFile,\n        headers: {\n          \"Content-Type\": selectedFile.type,\n        },\n      });\n\n      if (!uploadResponse.ok) {\n        throw new Error(\"Failed to upload file\");\n      }\n\n      setUploadedFile(uploadURL);\n      onFileUpload(uploadURL);\n      \n      toast({\n        title: t(\"fileUploaded\") || \"File uploaded successfully\",\n        description: `${selectedFile.name} has been uploaded`,\n      });\n    } catch (error) {\n      console.error(\"Upload error:\", error);\n      toast({\n        title: t(\"uploadFailed\") || \"Upload failed\",\n        description: t(\"tryAgain\") || \"Please try again\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setUploading(false);\n    }\n  };\n\n  const removeFile = () => {\n    setSelectedFile(null);\n    setUploadedFile(null);\n    if (fileInputRef.current) {\n      fileInputRef.current.value = \"\";\n    }\n  };\n\n  return (\n    <div className={`space-y-4 ${className}`}>\n      {!uploadedFile && !selectedFile && (\n        <div className=\"border-2 border-dashed border-gray-300 dark:border-gray-600 rounded-lg p-6 text-center hover:border-yellow-400 transition-colors\">\n          <Upload className=\"mx-auto h-12 w-12 text-gray-400 mb-4\" />\n          <div className=\"space-y-2\">\n            <Button\n              variant=\"outline\"\n              onClick={() => fileInputRef.current?.click()}\n              className=\"relative\"\n            >\n              <File className=\"w-4 h-4 mr-2\" />\n              {placeholder}\n            </Button>\n            <p className=\"text-sm text-gray-500\">\n              Max file size: {Math.round(maxFileSize / (1024 * 1024))}MB\n            </p>\n          </div>\n          <Input\n            ref={fileInputRef}\n            type=\"file\"\n            accept={accept}\n            onChange={handleFileSelect}\n            className=\"hidden\"\n          />\n        </div>\n      )}\n\n      {selectedFile && !uploadedFile && (\n        <Card className=\"p-4 bg-gray-50 dark:bg-gray-800\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-3\">\n              <File className=\"h-8 w-8 text-blue-500\" />\n              <div>\n                <p className=\"font-medium text-sm\">{selectedFile.name}</p>\n                <p className=\"text-xs text-gray-500\">\n                  {(selectedFile.size / (1024 * 1024)).toFixed(2)} MB\n                </p>\n              </div>\n            </div>\n            <div className=\"flex items-center space-x-2\">\n              <Button\n                onClick={uploadFile}\n                disabled={uploading}\n                size=\"sm\"\n                className=\"bg-yellow-500 hover:bg-yellow-600 text-black\"\n              >\n                {uploading ? \"Uploading...\" : \"Upload\"}\n              </Button>\n              <Button\n                onClick={removeFile}\n                variant=\"outline\"\n                size=\"sm\"\n              >\n                <X className=\"h-4 w-4\" />\n              </Button>\n            </div>\n          </div>\n        </Card>\n      )}\n\n      {uploadedFile && (\n        <Card className=\"p-4 bg-green-50 dark:bg-green-900/20 border-green-200 dark:border-green-800\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-3\">\n              <CheckCircle className=\"h-8 w-8 text-green-500\" />\n              <div>\n                <p className=\"font-medium text-sm text-green-700 dark:text-green-300\">\n                  File uploaded successfully\n                </p>\n                <p className=\"text-xs text-green-600 dark:text-green-400\">\n                  {selectedFile?.name}\n                </p>\n              </div>\n            </div>\n            <Button\n              onClick={removeFile}\n              variant=\"outline\"\n              size=\"sm\"\n              className=\"border-green-300 text-green-700 hover:bg-green-100\"\n            >\n              <X className=\"h-4 w-4\" />\n            </Button>\n          </div>\n        </Card>\n      )}\n    </div>\n  );\n}","size_bytes":6190},"client/src/pages/home-tuition.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { \n  BookOpen, \n  Users, \n  User, \n  Clock, \n  MapPin, \n  Star,\n  Calendar,\n  IndianRupee,\n  ChevronRight,\n  GraduationCap,\n  Home\n} from \"lucide-react\";\nimport { Link } from \"wouter\";\nimport { motion } from \"framer-motion\";\n\n\ninterface HomeTuitionCourse {\n  id: string;\n  title: string;\n  description: string;\n  shortDescription: string;\n  oneToOnePrice: string;\n  groupLearningPrice: string;\n  maxGroupSize: number;\n  duration: string;\n  level: string;\n  curriculum: Array<{\n    module: string;\n    topics: string[];\n    duration: string;\n  }>;\n  prerequisites: string;\n  availableSeats: number;\n  occupiedSeats: number;\n  isActive: boolean;\n  applicationDeadline: string | null;\n  courseStartDate: string | null;\n  courseEndDate: string | null;\n  coverageArea: string;\n  specialInstructions: string | null;\n}\n\nexport default function HomeTuition() {\n  const [selectedTab, setSelectedTab] = useState(\"courses\");\n\n  const { data: courses = [], isLoading } = useQuery({\n    queryKey: [\"/api/home-tuition/courses\"],\n  });\n\n  const getLevelColor = (level: string) => {\n    switch (level) {\n      case \"beginner\":\n        return \"bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-300\";\n      case \"intermediate\":\n        return \"bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-300\";\n      case \"advanced\":\n        return \"bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-300\";\n      default:\n        return \"bg-gray-100 text-gray-800 dark:bg-gray-900 dark:text-gray-300\";\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-black relative overflow-hidden\">\n        {/* Cosmic Background */}\n        <div className=\"absolute inset-0 bg-gradient-to-br from-purple-900/20 via-black to-blue-900/20\" />\n        \n        <div className=\"relative z-10 pt-24 px-6 pb-6\">\n          <div className=\"max-w-7xl mx-auto\">\n            <div className=\"text-center mb-8\">\n              <div className=\"animate-pulse\">\n                <div className=\"h-8 bg-gray-300 rounded w-64 mx-auto mb-4\"></div>\n                <div className=\"h-4 bg-gray-300 rounded w-96 mx-auto\"></div>\n              </div>\n            </div>\n            \n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n              {[1, 2, 3].map((i) => (\n                <div key={i} className=\"animate-pulse\">\n                  <div className=\"h-96 bg-gray-300 rounded-lg\"></div>\n                </div>\n              ))}\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-black relative overflow-hidden\">\n      {/* Cosmic Background Animation */}\n      <div className=\"absolute inset-0 bg-gradient-to-br from-purple-900/20 via-black to-blue-900/20\" />\n      <div className=\"absolute inset-0\">\n        {/* Animated stars */}\n        {[...Array(50)].map((_, i) => (\n          <motion.div\n            key={i}\n            className=\"absolute w-1 h-1 bg-white rounded-full\"\n            style={{\n              left: `${Math.random() * 100}%`,\n              top: `${Math.random() * 100}%`,\n            }}\n            animate={{\n              opacity: [0.3, 1, 0.3],\n              scale: [0.5, 1.2, 0.5],\n            }}\n            transition={{\n              duration: Math.random() * 3 + 2,\n              repeat: Infinity,\n              delay: Math.random() * 2,\n            }}\n          />\n        ))}\n      </div>\n\n      <div className=\"relative z-10 pt-24 px-6 pb-6\">\n        <div className=\"max-w-7xl mx-auto\">\n          {/* Header */}\n          <motion.div \n            initial={{ opacity: 0, y: -20 }}\n            animate={{ opacity: 1, y: 0 }}\n            className=\"text-center mb-12\"\n          >\n            <h1 className=\"text-4xl md:text-6xl font-bold mb-6\">\n              <span className=\"bg-gradient-to-r from-yellow-400 via-yellow-300 to-yellow-500 bg-clip-text text-transparent drop-shadow-[0_0_30px_rgba(255,215,0,0.5)]\">\n                \"Home Tuition\"\n              </span>\n            </h1>\n            <p className=\"text-lg md:text-xl text-gray-300 max-w-3xl mx-auto leading-relaxed\">\n              Personalized astrology learning at your home with{\" \"}\n              <span className=\"text-yellow-400 font-semibold\">Astrologer Arup Shastri</span>. \n              Choose between one-to-one sessions or group learning for a comprehensive understanding of Vedic astrology.\n            </p>\n          </motion.div>\n\n          {/* Features Overview */}\n          <motion.div \n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ delay: 0.2 }}\n            className=\"grid grid-cols-1 md:grid-cols-4 gap-6 mb-12\"\n          >\n            {[\n              { icon: Home, title: \"At Your Home\", desc: \"Comfortable learning environment\" },\n              { icon: User, title: \"One-to-One\", desc: \"Personalized attention\" },\n              { icon: Users, title: \"Group Learning\", desc: \"Learn with peers\" },\n              { icon: GraduationCap, title: \"Expert Guidance\", desc: \"18+ years experience\" },\n            ].map((feature, index) => (\n              <Card key={index} className=\"bg-white/10 backdrop-blur-md border-white/20 hover:bg-white/15 transition-all duration-300\">\n                <CardContent className=\"p-6 text-center\">\n                  <feature.icon className=\"h-8 w-8 text-yellow-400 mx-auto mb-3\" />\n                  <h3 className=\"font-semibold text-white mb-2\">{feature.title}</h3>\n                  <p className=\"text-sm text-gray-300\">{feature.desc}</p>\n                </CardContent>\n              </Card>\n            ))}\n          </motion.div>\n\n          {/* Course Tabs */}\n          <Tabs value={selectedTab} onValueChange={setSelectedTab} className=\"w-full\">\n            <TabsList className=\"grid w-full grid-cols-2 mb-8 bg-white/10 backdrop-blur-md\">\n              <TabsTrigger value=\"courses\" className=\"data-[state=active]:bg-yellow-500 data-[state=active]:text-black\">\n                <BookOpen className=\"w-4 h-4 mr-2\" />\n                \"Available Courses\"\n              </TabsTrigger>\n              <TabsTrigger value=\"how-it-works\" className=\"data-[state=active]:bg-yellow-500 data-[state=active]:text-black\">\n                <Clock className=\"w-4 h-4 mr-2\" />\n                \"How It Works\"\n              </TabsTrigger>\n            </TabsList>\n\n            <TabsContent value=\"courses\" className=\"space-y-6\">\n              <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n                {(courses as HomeTuitionCourse[]).map((course: HomeTuitionCourse, index: number) => (\n                  <motion.div\n                    key={course.id}\n                    initial={{ opacity: 0, y: 20 }}\n                    animate={{ opacity: 1, y: 0 }}\n                    transition={{ delay: index * 0.1 }}\n                  >\n                    <Card className=\"bg-white/10 backdrop-blur-md border-white/20 hover:bg-white/15 transition-all duration-300 h-full\">\n                      <CardHeader>\n                        <div className=\"flex justify-between items-start mb-4\">\n                          <Badge className={getLevelColor(course.level)}>\n                            {course.level.charAt(0).toUpperCase() + course.level.slice(1)}\n                          </Badge>\n                          <div className=\"text-right\">\n                            <p className=\"text-sm text-gray-300\">Available Seats</p>\n                            <p className=\"font-bold text-yellow-400\">\n                              {course.availableSeats - course.occupiedSeats}\n                            </p>\n                          </div>\n                        </div>\n                        <CardTitle className=\"text-xl text-white mb-2\">\n                          {course.title}\n                        </CardTitle>\n                        <p className=\"text-gray-300 text-sm leading-relaxed\">\n                          {course.shortDescription}\n                        </p>\n                      </CardHeader>\n\n                      <CardContent className=\"space-y-6\">\n                        {/* Course Details */}\n                        <div className=\"grid grid-cols-2 gap-4\">\n                          <div className=\"flex items-center space-x-2\">\n                            <Clock className=\"h-4 w-4 text-yellow-400\" />\n                            <span className=\"text-sm text-gray-300\">{course.duration}</span>\n                          </div>\n                          <div className=\"flex items-center space-x-2\">\n                            <MapPin className=\"h-4 w-4 text-yellow-400\" />\n                            <span className=\"text-sm text-gray-300\">{course.coverageArea}</span>\n                          </div>\n                        </div>\n\n                        {/* Pricing */}\n                        <div className=\"space-y-3\">\n                          <div className=\"flex justify-between items-center p-3 bg-black/30 rounded-lg\">\n                            <div className=\"flex items-center space-x-2\">\n                              <User className=\"h-4 w-4 text-blue-400\" />\n                              <span className=\"text-sm text-gray-300\">One-to-One</span>\n                            </div>\n                            <div className=\"flex items-center space-x-1 text-yellow-400 font-bold\">\n                              <IndianRupee className=\"h-4 w-4\" />\n                              <span>{Number(course.oneToOnePrice).toLocaleString()}</span>\n                            </div>\n                          </div>\n                          \n                          <div className=\"flex justify-between items-center p-3 bg-black/30 rounded-lg\">\n                            <div className=\"flex items-center space-x-2\">\n                              <Users className=\"h-4 w-4 text-green-400\" />\n                              <span className=\"text-sm text-gray-300\">\n                                Group ({course.maxGroupSize} max)\n                              </span>\n                            </div>\n                            <div className=\"flex items-center space-x-1 text-yellow-400 font-bold\">\n                              <IndianRupee className=\"h-4 w-4\" />\n                              <span>{Number(course.groupLearningPrice).toLocaleString()}</span>\n                            </div>\n                          </div>\n                        </div>\n\n                        {/* Prerequisites */}\n                        <div className=\"bg-blue-500/20 p-3 rounded-lg\">\n                          <h4 className=\"text-sm font-semibold text-blue-300 mb-1\">Prerequisites</h4>\n                          <p className=\"text-xs text-gray-300\">{course.prerequisites}</p>\n                        </div>\n\n                        {/* Application Buttons */}\n                        <div className=\"space-y-3\">\n                          <Link href={`/home-tuition/apply/one-to-one/${course.id}`}>\n                            <Button className=\"w-full bg-gradient-to-r from-blue-600 to-blue-700 hover:from-blue-700 hover:to-blue-800 text-white\">\n                              <User className=\"w-4 h-4 mr-2\" />\n                              Apply for One-to-One\n                              <ChevronRight className=\"w-4 h-4 ml-2\" />\n                            </Button>\n                          </Link>\n                          \n                          <Link href={`/home-tuition/apply/group/${course.id}`}>\n                            <Button className=\"w-full bg-gradient-to-r from-green-600 to-green-700 hover:from-green-700 hover:to-green-800 text-white\">\n                              <Users className=\"w-4 h-4 mr-2\" />\n                              Apply for Group Learning\n                              <ChevronRight className=\"w-4 h-4 ml-2\" />\n                            </Button>\n                          </Link>\n                        </div>\n\n                        {/* Deadlines */}\n                        {course.applicationDeadline && (\n                          <div className=\"flex items-center space-x-2 text-orange-400 bg-orange-500/20 p-2 rounded\">\n                            <Calendar className=\"h-4 w-4\" />\n                            <span className=\"text-xs\">\n                              Application Deadline: {new Date(course.applicationDeadline).toLocaleDateString()}\n                            </span>\n                          </div>\n                        )}\n                      </CardContent>\n                    </Card>\n                  </motion.div>\n                ))}\n              </div>\n            </TabsContent>\n\n            <TabsContent value=\"how-it-works\" className=\"space-y-6\">\n              <motion.div\n                initial={{ opacity: 0, y: 20 }}\n                animate={{ opacity: 1, y: 0 }}\n                className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\"\n              >\n                {[\n                  {\n                    step: \"1\",\n                    title: \"Apply Online\",\n                    description: \"Submit your application with personal details and upload your Aadhar card for verification.\"\n                  },\n                  {\n                    step: \"2\", \n                    title: \"Interview Process\",\n                    description: \"Selected candidates will be interviewed to assess their dedication and learning goals.\"\n                  },\n                  {\n                    step: \"3\",\n                    title: \"Course Selection\",\n                    description: \"Upon selection, choose between one-to-one or group learning format based on your preference.\"\n                  },\n                  {\n                    step: \"4\",\n                    title: \"Home Sessions\",\n                    description: \"Begin your astrology journey with personalized sessions conducted at your home.\"\n                  }\n                ].map((step, index) => (\n                  <motion.div\n                    key={step.step}\n                    initial={{ opacity: 0, y: 20 }}\n                    animate={{ opacity: 1, y: 0 }}\n                    transition={{ delay: index * 0.1 }}\n                  >\n                    <Card className=\"bg-white/10 backdrop-blur-md border-white/20 hover:bg-white/15 transition-all duration-300 h-full\">\n                      <CardContent className=\"p-6 text-center\">\n                        <div className=\"w-12 h-12 bg-yellow-500 text-black rounded-full flex items-center justify-center text-xl font-bold mx-auto mb-4\">\n                          {step.step}\n                        </div>\n                        <h3 className=\"font-semibold text-white mb-3\">{step.title}</h3>\n                        <p className=\"text-sm text-gray-300 leading-relaxed\">{step.description}</p>\n                      </CardContent>\n                    </Card>\n                  </motion.div>\n                ))}\n              </motion.div>\n\n              {/* Additional Info */}\n              <motion.div\n                initial={{ opacity: 0, y: 20 }}\n                animate={{ opacity: 1, y: 0 }}\n                transition={{ delay: 0.4 }}\n                className=\"grid grid-cols-1 md:grid-cols-2 gap-6 mt-8\"\n              >\n                <Card className=\"bg-white/10 backdrop-blur-md border-white/20\">\n                  <CardHeader>\n                    <CardTitle className=\"text-white flex items-center\">\n                      <Star className=\"w-5 h-5 text-yellow-400 mr-2\" />\n                      Why Choose Home Tuition?\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent className=\"space-y-3\">\n                    <ul className=\"space-y-2 text-gray-300\">\n                      <li>• Comfortable learning in your own environment</li>\n                      <li>• Flexible scheduling based on your availability</li>\n                      <li>• Personalized attention and customized teaching</li>\n                      <li>• Direct interaction with experienced astrologer</li>\n                      <li>• Practical hands-on learning approach</li>\n                    </ul>\n                  </CardContent>\n                </Card>\n\n                <Card className=\"bg-white/10 backdrop-blur-md border-white/20\">\n                  <CardHeader>\n                    <CardTitle className=\"text-white flex items-center\">\n                      <MapPin className=\"w-5 h-5 text-yellow-400 mr-2\" />\n                      Service Coverage\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent className=\"space-y-3\">\n                    <div className=\"text-gray-300\">\n                      <p className=\"mb-2\"><strong>Primary Area:</strong> Within 25km of Kolkata city center</p>\n                      <p className=\"mb-2\"><strong>Special Arrangements:</strong> Extended coverage for group learning (4+ students)</p>\n                      <p className=\"text-sm text-yellow-400\">\n                        Contact us for specific location availability\n                      </p>\n                    </div>\n                  </CardContent>\n                </Card>\n              </motion.div>\n            </TabsContent>\n          </Tabs>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":17612},"client/src/pages/home-tuition/apply/group/[courseId].tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useRoute } from \"wouter\";\nimport { useForm, useFieldArray } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { \n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { FileUploader } from \"@/components/FileUploader\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { \n  Users, \n  IndianRupee, \n  Clock, \n  MapPin, \n  FileText,\n  Phone,\n  Mail,\n  Calendar,\n  Home,\n  ArrowLeft,\n  Plus,\n  Trash2,\n  UserPlus\n} from \"lucide-react\";\nimport { Link } from \"wouter\";\nimport { motion } from \"framer-motion\";\n\nconst studentSchema = z.object({\n  name: z.string().min(2, \"Name must be at least 2 characters\"),\n  phone: z.string().min(10, \"Valid phone number required\"),\n  email: z.string().email(\"Valid email required\").optional().or(z.literal(\"\")),\n  dateOfBirth: z.string().min(1, \"Date of birth is required\"),\n  timeOfBirth: z.string().min(1, \"Time of birth is required\"),\n  placeOfBirth: z.string().min(1, \"Place of birth is required\"),\n});\n\nconst applicationSchema = z.object({\n  students: z.array(studentSchema).min(2, \"Minimum 2 students required for group learning\").max(5, \"Maximum 5 students allowed\"),\n  address: z.string().min(10, \"Complete address is required\"),\n  city: z.string().min(1, \"City is required\"),\n  state: z.string().min(1, \"State is required\"),\n  pincode: z.string().min(6, \"Valid pincode required\"),\n  preferredTimings: z.string().min(1, \"Preferred timings are required\"),\n  additionalNotes: z.string().optional(),\n});\n\ntype ApplicationForm = z.infer<typeof applicationSchema>;\n\nexport default function GroupApplication() {\n  const [, params] = useRoute(\"/home-tuition/apply/group/:courseId\");\n  const courseId = params?.courseId;\n  const [aadharCardUrls, setAadharCardUrls] = useState<string[]>([]);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const form = useForm<ApplicationForm>({\n    resolver: zodResolver(applicationSchema),\n    defaultValues: {\n      students: [\n        {\n          name: \"\",\n          phone: \"\",\n          email: \"\",\n          dateOfBirth: \"\",\n          timeOfBirth: \"\",\n          placeOfBirth: \"\",\n        },\n        {\n          name: \"\",\n          phone: \"\",\n          email: \"\",\n          dateOfBirth: \"\",\n          timeOfBirth: \"\",\n          placeOfBirth: \"\",\n        },\n      ],\n      address: \"\",\n      city: \"\",\n      state: \"\",\n      pincode: \"\",\n      preferredTimings: \"\",\n      additionalNotes: \"\",\n    },\n  });\n\n  const { fields, append, remove } = useFieldArray({\n    control: form.control,\n    name: \"students\",\n  });\n\n  const { data: course, isLoading: courseLoading } = useQuery({\n    queryKey: [`/api/home-tuition/courses/${courseId}`],\n    enabled: !!courseId,\n  });\n\n  const applicationMutation = useMutation({\n    mutationFn: async (data: ApplicationForm) => {\n      if (aadharCardUrls.length !== data.students.length) {\n        throw new Error(\"Please upload Aadhar card for each student\");\n      }\n\n      const applicationData = {\n        applicantId: \"current-user-id\", // This should come from auth context\n        applicationType: \"group_learning\",\n        courseId: courseId!,\n        studentDetails: data.students,\n        aadharCardUrls: aadharCardUrls,\n        birthDetails: data.students.map(student => ({\n          dateOfBirth: student.dateOfBirth,\n          timeOfBirth: student.timeOfBirth,\n          placeOfBirth: student.placeOfBirth,\n        })),\n        tuitionAddress: {\n          address: data.address,\n          city: data.city,\n          state: data.state,\n          pincode: data.pincode,\n        },\n        preferredTimings: data.preferredTimings,\n        additionalNotes: data.additionalNotes,\n      };\n\n      return apiRequest(\"POST\", \"/api/home-tuition/applications\", applicationData);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Group Application Submitted Successfully\",\n        description: \"We will review your group application and contact you within 2-3 business days.\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/home-tuition/applications\"] });\n      // Redirect to a success page or applications list\n      window.location.href = \"/home-tuition/applications\";\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Application Failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const addStudent = () => {\n    if (fields.length < 5) {\n      append({\n        name: \"\",\n        phone: \"\",\n        email: \"\",\n        dateOfBirth: \"\",\n        timeOfBirth: \"\",\n        placeOfBirth: \"\",\n      });\n    }\n  };\n\n  const removeStudent = (index: number) => {\n    if (fields.length > 2) {\n      remove(index);\n      // Remove corresponding aadhar card URL\n      const newUrls = [...aadharCardUrls];\n      newUrls.splice(index, 1);\n      setAadharCardUrls(newUrls);\n    }\n  };\n\n  const handleAadharUpload = (index: number, url: string) => {\n    const newUrls = [...aadharCardUrls];\n    newUrls[index] = url;\n    setAadharCardUrls(newUrls);\n  };\n\n  const onSubmit = (data: ApplicationForm) => {\n    applicationMutation.mutate(data);\n  };\n\n  if (courseLoading) {\n    return (\n      <div className=\"min-h-screen bg-black relative overflow-hidden\">\n        <div className=\"absolute inset-0 bg-gradient-to-br from-purple-900/20 via-black to-blue-900/20\" />\n        <div className=\"relative z-10 p-6\">\n          <div className=\"max-w-6xl mx-auto\">\n            <div className=\"animate-pulse space-y-6\">\n              <div className=\"h-8 bg-gray-300 rounded w-64\"></div>\n              <div className=\"h-96 bg-gray-300 rounded-lg\"></div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (!course) {\n    return (\n      <div className=\"min-h-screen bg-black relative overflow-hidden flex items-center justify-center\">\n        <div className=\"absolute inset-0 bg-gradient-to-br from-purple-900/20 via-black to-blue-900/20\" />\n        <div className=\"relative z-10 text-center\">\n          <h1 className=\"text-2xl font-bold text-white mb-4\">Course Not Found</h1>\n          <Link href=\"/home-tuition\">\n            <Button className=\"bg-yellow-500 hover:bg-yellow-600 text-black\">\n              Back to Courses\n            </Button>\n          </Link>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-black relative overflow-hidden\">\n      {/* Cosmic Background */}\n      <div className=\"absolute inset-0 bg-gradient-to-br from-purple-900/20 via-black to-blue-900/20\" />\n\n      <div className=\"relative z-10 p-6\">\n        <div className=\"max-w-6xl mx-auto\">\n          {/* Header */}\n          <motion.div \n            initial={{ opacity: 0, y: -20 }}\n            animate={{ opacity: 1, y: 0 }}\n            className=\"mb-8\"\n          >\n            <Link href=\"/home-tuition\">\n              <Button variant=\"outline\" className=\"mb-4 border-white/20 text-white hover:bg-white/10\">\n                <ArrowLeft className=\"w-4 h-4 mr-2\" />\n                Back to Courses\n              </Button>\n            </Link>\n            \n            <h1 className=\"text-3xl md:text-4xl font-bold mb-4\">\n              <span className=\"bg-gradient-to-r from-yellow-400 via-yellow-300 to-yellow-500 bg-clip-text text-transparent drop-shadow-[0_0_30px_rgba(255,215,0,0.5)]\">\n                Group Learning Application\n              </span>\n            </h1>\n            <p className=\"text-gray-300 mb-6\">\n              Apply for group astrology learning with friends, family, or fellow enthusiasts\n            </p>\n          </motion.div>\n\n          <div className=\"grid grid-cols-1 lg:grid-cols-4 gap-8\">\n            {/* Course Details */}\n            <motion.div\n              initial={{ opacity: 0, x: -20 }}\n              animate={{ opacity: 1, x: 0 }}\n              transition={{ delay: 0.1 }}\n              className=\"lg:col-span-1\"\n            >\n              <Card className=\"bg-white/10 backdrop-blur-md border-white/20 sticky top-6\">\n                <CardHeader>\n                  <CardTitle className=\"text-white\">{course.title}</CardTitle>\n                  <Badge className=\"w-fit bg-green-100 text-green-800\">\n                    {course.level.charAt(0).toUpperCase() + course.level.slice(1)}\n                  </Badge>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <div className=\"space-y-3\">\n                    <div className=\"flex items-center space-x-2\">\n                      <Users className=\"h-4 w-4 text-green-400\" />\n                      <span className=\"text-sm text-gray-300\">Group Learning</span>\n                    </div>\n                    <div className=\"flex items-center space-x-2\">\n                      <IndianRupee className=\"h-4 w-4 text-yellow-400\" />\n                      <span className=\"text-sm text-gray-300\">₹{Number(course.groupLearningPrice).toLocaleString()} per person</span>\n                    </div>\n                    <div className=\"flex items-center space-x-2\">\n                      <Clock className=\"h-4 w-4 text-green-400\" />\n                      <span className=\"text-sm text-gray-300\">{course.duration}</span>\n                    </div>\n                    <div className=\"flex items-center space-x-2\">\n                      <MapPin className=\"h-4 w-4 text-red-400\" />\n                      <span className=\"text-sm text-gray-300\">{course.coverageArea}</span>\n                    </div>\n                  </div>\n\n                  <div className=\"bg-green-500/20 p-3 rounded-lg\">\n                    <h4 className=\"text-sm font-semibold text-green-300 mb-1\">Group Size</h4>\n                    <p className=\"text-xs text-gray-300\">2-{course.maxGroupSize} students per group</p>\n                  </div>\n\n                  <div className=\"bg-yellow-500/20 p-3 rounded-lg\">\n                    <h4 className=\"text-sm font-semibold text-yellow-300 mb-1\">Prerequisites</h4>\n                    <p className=\"text-xs text-gray-300\">{course.prerequisites}</p>\n                  </div>\n\n                  {course.specialInstructions && (\n                    <div className=\"bg-blue-500/20 p-3 rounded-lg\">\n                      <h4 className=\"text-sm font-semibold text-blue-300 mb-1\">Special Instructions</h4>\n                      <p className=\"text-xs text-gray-300\">{course.specialInstructions}</p>\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n            </motion.div>\n\n            {/* Application Form */}\n            <motion.div\n              initial={{ opacity: 0, x: 20 }}\n              animate={{ opacity: 1, x: 0 }}\n              transition={{ delay: 0.2 }}\n              className=\"lg:col-span-3\"\n            >\n              <Card className=\"bg-white/10 backdrop-blur-md border-white/20\">\n                <CardHeader>\n                  <CardTitle className=\"text-white flex items-center\">\n                    <FileText className=\"w-5 h-5 mr-2\" />\n                    Group Application Form\n                  </CardTitle>\n                  <p className=\"text-sm text-gray-400\">\n                    Please provide details for all students who will participate in the group learning\n                  </p>\n                </CardHeader>\n                <CardContent>\n                  <Form {...form}>\n                    <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-8\">\n                      {/* Students Information */}\n                      <div className=\"space-y-6\">\n                        <div className=\"flex items-center justify-between\">\n                          <h3 className=\"text-lg font-semibold text-white flex items-center\">\n                            <Users className=\"w-4 h-4 mr-2\" />\n                            Students Information\n                          </h3>\n                          <Button\n                            type=\"button\"\n                            onClick={addStudent}\n                            disabled={fields.length >= 5}\n                            variant=\"outline\"\n                            size=\"sm\"\n                            className=\"border-green-400 text-green-400 hover:bg-green-400/10\"\n                          >\n                            <UserPlus className=\"w-4 h-4 mr-2\" />\n                            Add Student\n                          </Button>\n                        </div>\n\n                        {fields.map((field, index) => (\n                          <motion.div\n                            key={field.id}\n                            initial={{ opacity: 0, y: 20 }}\n                            animate={{ opacity: 1, y: 0 }}\n                            transition={{ delay: index * 0.1 }}\n                          >\n                            <Card className=\"bg-black/30 border-white/10\">\n                              <CardHeader className=\"pb-4\">\n                                <div className=\"flex items-center justify-between\">\n                                  <CardTitle className=\"text-white text-lg\">\n                                    Student {index + 1}\n                                  </CardTitle>\n                                  {fields.length > 2 && (\n                                    <Button\n                                      type=\"button\"\n                                      onClick={() => removeStudent(index)}\n                                      variant=\"outline\"\n                                      size=\"sm\"\n                                      className=\"border-red-400 text-red-400 hover:bg-red-400/10\"\n                                    >\n                                      <Trash2 className=\"w-4 h-4\" />\n                                    </Button>\n                                  )}\n                                </div>\n                              </CardHeader>\n                              <CardContent className=\"space-y-4\">\n                                {/* Personal Info */}\n                                <FormField\n                                  control={form.control}\n                                  name={`students.${index}.name`}\n                                  render={({ field }) => (\n                                    <FormItem>\n                                      <FormLabel className=\"text-gray-300\">Full Name</FormLabel>\n                                      <FormControl>\n                                        <Input \n                                          {...field} \n                                          className=\"bg-white/10 border-white/20 text-white\"\n                                          placeholder=\"Enter student's full name\"\n                                        />\n                                      </FormControl>\n                                      <FormMessage />\n                                    </FormItem>\n                                  )}\n                                />\n\n                                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                                  <FormField\n                                    control={form.control}\n                                    name={`students.${index}.phone`}\n                                    render={({ field }) => (\n                                      <FormItem>\n                                        <FormLabel className=\"text-gray-300\">\n                                          <Phone className=\"w-4 h-4 inline mr-1\" />\n                                          Phone Number\n                                        </FormLabel>\n                                        <FormControl>\n                                          <Input \n                                            {...field} \n                                            className=\"bg-white/10 border-white/20 text-white\"\n                                            placeholder=\"10-digit phone number\"\n                                          />\n                                        </FormControl>\n                                        <FormMessage />\n                                      </FormItem>\n                                    )}\n                                  />\n\n                                  <FormField\n                                    control={form.control}\n                                    name={`students.${index}.email`}\n                                    render={({ field }) => (\n                                      <FormItem>\n                                        <FormLabel className=\"text-gray-300\">\n                                          <Mail className=\"w-4 h-4 inline mr-1\" />\n                                          Email (Optional)\n                                        </FormLabel>\n                                        <FormControl>\n                                          <Input \n                                            {...field} \n                                            type=\"email\"\n                                            className=\"bg-white/10 border-white/20 text-white\"\n                                            placeholder=\"email@example.com\"\n                                          />\n                                        </FormControl>\n                                        <FormMessage />\n                                      </FormItem>\n                                    )}\n                                  />\n                                </div>\n\n                                {/* Birth Details */}\n                                <div className=\"space-y-4\">\n                                  <h4 className=\"text-sm font-semibold text-gray-300 flex items-center\">\n                                    <Calendar className=\"w-4 h-4 mr-1\" />\n                                    Birth Details\n                                  </h4>\n                                  \n                                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                                    <FormField\n                                      control={form.control}\n                                      name={`students.${index}.dateOfBirth`}\n                                      render={({ field }) => (\n                                        <FormItem>\n                                          <FormLabel className=\"text-gray-300\">Date of Birth</FormLabel>\n                                          <FormControl>\n                                            <Input \n                                              {...field} \n                                              type=\"date\"\n                                              className=\"bg-white/10 border-white/20 text-white\"\n                                            />\n                                          </FormControl>\n                                          <FormMessage />\n                                        </FormItem>\n                                      )}\n                                    />\n\n                                    <FormField\n                                      control={form.control}\n                                      name={`students.${index}.timeOfBirth`}\n                                      render={({ field }) => (\n                                        <FormItem>\n                                          <FormLabel className=\"text-gray-300\">Time of Birth</FormLabel>\n                                          <FormControl>\n                                            <Input \n                                              {...field} \n                                              type=\"time\"\n                                              className=\"bg-white/10 border-white/20 text-white\"\n                                            />\n                                          </FormControl>\n                                          <FormMessage />\n                                        </FormItem>\n                                      )}\n                                    />\n                                  </div>\n\n                                  <FormField\n                                    control={form.control}\n                                    name={`students.${index}.placeOfBirth`}\n                                    render={({ field }) => (\n                                      <FormItem>\n                                        <FormLabel className=\"text-gray-300\">Place of Birth</FormLabel>\n                                        <FormControl>\n                                          <Input \n                                            {...field} \n                                            className=\"bg-white/10 border-white/20 text-white\"\n                                            placeholder=\"City, State, Country\"\n                                          />\n                                        </FormControl>\n                                        <FormMessage />\n                                      </FormItem>\n                                    )}\n                                  />\n                                </div>\n\n                                {/* Aadhar Upload */}\n                                <div className=\"space-y-2\">\n                                  <h4 className=\"text-sm font-semibold text-gray-300\">\n                                    Aadhar Card Verification\n                                  </h4>\n                                  <FileUploader\n                                    onFileUpload={(url) => handleAadharUpload(index, url)}\n                                    accept=\"image/*,.pdf\"\n                                    maxFileSize={5 * 1024 * 1024}\n                                    fileType=\"aadhar\"\n                                    placeholder={`Upload Aadhar Card for ${field.name || 'Student ' + (index + 1)}`}\n                                    className=\"w-full\"\n                                  />\n                                </div>\n                              </CardContent>\n                            </Card>\n                          </motion.div>\n                        ))}\n                      </div>\n\n                      {/* Address */}\n                      <div className=\"space-y-4\">\n                        <h3 className=\"text-lg font-semibold text-white flex items-center\">\n                          <Home className=\"w-4 h-4 mr-2\" />\n                          Tuition Address\n                        </h3>\n                        \n                        <FormField\n                          control={form.control}\n                          name=\"address\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel className=\"text-gray-300\">Complete Address</FormLabel>\n                              <FormControl>\n                                <Textarea \n                                  {...field} \n                                  className=\"bg-white/10 border-white/20 text-white\"\n                                  placeholder=\"House/Flat number, Street, Locality\"\n                                  rows={3}\n                                />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n\n                        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                          <FormField\n                            control={form.control}\n                            name=\"city\"\n                            render={({ field }) => (\n                              <FormItem>\n                                <FormLabel className=\"text-gray-300\">City</FormLabel>\n                                <FormControl>\n                                  <Input \n                                    {...field} \n                                    className=\"bg-white/10 border-white/20 text-white\"\n                                    placeholder=\"Kolkata\"\n                                  />\n                                </FormControl>\n                                <FormMessage />\n                              </FormItem>\n                            )}\n                          />\n\n                          <FormField\n                            control={form.control}\n                            name=\"state\"\n                            render={({ field }) => (\n                              <FormItem>\n                                <FormLabel className=\"text-gray-300\">State</FormLabel>\n                                <FormControl>\n                                  <Input \n                                    {...field} \n                                    className=\"bg-white/10 border-white/20 text-white\"\n                                    placeholder=\"West Bengal\"\n                                  />\n                                </FormControl>\n                                <FormMessage />\n                              </FormItem>\n                            )}\n                          />\n\n                          <FormField\n                            control={form.control}\n                            name=\"pincode\"\n                            render={({ field }) => (\n                              <FormItem>\n                                <FormLabel className=\"text-gray-300\">Pincode</FormLabel>\n                                <FormControl>\n                                  <Input \n                                    {...field} \n                                    className=\"bg-white/10 border-white/20 text-white\"\n                                    placeholder=\"700001\"\n                                  />\n                                </FormControl>\n                                <FormMessage />\n                              </FormItem>\n                            )}\n                          />\n                        </div>\n                      </div>\n\n                      {/* Preferences */}\n                      <div className=\"space-y-4\">\n                        <h3 className=\"text-lg font-semibold text-white\">Preferences</h3>\n                        \n                        <FormField\n                          control={form.control}\n                          name=\"preferredTimings\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel className=\"text-gray-300\">Preferred Timings</FormLabel>\n                              <FormControl>\n                                <Input \n                                  {...field} \n                                  className=\"bg-white/10 border-white/20 text-white\"\n                                  placeholder=\"e.g., Weekends 10 AM - 12 PM, Weekdays 6 PM - 8 PM\"\n                                />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n\n                        <FormField\n                          control={form.control}\n                          name=\"additionalNotes\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel className=\"text-gray-300\">Additional Notes (Optional)</FormLabel>\n                              <FormControl>\n                                <Textarea \n                                  {...field} \n                                  className=\"bg-white/10 border-white/20 text-white\"\n                                  placeholder=\"Any specific requirements or questions...\"\n                                  rows={3}\n                                />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                      </div>\n\n                      {/* Submit Button */}\n                      <div className=\"pt-6\">\n                        <Button\n                          type=\"submit\"\n                          disabled={\n                            applicationMutation.isPending || \n                            aadharCardUrls.length !== fields.length ||\n                            aadharCardUrls.some(url => !url)\n                          }\n                          className=\"w-full bg-gradient-to-r from-green-500 to-green-600 hover:from-green-600 hover:to-green-700 text-white font-semibold py-3\"\n                        >\n                          {applicationMutation.isPending ? \"Submitting Group Application...\" : \"Submit Group Application\"}\n                        </Button>\n                        \n                        {(aadharCardUrls.length !== fields.length || aadharCardUrls.some(url => !url)) && (\n                          <p className=\"text-sm text-red-400 mt-2 text-center\">\n                            Please upload Aadhar card for each student to continue\n                          </p>\n                        )}\n                      </div>\n                    </form>\n                  </Form>\n                </CardContent>\n              </Card>\n            </motion.div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":29798},"client/src/pages/home-tuition/apply/one-to-one/[courseId].tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useRoute } from \"wouter\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Label } from \"@/components/ui/label\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { \n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { FileUploader } from \"@/components/FileUploader\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { \n  User, \n  IndianRupee, \n  Clock, \n  MapPin, \n  FileText,\n  Phone,\n  Mail,\n  Calendar,\n  Home,\n  ArrowLeft\n} from \"lucide-react\";\nimport { Link } from \"wouter\";\nimport { motion } from \"framer-motion\";\n\nconst applicationSchema = z.object({\n  studentName: z.string().min(2, \"Name must be at least 2 characters\"),\n  studentPhone: z.string().min(10, \"Valid phone number required\"),\n  studentEmail: z.string().email(\"Valid email required\").optional().or(z.literal(\"\")),\n  dateOfBirth: z.string().min(1, \"Date of birth is required\"),\n  timeOfBirth: z.string().min(1, \"Time of birth is required\"),\n  placeOfBirth: z.string().min(1, \"Place of birth is required\"),\n  address: z.string().min(10, \"Complete address is required\"),\n  city: z.string().min(1, \"City is required\"),\n  state: z.string().min(1, \"State is required\"),\n  pincode: z.string().min(6, \"Valid pincode required\"),\n  preferredTimings: z.string().min(1, \"Preferred timings are required\"),\n  additionalNotes: z.string().optional(),\n});\n\ntype ApplicationForm = z.infer<typeof applicationSchema>;\n\nexport default function OneToOneApplication() {\n  const [, params] = useRoute(\"/home-tuition/apply/one-to-one/:courseId\");\n  const courseId = params?.courseId;\n  const [aadharCardUrl, setAadharCardUrl] = useState<string>(\"\");\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const form = useForm<ApplicationForm>({\n    resolver: zodResolver(applicationSchema),\n    defaultValues: {\n      studentName: \"\",\n      studentPhone: \"\",\n      studentEmail: \"\",\n      dateOfBirth: \"\",\n      timeOfBirth: \"\",\n      placeOfBirth: \"\",\n      address: \"\",\n      city: \"\",\n      state: \"\",\n      pincode: \"\",\n      preferredTimings: \"\",\n      additionalNotes: \"\",\n    },\n  });\n\n  const { data: course, isLoading: courseLoading } = useQuery({\n    queryKey: [`/api/home-tuition/courses/${courseId}`],\n    enabled: !!courseId,\n  });\n\n  const applicationMutation = useMutation({\n    mutationFn: async (data: ApplicationForm) => {\n      if (!aadharCardUrl) {\n        throw new Error(\"Aadhar card upload is required\");\n      }\n\n      const applicationData = {\n        applicantId: \"current-user-id\", // This should come from auth context\n        applicationType: \"one_to_one\",\n        courseId: courseId!,\n        studentDetails: [\n          {\n            name: data.studentName,\n            phone: data.studentPhone,\n            email: data.studentEmail || null,\n            dateOfBirth: data.dateOfBirth,\n            timeOfBirth: data.timeOfBirth,\n            placeOfBirth: data.placeOfBirth,\n          }\n        ],\n        aadharCardUrls: [aadharCardUrl],\n        birthDetails: [\n          {\n            dateOfBirth: data.dateOfBirth,\n            timeOfBirth: data.timeOfBirth,\n            placeOfBirth: data.placeOfBirth,\n          }\n        ],\n        tuitionAddress: {\n          address: data.address,\n          city: data.city,\n          state: data.state,\n          pincode: data.pincode,\n        },\n        preferredTimings: data.preferredTimings,\n        additionalNotes: data.additionalNotes,\n      };\n\n      return apiRequest(\"POST\", \"/api/home-tuition/applications\", applicationData);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Application Submitted Successfully\",\n        description: \"We will review your application and contact you within 2-3 business days.\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/home-tuition/applications\"] });\n      // Redirect to a success page or applications list\n      window.location.href = \"/home-tuition/applications\";\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Application Failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: ApplicationForm) => {\n    applicationMutation.mutate(data);\n  };\n\n  if (courseLoading) {\n    return (\n      <div className=\"min-h-screen bg-black relative overflow-hidden\">\n        <div className=\"absolute inset-0 bg-gradient-to-br from-purple-900/20 via-black to-blue-900/20\" />\n        <div className=\"relative z-10 p-6\">\n          <div className=\"max-w-4xl mx-auto\">\n            <div className=\"animate-pulse space-y-6\">\n              <div className=\"h-8 bg-gray-300 rounded w-64\"></div>\n              <div className=\"h-96 bg-gray-300 rounded-lg\"></div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (!course) {\n    return (\n      <div className=\"min-h-screen bg-black relative overflow-hidden flex items-center justify-center\">\n        <div className=\"absolute inset-0 bg-gradient-to-br from-purple-900/20 via-black to-blue-900/20\" />\n        <div className=\"relative z-10 text-center\">\n          <h1 className=\"text-2xl font-bold text-white mb-4\">Course Not Found</h1>\n          <Link href=\"/home-tuition\">\n            <Button className=\"bg-yellow-500 hover:bg-yellow-600 text-black\">\n              Back to Courses\n            </Button>\n          </Link>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-black relative overflow-hidden\">\n      {/* Cosmic Background */}\n      <div className=\"absolute inset-0 bg-gradient-to-br from-purple-900/20 via-black to-blue-900/20\" />\n\n      <div className=\"relative z-10 p-6\">\n        <div className=\"max-w-4xl mx-auto\">\n          {/* Header */}\n          <motion.div \n            initial={{ opacity: 0, y: -20 }}\n            animate={{ opacity: 1, y: 0 }}\n            className=\"mb-8\"\n          >\n            <Link href=\"/home-tuition\">\n              <Button variant=\"outline\" className=\"mb-4 border-white/20 text-white hover:bg-white/10\">\n                <ArrowLeft className=\"w-4 h-4 mr-2\" />\n                Back to Courses\n              </Button>\n            </Link>\n            \n            <h1 className=\"text-3xl md:text-4xl font-bold mb-4\">\n              <span className=\"bg-gradient-to-r from-yellow-400 via-yellow-300 to-yellow-500 bg-clip-text text-transparent drop-shadow-[0_0_30px_rgba(255,215,0,0.5)]\">\n                One-to-One Application\n              </span>\n            </h1>\n            <p className=\"text-gray-300 mb-6\">\n              Apply for personalized astrology learning at your home\n            </p>\n          </motion.div>\n\n          <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n            {/* Course Details */}\n            <motion.div\n              initial={{ opacity: 0, x: -20 }}\n              animate={{ opacity: 1, x: 0 }}\n              transition={{ delay: 0.1 }}\n              className=\"lg:col-span-1\"\n            >\n              <Card className=\"bg-white/10 backdrop-blur-md border-white/20 sticky top-6\">\n                <CardHeader>\n                  <CardTitle className=\"text-white\">{course.title}</CardTitle>\n                  <Badge className=\"w-fit bg-blue-100 text-blue-800\">\n                    {course.level.charAt(0).toUpperCase() + course.level.slice(1)}\n                  </Badge>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <div className=\"space-y-3\">\n                    <div className=\"flex items-center space-x-2\">\n                      <User className=\"h-4 w-4 text-blue-400\" />\n                      <span className=\"text-sm text-gray-300\">One-to-One Session</span>\n                    </div>\n                    <div className=\"flex items-center space-x-2\">\n                      <IndianRupee className=\"h-4 w-4 text-yellow-400\" />\n                      <span className=\"text-sm text-gray-300\">₹{Number(course.oneToOnePrice).toLocaleString()}</span>\n                    </div>\n                    <div className=\"flex items-center space-x-2\">\n                      <Clock className=\"h-4 w-4 text-green-400\" />\n                      <span className=\"text-sm text-gray-300\">{course.duration}</span>\n                    </div>\n                    <div className=\"flex items-center space-x-2\">\n                      <MapPin className=\"h-4 w-4 text-red-400\" />\n                      <span className=\"text-sm text-gray-300\">{course.coverageArea}</span>\n                    </div>\n                  </div>\n\n                  <div className=\"bg-yellow-500/20 p-3 rounded-lg\">\n                    <h4 className=\"text-sm font-semibold text-yellow-300 mb-1\">Prerequisites</h4>\n                    <p className=\"text-xs text-gray-300\">{course.prerequisites}</p>\n                  </div>\n\n                  {course.specialInstructions && (\n                    <div className=\"bg-blue-500/20 p-3 rounded-lg\">\n                      <h4 className=\"text-sm font-semibold text-blue-300 mb-1\">Special Instructions</h4>\n                      <p className=\"text-xs text-gray-300\">{course.specialInstructions}</p>\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n            </motion.div>\n\n            {/* Application Form */}\n            <motion.div\n              initial={{ opacity: 0, x: 20 }}\n              animate={{ opacity: 1, x: 0 }}\n              transition={{ delay: 0.2 }}\n              className=\"lg:col-span-2\"\n            >\n              <Card className=\"bg-white/10 backdrop-blur-md border-white/20\">\n                <CardHeader>\n                  <CardTitle className=\"text-white flex items-center\">\n                    <FileText className=\"w-5 h-5 mr-2\" />\n                    Application Form\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <Form {...form}>\n                    <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n                      {/* Personal Information */}\n                      <div className=\"space-y-4\">\n                        <h3 className=\"text-lg font-semibold text-white flex items-center\">\n                          <User className=\"w-4 h-4 mr-2\" />\n                          Personal Information\n                        </h3>\n                        \n                        <FormField\n                          control={form.control}\n                          name=\"studentName\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel className=\"text-gray-300\">Full Name</FormLabel>\n                              <FormControl>\n                                <Input \n                                  {...field} \n                                  className=\"bg-white/10 border-white/20 text-white\"\n                                  placeholder=\"Enter your full name\"\n                                />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n\n                        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                          <FormField\n                            control={form.control}\n                            name=\"studentPhone\"\n                            render={({ field }) => (\n                              <FormItem>\n                                <FormLabel className=\"text-gray-300\">\n                                  <Phone className=\"w-4 h-4 inline mr-1\" />\n                                  Phone Number\n                                </FormLabel>\n                                <FormControl>\n                                  <Input \n                                    {...field} \n                                    className=\"bg-white/10 border-white/20 text-white\"\n                                    placeholder=\"10-digit phone number\"\n                                  />\n                                </FormControl>\n                                <FormMessage />\n                              </FormItem>\n                            )}\n                          />\n\n                          <FormField\n                            control={form.control}\n                            name=\"studentEmail\"\n                            render={({ field }) => (\n                              <FormItem>\n                                <FormLabel className=\"text-gray-300\">\n                                  <Mail className=\"w-4 h-4 inline mr-1\" />\n                                  Email (Optional)\n                                </FormLabel>\n                                <FormControl>\n                                  <Input \n                                    {...field} \n                                    type=\"email\"\n                                    className=\"bg-white/10 border-white/20 text-white\"\n                                    placeholder=\"your.email@example.com\"\n                                  />\n                                </FormControl>\n                                <FormMessage />\n                              </FormItem>\n                            )}\n                          />\n                        </div>\n                      </div>\n\n                      {/* Birth Details */}\n                      <div className=\"space-y-4\">\n                        <h3 className=\"text-lg font-semibold text-white flex items-center\">\n                          <Calendar className=\"w-4 h-4 mr-2\" />\n                          Birth Details (For Astrological Analysis)\n                        </h3>\n                        \n                        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                          <FormField\n                            control={form.control}\n                            name=\"dateOfBirth\"\n                            render={({ field }) => (\n                              <FormItem>\n                                <FormLabel className=\"text-gray-300\">Date of Birth</FormLabel>\n                                <FormControl>\n                                  <Input \n                                    {...field} \n                                    type=\"date\"\n                                    className=\"bg-white/10 border-white/20 text-white\"\n                                  />\n                                </FormControl>\n                                <FormMessage />\n                              </FormItem>\n                            )}\n                          />\n\n                          <FormField\n                            control={form.control}\n                            name=\"timeOfBirth\"\n                            render={({ field }) => (\n                              <FormItem>\n                                <FormLabel className=\"text-gray-300\">Time of Birth</FormLabel>\n                                <FormControl>\n                                  <Input \n                                    {...field} \n                                    type=\"time\"\n                                    className=\"bg-white/10 border-white/20 text-white\"\n                                  />\n                                </FormControl>\n                                <FormMessage />\n                              </FormItem>\n                            )}\n                          />\n                        </div>\n\n                        <FormField\n                          control={form.control}\n                          name=\"placeOfBirth\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel className=\"text-gray-300\">Place of Birth</FormLabel>\n                              <FormControl>\n                                <Input \n                                  {...field} \n                                  className=\"bg-white/10 border-white/20 text-white\"\n                                  placeholder=\"City, State, Country\"\n                                />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                      </div>\n\n                      {/* Address */}\n                      <div className=\"space-y-4\">\n                        <h3 className=\"text-lg font-semibold text-white flex items-center\">\n                          <Home className=\"w-4 h-4 mr-2\" />\n                          Tuition Address\n                        </h3>\n                        \n                        <FormField\n                          control={form.control}\n                          name=\"address\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel className=\"text-gray-300\">Complete Address</FormLabel>\n                              <FormControl>\n                                <Textarea \n                                  {...field} \n                                  className=\"bg-white/10 border-white/20 text-white\"\n                                  placeholder=\"House/Flat number, Street, Locality\"\n                                  rows={3}\n                                />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n\n                        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                          <FormField\n                            control={form.control}\n                            name=\"city\"\n                            render={({ field }) => (\n                              <FormItem>\n                                <FormLabel className=\"text-gray-300\">City</FormLabel>\n                                <FormControl>\n                                  <Input \n                                    {...field} \n                                    className=\"bg-white/10 border-white/20 text-white\"\n                                    placeholder=\"Kolkata\"\n                                  />\n                                </FormControl>\n                                <FormMessage />\n                              </FormItem>\n                            )}\n                          />\n\n                          <FormField\n                            control={form.control}\n                            name=\"state\"\n                            render={({ field }) => (\n                              <FormItem>\n                                <FormLabel className=\"text-gray-300\">State</FormLabel>\n                                <FormControl>\n                                  <Input \n                                    {...field} \n                                    className=\"bg-white/10 border-white/20 text-white\"\n                                    placeholder=\"West Bengal\"\n                                  />\n                                </FormControl>\n                                <FormMessage />\n                              </FormItem>\n                            )}\n                          />\n\n                          <FormField\n                            control={form.control}\n                            name=\"pincode\"\n                            render={({ field }) => (\n                              <FormItem>\n                                <FormLabel className=\"text-gray-300\">Pincode</FormLabel>\n                                <FormControl>\n                                  <Input \n                                    {...field} \n                                    className=\"bg-white/10 border-white/20 text-white\"\n                                    placeholder=\"700001\"\n                                  />\n                                </FormControl>\n                                <FormMessage />\n                              </FormItem>\n                            )}\n                          />\n                        </div>\n                      </div>\n\n                      {/* Aadhar Card Upload */}\n                      <div className=\"space-y-4\">\n                        <h3 className=\"text-lg font-semibold text-white\">\n                          Aadhar Card Verification\n                        </h3>\n                        <p className=\"text-sm text-gray-400 mb-4\">\n                          Please upload a clear image/PDF of your Aadhar card for identity verification\n                        </p>\n                        <FileUploader\n                          onFileUpload={setAadharCardUrl}\n                          accept=\"image/*,.pdf\"\n                          maxFileSize={5 * 1024 * 1024}\n                          fileType=\"aadhar\"\n                          placeholder=\"Upload Aadhar Card\"\n                          className=\"w-full\"\n                        />\n                      </div>\n\n                      {/* Preferences */}\n                      <div className=\"space-y-4\">\n                        <h3 className=\"text-lg font-semibold text-white\">Preferences</h3>\n                        \n                        <FormField\n                          control={form.control}\n                          name=\"preferredTimings\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel className=\"text-gray-300\">Preferred Timings</FormLabel>\n                              <FormControl>\n                                <Input \n                                  {...field} \n                                  className=\"bg-white/10 border-white/20 text-white\"\n                                  placeholder=\"e.g., Weekends 10 AM - 12 PM, Weekdays 6 PM - 8 PM\"\n                                />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n\n                        <FormField\n                          control={form.control}\n                          name=\"additionalNotes\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel className=\"text-gray-300\">Additional Notes (Optional)</FormLabel>\n                              <FormControl>\n                                <Textarea \n                                  {...field} \n                                  className=\"bg-white/10 border-white/20 text-white\"\n                                  placeholder=\"Any specific requirements or questions...\"\n                                  rows={3}\n                                />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                      </div>\n\n                      {/* Submit Button */}\n                      <div className=\"pt-6\">\n                        <Button\n                          type=\"submit\"\n                          disabled={applicationMutation.isPending || !aadharCardUrl}\n                          className=\"w-full bg-gradient-to-r from-yellow-500 to-yellow-600 hover:from-yellow-600 hover:to-yellow-700 text-black font-semibold py-3\"\n                        >\n                          {applicationMutation.isPending ? \"Submitting Application...\" : \"Submit Application\"}\n                        </Button>\n                        \n                        {!aadharCardUrl && (\n                          <p className=\"text-sm text-red-400 mt-2 text-center\">\n                            Please upload your Aadhar card to continue\n                          </p>\n                        )}\n                      </div>\n                    </form>\n                  </Form>\n                </CardContent>\n              </Card>\n            </motion.div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":24581},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });\n","size_bytes":483},"server/objectStorage.ts":{"content":"import { Storage, File } from \"@google-cloud/storage\";\nimport { Response } from \"express\";\nimport { randomUUID } from \"crypto\";\n\nconst REPLIT_SIDECAR_ENDPOINT = \"http://127.0.0.1:1106\";\n\n// The object storage client is used to interact with the object storage service.\nexport const objectStorageClient = new Storage({\n  credentials: {\n    audience: \"replit\",\n    subject_token_type: \"access_token\",\n    token_url: `${REPLIT_SIDECAR_ENDPOINT}/token`,\n    type: \"external_account\",\n    credential_source: {\n      url: `${REPLIT_SIDECAR_ENDPOINT}/credential`,\n      format: {\n        type: \"json\",\n        subject_token_field_name: \"access_token\",\n      },\n    },\n    universe_domain: \"googleapis.com\",\n  },\n  projectId: \"\",\n});\n\nexport class ObjectNotFoundError extends Error {\n  constructor() {\n    super(\"Object not found\");\n    this.name = \"ObjectNotFoundError\";\n    Object.setPrototypeOf(this, ObjectNotFoundError.prototype);\n  }\n}\n\n// The object storage service is used to interact with the object storage service.\nexport class ObjectStorageService {\n  constructor() {}\n\n  // Gets the private object directory.\n  getPrivateObjectDir(): string {\n    const dir = process.env.PRIVATE_OBJECT_DIR || \"\";\n    if (!dir) {\n      throw new Error(\n        \"PRIVATE_OBJECT_DIR not set. Create a bucket in 'Object Storage' \" +\n          \"tool and set PRIVATE_OBJECT_DIR env var.\"\n      );\n    }\n    return dir;\n  }\n\n  // Downloads an object to the response.\n  async downloadObject(file: File, res: Response, cacheTtlSec: number = 3600) {\n    try {\n      // Get file metadata\n      const [metadata] = await file.getMetadata();\n      \n      // Set appropriate headers\n      res.set({\n        \"Content-Type\": metadata.contentType || \"application/octet-stream\",\n        \"Content-Length\": metadata.size,\n        \"Cache-Control\": `private, max-age=${cacheTtlSec}`,\n      });\n\n      // Stream the file to the response\n      const stream = file.createReadStream();\n\n      stream.on(\"error\", (err) => {\n        console.error(\"Stream error:\", err);\n        if (!res.headersSent) {\n          res.status(500).json({ error: \"Error streaming file\" });\n        }\n      });\n\n      stream.pipe(res);\n    } catch (error) {\n      console.error(\"Error downloading file:\", error);\n      if (!res.headersSent) {\n        res.status(500).json({ error: \"Error downloading file\" });\n      }\n    }\n  }\n\n  // Gets the upload URL for an object entity.\n  async getUploadURL(fileType: string = \"aadhar\"): Promise<string> {\n    const privateObjectDir = this.getPrivateObjectDir();\n    if (!privateObjectDir) {\n      throw new Error(\n        \"PRIVATE_OBJECT_DIR not set. Create a bucket in 'Object Storage' \" +\n          \"tool and set PRIVATE_OBJECT_DIR env var.\"\n      );\n    }\n\n    const objectId = randomUUID();\n    const fullPath = `${privateObjectDir}/${fileType}/${objectId}`;\n\n    const { bucketName, objectName } = parseObjectPath(fullPath);\n\n    // Sign URL for PUT method with TTL\n    return signObjectURL({\n      bucketName,\n      objectName,\n      method: \"PUT\",\n      ttlSec: 900,\n    });\n  }\n\n  // Gets the object file from the object path.\n  async getObjectFile(objectPath: string): Promise<File> {\n    if (!objectPath.startsWith(\"/objects/\")) {\n      throw new ObjectNotFoundError();\n    }\n\n    const parts = objectPath.slice(1).split(\"/\");\n    if (parts.length < 2) {\n      throw new ObjectNotFoundError();\n    }\n\n    const entityId = parts.slice(1).join(\"/\");\n    let entityDir = this.getPrivateObjectDir();\n    if (!entityDir.endsWith(\"/\")) {\n      entityDir = `${entityDir}/`;\n    }\n    const objectEntityPath = `${entityDir}${entityId}`;\n    const { bucketName, objectName } = parseObjectPath(objectEntityPath);\n    const bucket = objectStorageClient.bucket(bucketName);\n    const objectFile = bucket.file(objectName);\n    const [exists] = await objectFile.exists();\n    if (!exists) {\n      throw new ObjectNotFoundError();\n    }\n    return objectFile;\n  }\n\n  normalizeObjectPath(rawPath: string): string {\n    if (!rawPath.startsWith(\"https://storage.googleapis.com/\")) {\n      return rawPath;\n    }\n\n    // Extract the path from the URL by removing query parameters and domain\n    const url = new URL(rawPath);\n    const rawObjectPath = url.pathname;\n\n    let objectEntityDir = this.getPrivateObjectDir();\n    if (!objectEntityDir.endsWith(\"/\")) {\n      objectEntityDir = `${objectEntityDir}/`;\n    }\n\n    if (!rawObjectPath.startsWith(objectEntityDir)) {\n      return rawObjectPath;\n    }\n\n    // Extract the entity ID from the path\n    const entityId = rawObjectPath.slice(objectEntityDir.length);\n    return `/objects/${entityId}`;\n  }\n}\n\nfunction parseObjectPath(path: string): {\n  bucketName: string;\n  objectName: string;\n} {\n  if (!path.startsWith(\"/\")) {\n    path = `/${path}`;\n  }\n  const pathParts = path.split(\"/\");\n  if (pathParts.length < 3) {\n    throw new Error(\"Invalid path: must contain at least a bucket name\");\n  }\n\n  const bucketName = pathParts[1];\n  const objectName = pathParts.slice(2).join(\"/\");\n\n  return {\n    bucketName,\n    objectName,\n  };\n}\n\nasync function signObjectURL({\n  bucketName,\n  objectName,\n  method,\n  ttlSec,\n}: {\n  bucketName: string;\n  objectName: string;\n  method: \"GET\" | \"PUT\" | \"DELETE\" | \"HEAD\";\n  ttlSec: number;\n}): Promise<string> {\n  const request = {\n    bucket_name: bucketName,\n    object_name: objectName,\n    method,\n    expires_at: new Date(Date.now() + ttlSec * 1000).toISOString(),\n  };\n  const response = await fetch(\n    `${REPLIT_SIDECAR_ENDPOINT}/object-storage/signed-object-url`,\n    {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(request),\n    }\n  );\n  if (!response.ok) {\n    throw new Error(\n      `Failed to sign object URL, errorcode: ${response.status}, ` +\n        `make sure you're running on Replit`\n    );\n  }\n\n  const { signed_url: signedURL } = await response.json();\n  return signedURL;\n}","size_bytes":5926},"client/src/pages/admin/consultations.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useLocation } from \"wouter\";\nimport { GlassCard } from \"@/components/ui/glass-card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { \n  Calendar, \n  Clock, \n  Video, \n  Phone, \n  MessageSquare, \n  MapPin, \n  Home,\n  Filter,\n  Search,\n  Eye,\n  CheckCircle,\n  XCircle,\n  PlayCircle,\n  DollarSign,\n  Users,\n  TrendingUp,\n  Star,\n  AlertCircle\n} from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\n\nexport default function AdminConsultations() {\n  const [, setLocation] = useLocation();\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [statusFilter, setStatusFilter] = useState(\"all\");\n  const [typeFilter, setTypeFilter] = useState(\"all\");\n  const [selectedConsultation, setSelectedConsultation] = useState<any>(null);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // Mock data for testing (bypass authentication)\n  const user = { isAdmin: true };\n  const consultations = [\n    { id: \"1\", clientName: \"Ravi Kumar\", type: \"video\", status: \"completed\", scheduledAt: \"2024-01-15T14:00:00Z\", duration: 60, amount: 2500, rating: 5 },\n    { id: \"2\", clientName: \"Priya Sharma\", type: \"audio\", status: \"scheduled\", scheduledAt: \"2024-01-22T16:00:00Z\", duration: 30, amount: 1800, rating: null }\n  ];\n  const isLoading = false;\n\n  const updateConsultationMutation = useMutation({\n    mutationFn: async ({ id, status }: { id: string; status: string }) => {\n      return apiRequest(\"PUT\", `/api/consultations/${id}`, { status });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/consultations\"] });\n      toast({\n        title: \"Updated\",\n        description: \"Consultation status updated successfully\",\n      });\n    },\n  });\n\n  // Bypass authentication for testing\n  // if (!user?.isAdmin) {\n  //   setLocation(\"/\");\n  //   return null;\n  // }\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen pt-16 flex items-center justify-center\">\n        <div className=\"animate-spin w-8 h-8 border-4 border-primary border-t-transparent rounded-full\" />\n      </div>\n    );\n  }\n\n  const getTypeIcon = (type: string) => {\n    switch (type) {\n      case \"video\": return Video;\n      case \"audio\": return Phone;\n      case \"chat\": return MessageSquare;\n      case \"in-person\": return MapPin;\n      case \"home-service\": return Home;\n      default: return Clock;\n    }\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case \"scheduled\": return \"bg-blue-500/20 text-blue-500\";\n      case \"ongoing\": return \"bg-green-500/20 text-green-500\";\n      case \"completed\": return \"bg-purple-500/20 text-purple-500\";\n      case \"cancelled\": return \"bg-red-500/20 text-red-500\";\n      case \"no-show\": return \"bg-orange-500/20 text-orange-500\";\n      default: return \"bg-gray-500/20 text-gray-500\";\n    }\n  };\n\n  const filteredConsultations = consultations?.filter((consultation: any) => {\n    const matchesSearch = consultation.clientName?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         consultation.topics?.some((topic: string) => topic.toLowerCase().includes(searchTerm.toLowerCase()));\n    const matchesStatus = statusFilter === \"all\" || consultation.status === statusFilter;\n    const matchesType = typeFilter === \"all\" || consultation.type === typeFilter;\n    return matchesSearch && matchesStatus && matchesType;\n  }) || [];\n\n  const stats = {\n    total: consultations?.length || 0,\n    today: consultations?.filter((c: any) => \n      new Date(c.scheduledAt).toDateString() === new Date().toDateString()\n    ).length || 0,\n    pending: consultations?.filter((c: any) => c.status === \"scheduled\").length || 0,\n    completed: consultations?.filter((c: any) => c.status === \"completed\").length || 0,\n    revenue: consultations?.filter((c: any) => c.status === \"completed\")\n      .reduce((sum: number, c: any) => sum + parseFloat(c.price), 0) || 0\n  };\n\n  return (\n    <div className=\"min-h-screen pt-16 pb-16\" data-testid=\"admin-consultations\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        {/* Header */}\n        <div className=\"mb-8\">\n          <h1 className=\"text-4xl font-bold neon-text text-primary mb-2\">\n            Consultation Management\n          </h1>\n          <p className=\"text-muted-foreground\">\n            Monitor and manage all consultation bookings and sessions\n          </p>\n        </div>\n\n        {/* Statistics Cards */}\n        <div className=\"grid grid-cols-1 md:grid-cols-5 gap-6 mb-8\">\n          <GlassCard className=\"p-6 text-center\">\n            <div className=\"w-12 h-12 bg-blue-500/20 rounded-full flex items-center justify-center mx-auto mb-3\">\n              <Calendar className=\"w-6 h-6 text-blue-400\" />\n            </div>\n            <div className=\"text-2xl font-bold text-primary mb-1\">{stats.total}</div>\n            <div className=\"text-sm text-muted-foreground\">Total Bookings</div>\n          </GlassCard>\n          \n          <GlassCard className=\"p-6 text-center\">\n            <div className=\"w-12 h-12 bg-green-500/20 rounded-full flex items-center justify-center mx-auto mb-3\">\n              <Clock className=\"w-6 h-6 text-green-400\" />\n            </div>\n            <div className=\"text-2xl font-bold text-green-400 mb-1\">{stats.today}</div>\n            <div className=\"text-sm text-muted-foreground\">Today's Sessions</div>\n          </GlassCard>\n\n          <GlassCard className=\"p-6 text-center\">\n            <div className=\"w-12 h-12 bg-yellow-500/20 rounded-full flex items-center justify-center mx-auto mb-3\">\n              <AlertCircle className=\"w-6 h-6 text-yellow-400\" />\n            </div>\n            <div className=\"text-2xl font-bold text-yellow-400 mb-1\">{stats.pending}</div>\n            <div className=\"text-sm text-muted-foreground\">Pending</div>\n          </GlassCard>\n\n          <GlassCard className=\"p-6 text-center\">\n            <div className=\"w-12 h-12 bg-purple-500/20 rounded-full flex items-center justify-center mx-auto mb-3\">\n              <CheckCircle className=\"w-6 h-6 text-purple-400\" />\n            </div>\n            <div className=\"text-2xl font-bold text-purple-400 mb-1\">{stats.completed}</div>\n            <div className=\"text-sm text-muted-foreground\">Completed</div>\n          </GlassCard>\n\n          <GlassCard className=\"p-6 text-center\">\n            <div className=\"w-12 h-12 bg-pink-500/20 rounded-full flex items-center justify-center mx-auto mb-3\">\n              <DollarSign className=\"w-6 h-6 text-pink-400\" />\n            </div>\n            <div className=\"text-2xl font-bold text-pink-400 mb-1\">₹{stats.revenue.toLocaleString()}</div>\n            <div className=\"text-sm text-muted-foreground\">Revenue</div>\n          </GlassCard>\n        </div>\n\n        {/* Filters */}\n        <GlassCard className=\"p-6 mb-8\">\n          <div className=\"flex flex-col md:flex-row gap-4\">\n            <div className=\"relative flex-1\">\n              <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground w-4 h-4\" />\n              <Input\n                placeholder={\"Search consultations by client name or topics...\"}\n                value={searchTerm}\n                onChange={(e) => setSearchTerm(e.target.value)}\n                className=\"pl-10 form-input\"\n              />\n            </div>\n            \n            <Select value={statusFilter} onValueChange={setStatusFilter}>\n              <SelectTrigger className=\"w-full md:w-48 form-input\">\n                <SelectValue placeholder={\"Filter by status\"} />\n              </SelectTrigger>\n              <SelectContent className=\"glass-card\">\n                <SelectItem value=\"all\">All Status</SelectItem>\n                <SelectItem value=\"scheduled\">Scheduled</SelectItem>\n                <SelectItem value=\"ongoing\">Ongoing</SelectItem>\n                <SelectItem value=\"completed\">Completed</SelectItem>\n                <SelectItem value=\"cancelled\">Cancelled</SelectItem>\n                <SelectItem value=\"no-show\">No Show</SelectItem>\n              </SelectContent>\n            </Select>\n\n            <Select value={typeFilter} onValueChange={setTypeFilter}>\n              <SelectTrigger className=\"w-full md:w-48 form-input\">\n                <SelectValue placeholder={\"Filter by type\"} />\n              </SelectTrigger>\n              <SelectContent className=\"glass-card\">\n                <SelectItem value=\"all\">All Types</SelectItem>\n                <SelectItem value=\"video\">Video Call</SelectItem>\n                <SelectItem value=\"audio\">Audio Call</SelectItem>\n                <SelectItem value=\"chat\">Chat Session</SelectItem>\n                <SelectItem value=\"in-person\">In-Person</SelectItem>\n                <SelectItem value=\"home-service\">Home Service</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n        </GlassCard>\n\n        {/* Consultations Table */}\n        <GlassCard className=\"p-6\">\n          {filteredConsultations.length === 0 ? (\n            <div className=\"text-center py-12\">\n              <Calendar className=\"w-12 h-12 text-muted-foreground mx-auto mb-4\" />\n              <h3 className=\"text-lg font-semibold text-foreground mb-2\">No Consultations Found</h3>\n              <p className=\"text-muted-foreground\">\n                {searchTerm ? \"Try adjusting your search criteria\" : \"No consultations scheduled yet\"}\n              </p>\n            </div>\n          ) : (\n            <div className=\"overflow-x-auto\">\n              <Table>\n                <TableHeader>\n                  <TableRow className=\"border-primary/20\">\n                    <TableHead className=\"text-foreground\">Client & Session</TableHead>\n                    <TableHead className=\"text-foreground\">Type & Topics</TableHead>\n                    <TableHead className=\"text-foreground\">Schedule</TableHead>\n                    <TableHead className=\"text-foreground\">Duration & Price</TableHead>\n                    <TableHead className=\"text-foreground\">Status</TableHead>\n                    <TableHead className=\"text-foreground\">Actions</TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {filteredConsultations.map((consultation: any, index: number) => {\n                    const IconComponent = getTypeIcon(consultation.type);\n                    return (\n                      <TableRow key={consultation.id} className=\"border-primary/10\">\n                        <TableCell>\n                          <div className=\"flex items-center space-x-3\">\n                            <div className=\"w-10 h-10 rounded-full bg-primary/20 flex items-center justify-center\">\n                              <span className=\"text-primary font-semibold\">\n                                {consultation.clientName?.charAt(0) || 'U'}\n                              </span>\n                            </div>\n                            <div>\n                              <p className=\"font-semibold text-foreground\">\n                                {consultation.clientName || 'Unknown Client'}\n                              </p>\n                              <p className=\"text-sm text-muted-foreground\">\n                                {consultation.plan}\n                              </p>\n                            </div>\n                          </div>\n                        </TableCell>\n\n                        <TableCell>\n                          <div className=\"space-y-2\">\n                            <div className=\"flex items-center space-x-2\">\n                              <IconComponent className=\"w-4 h-4 text-primary\" />\n                              <span className=\"text-sm font-medium text-foreground capitalize\">\n                                {consultation.type.replace('-', ' ')}\n                              </span>\n                            </div>\n                            <div className=\"flex flex-wrap gap-1\">\n                              {consultation.topics?.slice(0, 2).map((topic: string, i: number) => (\n                                <Badge key={i} variant=\"outline\" className=\"text-xs\">\n                                  {topic}\n                                </Badge>\n                              ))}\n                              {consultation.topics?.length > 2 && (\n                                <Badge variant=\"outline\" className=\"text-xs\">\n                                  +{consultation.topics.length - 2} more\n                                </Badge>\n                              )}\n                            </div>\n                          </div>\n                        </TableCell>\n\n                        <TableCell>\n                          <div className=\"space-y-1\">\n                            <div className=\"flex items-center space-x-2\">\n                              <Calendar className=\"w-3 h-3 text-muted-foreground\" />\n                              <span className=\"text-sm text-foreground\">\n                                {new Date(consultation.scheduledAt).toLocaleDateString()}\n                              </span>\n                            </div>\n                            <div className=\"flex items-center space-x-2\">\n                              <Clock className=\"w-3 h-3 text-muted-foreground\" />\n                              <span className=\"text-sm text-muted-foreground\">\n                                {new Date(consultation.scheduledAt).toLocaleTimeString()}\n                              </span>\n                            </div>\n                          </div>\n                        </TableCell>\n\n                        <TableCell>\n                          <div className=\"space-y-1\">\n                            <div className=\"text-sm text-foreground\">\n                              {consultation.duration} minutes\n                            </div>\n                            <div className=\"text-sm font-semibold text-primary\">\n                              ₹{consultation.price}\n                            </div>\n                          </div>\n                        </TableCell>\n\n                        <TableCell>\n                          <Badge className={getStatusColor(consultation.status)}>\n                            {consultation.status}\n                          </Badge>\n                        </TableCell>\n\n                        <TableCell>\n                          <div className=\"flex space-x-2\">\n                            <Dialog>\n                              <DialogTrigger asChild>\n                                <Button \n                                  size=\"sm\" \n                                  variant=\"outline\" \n                                  className=\"glass\"\n                                  onClick={() => setSelectedConsultation(consultation)}\n                                >\n                                  <Eye className=\"w-3 h-3\" />\n                                </Button>\n                              </DialogTrigger>\n                              <DialogContent className=\"glass-card max-w-2xl\">\n                                <DialogHeader>\n                                  <DialogTitle className=\"text-primary\">Consultation Details</DialogTitle>\n                                </DialogHeader>\n                                {selectedConsultation && (\n                                  <div className=\"space-y-4\">\n                                    <div className=\"grid grid-cols-2 gap-4\">\n                                      <div>\n                                        <label className=\"text-sm font-medium text-muted-foreground\">Client</label>\n                                        <p className=\"text-foreground\">{selectedConsultation.clientName}</p>\n                                      </div>\n                                      <div>\n                                        <label className=\"text-sm font-medium text-muted-foreground\">Type</label>\n                                        <p className=\"text-foreground capitalize\">{selectedConsultation.type}</p>\n                                      </div>\n                                      <div>\n                                        <label className=\"text-sm font-medium text-muted-foreground\">Date & Time</label>\n                                        <p className=\"text-foreground\">\n                                          {new Date(selectedConsultation.scheduledAt).toLocaleString()}\n                                        </p>\n                                      </div>\n                                      <div>\n                                        <label className=\"text-sm font-medium text-muted-foreground\">Status</label>\n                                        <Badge className={getStatusColor(selectedConsultation.status)}>\n                                          {selectedConsultation.status}\n                                        </Badge>\n                                      </div>\n                                    </div>\n                                    <div>\n                                      <label className=\"text-sm font-medium text-muted-foreground\">Topics</label>\n                                      <div className=\"flex flex-wrap gap-1 mt-1\">\n                                        {selectedConsultation.topics?.map((topic: string, i: number) => (\n                                          <Badge key={i} variant=\"outline\">{topic}</Badge>\n                                        ))}\n                                      </div>\n                                    </div>\n                                    {selectedConsultation.notes && (\n                                      <div>\n                                        <label className=\"text-sm font-medium text-muted-foreground\">Notes</label>\n                                        <p className=\"text-foreground mt-1\">{selectedConsultation.notes}</p>\n                                      </div>\n                                    )}\n                                  </div>\n                                )}\n                              </DialogContent>\n                            </Dialog>\n\n                            {consultation.status === \"scheduled\" && (\n                              <>\n                                <Button\n                                  size=\"sm\"\n                                  variant=\"outline\"\n                                  className=\"glass text-green-500\"\n                                  onClick={() => updateConsultationMutation.mutate({\n                                    id: consultation.id,\n                                    status: \"ongoing\"\n                                  })}\n                                >\n                                  <PlayCircle className=\"w-3 h-3\" />\n                                </Button>\n                                <Button\n                                  size=\"sm\"\n                                  variant=\"outline\"\n                                  className=\"glass text-red-500\"\n                                  onClick={() => updateConsultationMutation.mutate({\n                                    id: consultation.id,\n                                    status: \"cancelled\"\n                                  })}\n                                >\n                                  <XCircle className=\"w-3 h-3\" />\n                                </Button>\n                              </>\n                            )}\n\n                            {consultation.status === \"ongoing\" && (\n                              <Button\n                                size=\"sm\"\n                                variant=\"outline\"\n                                className=\"glass text-purple-500\"\n                                onClick={() => updateConsultationMutation.mutate({\n                                  id: consultation.id,\n                                  status: \"completed\"\n                                })}\n                              >\n                                <CheckCircle className=\"w-3 h-3\" />\n                              </Button>\n                            )}\n                          </div>\n                        </TableCell>\n                      </TableRow>\n                    );\n                  })}\n                </TableBody>\n              </Table>\n            </div>\n          )}\n        </GlassCard>\n      </div>\n    </div>\n  );\n}","size_bytes":20974},"client/src/pages/admin/home-tuition-management.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useLocation } from \"wouter\";\nimport { GlassCard } from \"@/components/ui/glass-card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { \n  GraduationCap,\n  Users,\n  UserCheck,\n  Calendar,\n  MapPin,\n  Phone,\n  Mail,\n  FileText,\n  Clock,\n  Star,\n  MessageSquare,\n  CheckCircle,\n  XCircle,\n  Eye,\n  Search,\n  Filter,\n  BookOpen,\n  Home,\n  TrendingUp,\n  DollarSign,\n  Award\n} from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\n\nexport default function AdminHomeTuitionManagement() {\n  const [, setLocation] = useLocation();\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [statusFilter, setStatusFilter] = useState(\"all\");\n  const [typeFilter, setTypeFilter] = useState(\"all\");\n  const [selectedApplication, setSelectedApplication] = useState<any>(null);\n  const [selectedTab, setSelectedTab] = useState(\"applications\");\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // Check if user is admin\n  const { data: user } = useQuery({\n    queryKey: [\"/api/profile\"],\n    enabled: !!localStorage.getItem(\"token\"),\n  });\n\n  const { data: applications, isLoading: applicationsLoading } = useQuery({\n    queryKey: [\"/api/admin/home-tuition-applications\"],\n    enabled: !!localStorage.getItem(\"token\") && user?.isAdmin,\n  });\n\n  const { data: courses, isLoading: coursesLoading } = useQuery({\n    queryKey: [\"/api/admin/home-tuition-courses\"],\n    enabled: !!localStorage.getItem(\"token\") && user?.isAdmin,\n  });\n\n  const { data: students } = useQuery({\n    queryKey: [\"/api/admin/home-tuition-students\"],\n    enabled: !!localStorage.getItem(\"token\") && user?.isAdmin,\n  });\n\n  const { data: conversations } = useQuery({\n    queryKey: [\"/api/admin/student-conversations\"],\n    enabled: !!localStorage.getItem(\"token\") && user?.isAdmin,\n  });\n\n  const updateApplicationMutation = useMutation({\n    mutationFn: async ({ id, status }: { id: string; status: string }) => {\n      return apiRequest(\"PUT\", `/api/home-tuition/applications/${id}`, { status });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/home-tuition-applications\"] });\n      toast({\n        title: \"Updated\",\n        description: \"Application status updated successfully\",\n      });\n    },\n  });\n\n  if (!user?.isAdmin) {\n    setLocation(\"/\");\n    return null;\n  }\n\n  if (applicationsLoading || coursesLoading) {\n    return (\n      <div className=\"min-h-screen pt-16 flex items-center justify-center\">\n        <div className=\"animate-spin w-8 h-8 border-4 border-primary border-t-transparent rounded-full\" />\n      </div>\n    );\n  }\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case \"pending\": return \"bg-yellow-500/20 text-yellow-500\";\n      case \"approved\": return \"bg-green-500/20 text-green-500\";\n      case \"rejected\": return \"bg-red-500/20 text-red-500\";\n      case \"interview_scheduled\": return \"bg-blue-500/20 text-blue-500\";\n      case \"payment_pending\": return \"bg-orange-500/20 text-orange-500\";\n      case \"enrolled\": return \"bg-purple-500/20 text-purple-500\";\n      default: return \"bg-gray-500/20 text-gray-500\";\n    }\n  };\n\n  const filteredApplications = applications?.filter((app: any) => {\n    const matchesSearch = app.studentName?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         app.courseName?.toLowerCase().includes(searchTerm.toLowerCase());\n    const matchesStatus = statusFilter === \"all\" || app.status === statusFilter;\n    const matchesType = typeFilter === \"all\" || app.tuitionType === typeFilter;\n    return matchesSearch && matchesStatus && matchesType;\n  }) || [];\n\n  const stats = {\n    totalApplications: applications?.length || 0,\n    pendingApplications: applications?.filter((a: any) => a.status === \"pending\").length || 0,\n    approvedApplications: applications?.filter((a: any) => a.status === \"approved\").length || 0,\n    totalStudents: students?.length || 0,\n    activeCourses: courses?.filter((c: any) => c.isActive).length || 0,\n    totalRevenue: applications?.filter((a: any) => a.status === \"enrolled\")\n      .reduce((sum: number, a: any) => sum + parseFloat(a.coursePrice || 0), 0) || 0\n  };\n\n  return (\n    <div className=\"min-h-screen pt-16 pb-16\" data-testid=\"admin-home-tuition\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        {/* Header */}\n        <div className=\"mb-8\">\n          <h1 className=\"text-4xl font-bold neon-text text-primary mb-2\">\n            Home Tuition Management\n          </h1>\n          <p className=\"text-muted-foreground\">\n            Manage home tuition courses, applications, and student communications\n          </p>\n        </div>\n\n        {/* Statistics Cards */}\n        <div className=\"grid grid-cols-1 md:grid-cols-6 gap-6 mb-8\">\n          <GlassCard className=\"p-6 text-center\">\n            <div className=\"w-12 h-12 bg-blue-500/20 rounded-full flex items-center justify-center mx-auto mb-3\">\n              <FileText className=\"w-6 h-6 text-blue-400\" />\n            </div>\n            <div className=\"text-2xl font-bold text-primary mb-1\">{stats.totalApplications}</div>\n            <div className=\"text-sm text-muted-foreground\">Applications</div>\n          </GlassCard>\n          \n          <GlassCard className=\"p-6 text-center\">\n            <div className=\"w-12 h-12 bg-yellow-500/20 rounded-full flex items-center justify-center mx-auto mb-3\">\n              <Clock className=\"w-6 h-6 text-yellow-400\" />\n            </div>\n            <div className=\"text-2xl font-bold text-yellow-400 mb-1\">{stats.pendingApplications}</div>\n            <div className=\"text-sm text-muted-foreground\">Pending</div>\n          </GlassCard>\n\n          <GlassCard className=\"p-6 text-center\">\n            <div className=\"w-12 h-12 bg-green-500/20 rounded-full flex items-center justify-center mx-auto mb-3\">\n              <CheckCircle className=\"w-6 h-6 text-green-400\" />\n            </div>\n            <div className=\"text-2xl font-bold text-green-400 mb-1\">{stats.approvedApplications}</div>\n            <div className=\"text-sm text-muted-foreground\">Approved</div>\n          </GlassCard>\n\n          <GlassCard className=\"p-6 text-center\">\n            <div className=\"w-12 h-12 bg-purple-500/20 rounded-full flex items-center justify-center mx-auto mb-3\">\n              <Users className=\"w-6 h-6 text-purple-400\" />\n            </div>\n            <div className=\"text-2xl font-bold text-purple-400 mb-1\">{stats.totalStudents}</div>\n            <div className=\"text-sm text-muted-foreground\">Students</div>\n          </GlassCard>\n\n          <GlassCard className=\"p-6 text-center\">\n            <div className=\"w-12 h-12 bg-orange-500/20 rounded-full flex items-center justify-center mx-auto mb-3\">\n              <BookOpen className=\"w-6 h-6 text-orange-400\" />\n            </div>\n            <div className=\"text-2xl font-bold text-orange-400 mb-1\">{stats.activeCourses}</div>\n            <div className=\"text-sm text-muted-foreground\">Active Courses</div>\n          </GlassCard>\n\n          <GlassCard className=\"p-6 text-center\">\n            <div className=\"w-12 h-12 bg-pink-500/20 rounded-full flex items-center justify-center mx-auto mb-3\">\n              <DollarSign className=\"w-6 h-6 text-pink-400\" />\n            </div>\n            <div className=\"text-2xl font-bold text-pink-400 mb-1\">₹{stats.totalRevenue.toLocaleString()}</div>\n            <div className=\"text-sm text-muted-foreground\">Revenue</div>\n          </GlassCard>\n        </div>\n\n        {/* Tabs */}\n        <Tabs value={selectedTab} onValueChange={setSelectedTab} className=\"space-y-6\">\n          <TabsList className=\"glass-card\">\n            <TabsTrigger value=\"applications\" className=\"flex items-center space-x-2\">\n              <FileText className=\"w-4 h-4\" />\n              <span>Applications</span>\n            </TabsTrigger>\n            <TabsTrigger value=\"courses\" className=\"flex items-center space-x-2\">\n              <BookOpen className=\"w-4 h-4\" />\n              <span>Courses</span>\n            </TabsTrigger>\n            <TabsTrigger value=\"students\" className=\"flex items-center space-x-2\">\n              <Users className=\"w-4 h-4\" />\n              <span>Students</span>\n            </TabsTrigger>\n            <TabsTrigger value=\"communications\" className=\"flex items-center space-x-2\">\n              <MessageSquare className=\"w-4 h-4\" />\n              <span>Communications</span>\n            </TabsTrigger>\n          </TabsList>\n\n          {/* Applications Tab */}\n          <TabsContent value=\"applications\" className=\"space-y-6\">\n            {/* Filters */}\n            <GlassCard className=\"p-6\">\n              <div className=\"flex flex-col md:flex-row gap-4\">\n                <div className=\"relative flex-1\">\n                  <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground w-4 h-4\" />\n                  <Input\n                    placeholder={\"Search applications by student name or course...\"}\n                    value={searchTerm}\n                    onChange={(e) => setSearchTerm(e.target.value)}\n                    className=\"pl-10 form-input\"\n                  />\n                </div>\n                \n                <Select value={statusFilter} onValueChange={setStatusFilter}>\n                  <SelectTrigger className=\"w-full md:w-48 form-input\">\n                    <SelectValue placeholder={\"Filter by status\"} />\n                  </SelectTrigger>\n                  <SelectContent className=\"glass-card\">\n                    <SelectItem value=\"all\">All Status</SelectItem>\n                    <SelectItem value=\"pending\">Pending</SelectItem>\n                    <SelectItem value=\"approved\">Approved</SelectItem>\n                    <SelectItem value=\"rejected\">Rejected</SelectItem>\n                    <SelectItem value=\"interview_scheduled\">Interview Scheduled</SelectItem>\n                    <SelectItem value=\"enrolled\">Enrolled</SelectItem>\n                  </SelectContent>\n                </Select>\n\n                <Select value={typeFilter} onValueChange={setTypeFilter}>\n                  <SelectTrigger className=\"w-full md:w-48 form-input\">\n                    <SelectValue placeholder={\"Filter by type\"} />\n                  </SelectTrigger>\n                  <SelectContent className=\"glass-card\">\n                    <SelectItem value=\"all\">All Types</SelectItem>\n                    <SelectItem value=\"one-to-one\">One-to-One</SelectItem>\n                    <SelectItem value=\"group\">Group Learning</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n            </GlassCard>\n\n            {/* Applications Table */}\n            <GlassCard className=\"p-6\">\n              {filteredApplications.length === 0 ? (\n                <div className=\"text-center py-12\">\n                  <FileText className=\"w-12 h-12 text-muted-foreground mx-auto mb-4\" />\n                  <h3 className=\"text-lg font-semibold text-foreground mb-2\">No Applications Found</h3>\n                  <p className=\"text-muted-foreground\">\n                    {searchTerm ? \"Try adjusting your search criteria\" : \"No applications submitted yet\"}\n                  </p>\n                </div>\n              ) : (\n                <div className=\"overflow-x-auto\">\n                  <Table>\n                    <TableHeader>\n                      <TableRow className=\"border-primary/20\">\n                        <TableHead className=\"text-foreground\">Student Info</TableHead>\n                        <TableHead className=\"text-foreground\">Course & Type</TableHead>\n                        <TableHead className=\"text-foreground\">Contact & Address</TableHead>\n                        <TableHead className=\"text-foreground\">Birth Details</TableHead>\n                        <TableHead className=\"text-foreground\">Status</TableHead>\n                        <TableHead className=\"text-foreground\">Actions</TableHead>\n                      </TableRow>\n                    </TableHeader>\n                    <TableBody>\n                      {filteredApplications.map((application: any, index: number) => (\n                        <TableRow key={application.id} className=\"border-primary/10\">\n                          <TableCell>\n                            <div className=\"flex items-center space-x-3\">\n                              <div className=\"w-10 h-10 rounded-full bg-primary/20 flex items-center justify-center\">\n                                <span className=\"text-primary font-semibold\">\n                                  {application.studentName?.charAt(0) || 'S'}\n                                </span>\n                              </div>\n                              <div>\n                                <p className=\"font-semibold text-foreground\">\n                                  {application.studentName}\n                                </p>\n                                <p className=\"text-sm text-muted-foreground\">\n                                  Applied: {new Date(application.createdAt).toLocaleDateString()}\n                                </p>\n                              </div>\n                            </div>\n                          </TableCell>\n\n                          <TableCell>\n                            <div className=\"space-y-1\">\n                              <p className=\"font-medium text-foreground\">{application.courseName}</p>\n                              <Badge variant=\"outline\" className=\"text-xs\">\n                                {application.tuitionType === \"one-to-one\" ? \"One-to-One\" : \"Group Learning\"}\n                              </Badge>\n                              <p className=\"text-sm text-muted-foreground\">\n                                ₹{application.coursePrice}\n                              </p>\n                            </div>\n                          </TableCell>\n\n                          <TableCell>\n                            <div className=\"space-y-1\">\n                              <div className=\"flex items-center space-x-1 text-sm\">\n                                <Phone className=\"w-3 h-3 text-muted-foreground\" />\n                                <span className=\"text-muted-foreground\">{application.phoneNumber}</span>\n                              </div>\n                              {application.email && (\n                                <div className=\"flex items-center space-x-1 text-sm\">\n                                  <Mail className=\"w-3 h-3 text-muted-foreground\" />\n                                  <span className=\"text-muted-foreground\">{application.email}</span>\n                                </div>\n                              )}\n                              <div className=\"flex items-center space-x-1 text-sm\">\n                                <MapPin className=\"w-3 h-3 text-muted-foreground\" />\n                                <span className=\"text-muted-foreground line-clamp-1\">\n                                  {application.tuitionAddress}\n                                </span>\n                              </div>\n                            </div>\n                          </TableCell>\n\n                          <TableCell>\n                            <div className=\"space-y-1 text-sm\">\n                              <div className=\"text-muted-foreground\">\n                                DOB: {application.dateOfBirth ? new Date(application.dateOfBirth).toLocaleDateString() : 'N/A'}\n                              </div>\n                              <div className=\"text-muted-foreground\">\n                                Time: {application.timeOfBirth || 'N/A'}\n                              </div>\n                              <div className=\"text-muted-foreground\">\n                                Place: {application.placeOfBirth || 'N/A'}\n                              </div>\n                            </div>\n                          </TableCell>\n\n                          <TableCell>\n                            <Badge className={getStatusColor(application.status)}>\n                              {application.status.replace('_', ' ')}\n                            </Badge>\n                          </TableCell>\n\n                          <TableCell>\n                            <div className=\"flex space-x-2\">\n                              <Dialog>\n                                <DialogTrigger asChild>\n                                  <Button \n                                    size=\"sm\" \n                                    variant=\"outline\" \n                                    className=\"glass\"\n                                    onClick={() => setSelectedApplication(application)}\n                                  >\n                                    <Eye className=\"w-3 h-3\" />\n                                  </Button>\n                                </DialogTrigger>\n                                <DialogContent className=\"glass-card max-w-4xl max-h-[80vh] overflow-y-auto\">\n                                  <DialogHeader>\n                                    <DialogTitle className=\"text-primary\">Application Details</DialogTitle>\n                                  </DialogHeader>\n                                  {selectedApplication && (\n                                    <div className=\"space-y-6\">\n                                      <div className=\"grid grid-cols-2 gap-4\">\n                                        <div>\n                                          <label className=\"text-sm font-medium text-muted-foreground\">Student Name</label>\n                                          <p className=\"text-foreground\">{selectedApplication.studentName}</p>\n                                        </div>\n                                        <div>\n                                          <label className=\"text-sm font-medium text-muted-foreground\">Course</label>\n                                          <p className=\"text-foreground\">{selectedApplication.courseName}</p>\n                                        </div>\n                                        <div>\n                                          <label className=\"text-sm font-medium text-muted-foreground\">Type</label>\n                                          <p className=\"text-foreground\">{selectedApplication.tuitionType}</p>\n                                        </div>\n                                        <div>\n                                          <label className=\"text-sm font-medium text-muted-foreground\">Price</label>\n                                          <p className=\"text-foreground\">₹{selectedApplication.coursePrice}</p>\n                                        </div>\n                                      </div>\n                                      \n                                      <div>\n                                        <label className=\"text-sm font-medium text-muted-foreground\">Address</label>\n                                        <p className=\"text-foreground\">{selectedApplication.tuitionAddress}</p>\n                                      </div>\n\n                                      {selectedApplication.notes && (\n                                        <div>\n                                          <label className=\"text-sm font-medium text-muted-foreground\">Notes</label>\n                                          <p className=\"text-foreground\">{selectedApplication.notes}</p>\n                                        </div>\n                                      )}\n\n                                      <div className=\"flex space-x-4 pt-4\">\n                                        {selectedApplication.status === \"pending\" && (\n                                          <>\n                                            <Button\n                                              className=\"neon-button\"\n                                              onClick={() => updateApplicationMutation.mutate({\n                                                id: selectedApplication.id,\n                                                status: \"approved\"\n                                              })}\n                                            >\n                                              <CheckCircle className=\"w-4 h-4 mr-2\" />\n                                              Approve\n                                            </Button>\n                                            <Button\n                                              variant=\"outline\"\n                                              className=\"glass text-red-500\"\n                                              onClick={() => updateApplicationMutation.mutate({\n                                                id: selectedApplication.id,\n                                                status: \"rejected\"\n                                              })}\n                                            >\n                                              <XCircle className=\"w-4 h-4 mr-2\" />\n                                              Reject\n                                            </Button>\n                                          </>\n                                        )}\n                                      </div>\n                                    </div>\n                                  )}\n                                </DialogContent>\n                              </Dialog>\n\n                              {application.status === \"pending\" && (\n                                <>\n                                  <Button\n                                    size=\"sm\"\n                                    variant=\"outline\"\n                                    className=\"glass text-green-500\"\n                                    onClick={() => updateApplicationMutation.mutate({\n                                      id: application.id,\n                                      status: \"approved\"\n                                    })}\n                                  >\n                                    <CheckCircle className=\"w-3 h-3\" />\n                                  </Button>\n                                  <Button\n                                    size=\"sm\"\n                                    variant=\"outline\"\n                                    className=\"glass text-red-500\"\n                                    onClick={() => updateApplicationMutation.mutate({\n                                      id: application.id,\n                                      status: \"rejected\"\n                                    })}\n                                  >\n                                    <XCircle className=\"w-3 h-3\" />\n                                  </Button>\n                                </>\n                              )}\n                            </div>\n                          </TableCell>\n                        </TableRow>\n                      ))}\n                    </TableBody>\n                  </Table>\n                </div>\n              )}\n            </GlassCard>\n          </TabsContent>\n\n          {/* Other tabs content would go here */}\n          <TabsContent value=\"courses\">\n            <GlassCard className=\"p-6\">\n              <div className=\"text-center py-12\">\n                <BookOpen className=\"w-12 h-12 text-muted-foreground mx-auto mb-4\" />\n                <h3 className=\"text-lg font-semibold text-foreground mb-2\">Course Management</h3>\n                <p className=\"text-muted-foreground\">Manage home tuition courses and pricing</p>\n              </div>\n            </GlassCard>\n          </TabsContent>\n\n          <TabsContent value=\"students\">\n            <GlassCard className=\"p-6\">\n              <div className=\"text-center py-12\">\n                <Users className=\"w-12 h-12 text-muted-foreground mx-auto mb-4\" />\n                <h3 className=\"text-lg font-semibold text-foreground mb-2\">Student Management</h3>\n                <p className=\"text-muted-foreground\">View and manage enrolled students</p>\n              </div>\n            </GlassCard>\n          </TabsContent>\n\n          <TabsContent value=\"communications\">\n            <GlassCard className=\"p-6\">\n              <div className=\"text-center py-12\">\n                <MessageSquare className=\"w-12 h-12 text-muted-foreground mx-auto mb-4\" />\n                <h3 className=\"text-lg font-semibold text-foreground mb-2\">Student Communications</h3>\n                <p className=\"text-muted-foreground\">Monitor and manage student private messaging</p>\n              </div>\n            </GlassCard>\n          </TabsContent>\n        </Tabs>\n      </div>\n    </div>\n  );\n}","size_bytes":25297},"client/src/pages/admin/support-chat.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useLocation } from \"wouter\";\nimport { GlassCard } from \"@/components/ui/glass-card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { \n  MessageCircle, \n  Bot, \n  User, \n  Headphones,\n  TrendingUp,\n  Clock,\n  ThumbsUp,\n  ThumbsDown,\n  AlertCircle,\n  CheckCircle,\n  Eye,\n  Search,\n  Calendar,\n  BarChart3,\n  Activity,\n  Users,\n  MessageSquare,\n  Star,\n  Zap,\n  HelpCircle\n} from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\n\nexport default function AdminSupportChat() {\n  const [, setLocation] = useLocation();\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [selectedChat, setSelectedChat] = useState<any>(null);\n  const [selectedTab, setSelectedTab] = useState(\"chats\");\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // Check if user is admin\n  const { data: user } = useQuery({\n    queryKey: [\"/api/profile\"],\n    enabled: !!localStorage.getItem(\"token\"),\n  });\n\n  const { data: supportChats, isLoading } = useQuery({\n    queryKey: [\"/api/admin/support-chats\"],\n    enabled: !!localStorage.getItem(\"token\") && user?.isAdmin,\n  });\n\n  const { data: chatAnalytics } = useQuery({\n    queryKey: [\"/api/admin/chat-analytics\"],\n    enabled: !!localStorage.getItem(\"token\") && user?.isAdmin,\n  });\n\n  const { data: messages } = useQuery({\n    queryKey: [\"/api/admin/chat-messages\", selectedChat?.id],\n    enabled: !!selectedChat?.id,\n  });\n\n  const escalateToHumanMutation = useMutation({\n    mutationFn: async (chatId: string) => {\n      return apiRequest(\"POST\", `/api/support-chat/${chatId}/escalate`, {});\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/support-chats\"] });\n      toast({\n        title: \"Escalated\",\n        description: \"Chat has been escalated to human support\",\n      });\n    },\n  });\n\n  if (!user?.isAdmin) {\n    setLocation(\"/\");\n    return null;\n  }\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen pt-16 flex items-center justify-center\">\n        <div className=\"animate-spin w-8 h-8 border-4 border-primary border-t-transparent rounded-full\" />\n      </div>\n    );\n  }\n\n  const filteredChats = supportChats?.filter((chat: any) => \n    chat.userName?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n    chat.userEmail?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n    chat.sessionId?.toLowerCase().includes(searchTerm.toLowerCase())\n  ) || [];\n\n  const stats = {\n    totalChats: supportChats?.length || 0,\n    activeChats: supportChats?.filter((c: any) => c.isActive).length || 0,\n    humanSupportNeeded: supportChats?.filter((c: any) => c.needsHumanSupport).length || 0,\n    avgResponseTime: chatAnalytics?.avgResponseTime || 0,\n    satisfactionRate: chatAnalytics?.satisfactionRate || 0,\n    resolutionRate: chatAnalytics?.resolutionRate || 0\n  };\n\n  return (\n    <div className=\"min-h-screen pt-16 pb-16\" data-testid=\"admin-support-chat\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        {/* Header */}\n        <div className=\"mb-8\">\n          <h1 className=\"text-4xl font-bold neon-text text-primary mb-2\">\n            \"AI Support Chat Management\"\n          </h1>\n          <p className=\"text-muted-foreground\">\n            \"Monitor AI chatbot performance and manage customer support interactions\"\n          </p>\n        </div>\n\n        {/* Statistics Cards */}\n        <div className=\"grid grid-cols-1 md:grid-cols-6 gap-6 mb-8\">\n          <GlassCard className=\"p-6 text-center\">\n            <div className=\"w-12 h-12 bg-blue-500/20 rounded-full flex items-center justify-center mx-auto mb-3\">\n              <MessageCircle className=\"w-6 h-6 text-blue-400\" />\n            </div>\n            <div className=\"text-2xl font-bold text-primary mb-1\">{stats.totalChats}</div>\n            <div className=\"text-sm text-muted-foreground\">Total Chats</div>\n          </GlassCard>\n          \n          <GlassCard className=\"p-6 text-center\">\n            <div className=\"w-12 h-12 bg-green-500/20 rounded-full flex items-center justify-center mx-auto mb-3\">\n              <Activity className=\"w-6 h-6 text-green-400\" />\n            </div>\n            <div className=\"text-2xl font-bold text-green-400 mb-1\">{stats.activeChats}</div>\n            <div className=\"text-sm text-muted-foreground\">Active</div>\n          </GlassCard>\n\n          <GlassCard className=\"p-6 text-center\">\n            <div className=\"w-12 h-12 bg-red-500/20 rounded-full flex items-center justify-center mx-auto mb-3\">\n              <Headphones className=\"w-6 h-6 text-red-400\" />\n            </div>\n            <div className=\"text-2xl font-bold text-red-400 mb-1\">{stats.humanSupportNeeded}</div>\n            <div className=\"text-sm text-muted-foreground\">Need Human</div>\n          </GlassCard>\n\n          <GlassCard className=\"p-6 text-center\">\n            <div className=\"w-12 h-12 bg-yellow-500/20 rounded-full flex items-center justify-center mx-auto mb-3\">\n              <Clock className=\"w-6 h-6 text-yellow-400\" />\n            </div>\n            <div className=\"text-2xl font-bold text-yellow-400 mb-1\">{stats.avgResponseTime}s</div>\n            <div className=\"text-sm text-muted-foreground\">Avg Response</div>\n          </GlassCard>\n\n          <GlassCard className=\"p-6 text-center\">\n            <div className=\"w-12 h-12 bg-purple-500/20 rounded-full flex items-center justify-center mx-auto mb-3\">\n              <Star className=\"w-6 h-6 text-purple-400\" />\n            </div>\n            <div className=\"text-2xl font-bold text-purple-400 mb-1\">{stats.satisfactionRate}%</div>\n            <div className=\"text-sm text-muted-foreground\">Satisfaction</div>\n          </GlassCard>\n\n          <GlassCard className=\"p-6 text-center\">\n            <div className=\"w-12 h-12 bg-pink-500/20 rounded-full flex items-center justify-center mx-auto mb-3\">\n              <CheckCircle className=\"w-6 h-6 text-pink-400\" />\n            </div>\n            <div className=\"text-2xl font-bold text-pink-400 mb-1\">{stats.resolutionRate}%</div>\n            <div className=\"text-sm text-muted-foreground\">Resolution</div>\n          </GlassCard>\n        </div>\n\n        {/* Tabs */}\n        <Tabs value={selectedTab} onValueChange={setSelectedTab} className=\"space-y-6\">\n          <TabsList className=\"glass-card\">\n            <TabsTrigger value=\"chats\" className=\"flex items-center space-x-2\">\n              <MessageCircle className=\"w-4 h-4\" />\n              <span>Chat Sessions</span>\n            </TabsTrigger>\n            <TabsTrigger value=\"analytics\" className=\"flex items-center space-x-2\">\n              <BarChart3 className=\"w-4 h-4\" />\n              <span>Analytics</span>\n            </TabsTrigger>\n            <TabsTrigger value=\"escalations\" className=\"flex items-center space-x-2\">\n              <Headphones className=\"w-4 h-4\" />\n              <span>Human Support</span>\n            </TabsTrigger>\n          </TabsList>\n\n          {/* Chat Sessions Tab */}\n          <TabsContent value=\"chats\" className=\"space-y-6\">\n            {/* Search */}\n            <GlassCard className=\"p-6\">\n              <div className=\"relative\">\n                <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground w-4 h-4\" />\n                <Input\n                  placeholder={\"Search chats by user name, email, or session ID...\"}\n                  value={searchTerm}\n                  onChange={(e) => setSearchTerm(e.target.value)}\n                  className=\"pl-10 form-input\"\n                />\n              </div>\n            </GlassCard>\n\n            {/* Chat Sessions Table */}\n            <GlassCard className=\"p-6\">\n              {filteredChats.length === 0 ? (\n                <div className=\"text-center py-12\">\n                  <MessageCircle className=\"w-12 h-12 text-muted-foreground mx-auto mb-4\" />\n                  <h3 className=\"text-lg font-semibold text-foreground mb-2\">No Chat Sessions Found</h3>\n                  <p className=\"text-muted-foreground\">\n                    {searchTerm ? \"Try adjusting your search criteria\" : \"No chat sessions have been initiated yet\"}\n                  </p>\n                </div>\n              ) : (\n                <div className=\"overflow-x-auto\">\n                  <Table>\n                    <TableHeader>\n                      <TableRow className=\"border-primary/20\">\n                        <TableHead className=\"text-foreground\">User Info</TableHead>\n                        <TableHead className=\"text-foreground\">Session Details</TableHead>\n                        <TableHead className=\"text-foreground\">Activity</TableHead>\n                        <TableHead className=\"text-foreground\">Status</TableHead>\n                        <TableHead className=\"text-foreground\">Actions</TableHead>\n                      </TableRow>\n                    </TableHeader>\n                    <TableBody>\n                      {filteredChats.map((chat: any, index: number) => (\n                        <TableRow key={chat.id} className=\"border-primary/10\">\n                          <TableCell>\n                            <div className=\"flex items-center space-x-3\">\n                              <div className=\"w-10 h-10 rounded-full bg-primary/20 flex items-center justify-center\">\n                                <User className=\"w-5 h-5 text-primary\" />\n                              </div>\n                              <div>\n                                <p className=\"font-semibold text-foreground\">\n                                  {chat.userName || 'Anonymous User'}\n                                </p>\n                                <p className=\"text-sm text-muted-foreground\">\n                                  {chat.userEmail || chat.sessionId}\n                                </p>\n                              </div>\n                            </div>\n                          </TableCell>\n\n                          <TableCell>\n                            <div className=\"space-y-1\">\n                              <p className=\"text-sm text-foreground\">\n                                Session: {chat.sessionId.slice(-8)}...\n                              </p>\n                              <p className=\"text-sm text-muted-foreground\">\n                                Started: {new Date(chat.createdAt).toLocaleString()}\n                              </p>\n                              <p className=\"text-sm text-muted-foreground\">\n                                Messages: {chat.messageCount || 0}\n                              </p>\n                            </div>\n                          </TableCell>\n\n                          <TableCell>\n                            <div className=\"space-y-1\">\n                              <p className=\"text-sm text-foreground\">\n                                Last: {chat.lastMessageAt ? new Date(chat.lastMessageAt).toLocaleTimeString() : 'N/A'}\n                              </p>\n                              <div className=\"flex items-center space-x-2\">\n                                {chat.avgResponseTime && (\n                                  <Badge variant=\"outline\" className=\"text-xs\">\n                                    {chat.avgResponseTime}s avg\n                                  </Badge>\n                                )}\n                                {chat.satisfaction && (\n                                  <div className=\"flex items-center space-x-1\">\n                                    {chat.satisfaction === 'positive' ? (\n                                      <ThumbsUp className=\"w-3 h-3 text-green-500\" />\n                                    ) : (\n                                      <ThumbsDown className=\"w-3 h-3 text-red-500\" />\n                                    )}\n                                  </div>\n                                )}\n                              </div>\n                            </div>\n                          </TableCell>\n\n                          <TableCell>\n                            <div className=\"space-y-2\">\n                              <Badge variant={chat.isActive ? \"default\" : \"secondary\"}>\n                                {chat.isActive ? \"Active\" : \"Inactive\"}\n                              </Badge>\n                              {chat.needsHumanSupport && (\n                                <Badge variant=\"destructive\" className=\"block\">\n                                  Needs Human Support\n                                </Badge>\n                              )}\n                              {chat.isResolved && (\n                                <Badge variant=\"outline\" className=\"block\">\n                                  Resolved\n                                </Badge>\n                              )}\n                            </div>\n                          </TableCell>\n\n                          <TableCell>\n                            <div className=\"flex space-x-2\">\n                              <Dialog>\n                                <DialogTrigger asChild>\n                                  <Button \n                                    size=\"sm\" \n                                    variant=\"outline\" \n                                    className=\"glass\"\n                                    onClick={() => setSelectedChat(chat)}\n                                  >\n                                    <Eye className=\"w-3 h-3\" />\n                                  </Button>\n                                </DialogTrigger>\n                                <DialogContent className=\"glass-card max-w-4xl max-h-[80vh] overflow-y-auto\">\n                                  <DialogHeader>\n                                    <DialogTitle className=\"text-primary\">Chat Session Details</DialogTitle>\n                                  </DialogHeader>\n                                  {selectedChat && (\n                                    <div className=\"space-y-4\">\n                                      <div className=\"grid grid-cols-2 gap-4\">\n                                        <div>\n                                          <label className=\"text-sm font-medium text-muted-foreground\">User</label>\n                                          <p className=\"text-foreground\">{selectedChat.userName || 'Anonymous'}</p>\n                                        </div>\n                                        <div>\n                                          <label className=\"text-sm font-medium text-muted-foreground\">Session ID</label>\n                                          <p className=\"text-foreground font-mono text-sm\">{selectedChat.sessionId}</p>\n                                        </div>\n                                      </div>\n                                      \n                                      <div>\n                                        <label className=\"text-sm font-medium text-muted-foreground mb-2 block\">Messages</label>\n                                        <div className=\"space-y-2 max-h-60 overflow-y-auto border border-primary/20 rounded-lg p-4\">\n                                          {messages?.map((msg: any, i: number) => (\n                                            <div key={i} className={`flex ${msg.sender === 'user' ? 'justify-end' : 'justify-start'}`}>\n                                              <div className={`max-w-xs px-3 py-2 rounded-lg ${\n                                                msg.sender === 'user' \n                                                  ? 'bg-primary/20 text-foreground' \n                                                  : 'bg-secondary/20 text-foreground'\n                                              }`}>\n                                                <div className=\"flex items-center space-x-2 mb-1\">\n                                                  {msg.sender === 'user' ? (\n                                                    <User className=\"w-3 h-3\" />\n                                                  ) : (\n                                                    <Bot className=\"w-3 h-3\" />\n                                                  )}\n                                                  <span className=\"text-xs font-medium\">\n                                                    {msg.sender === 'user' ? 'User' : 'AI Assistant'}\n                                                  </span>\n                                                </div>\n                                                <p className=\"text-sm\">{msg.message}</p>\n                                                <p className=\"text-xs text-muted-foreground mt-1\">\n                                                  {new Date(msg.createdAt).toLocaleTimeString()}\n                                                </p>\n                                              </div>\n                                            </div>\n                                          ))}\n                                        </div>\n                                      </div>\n                                    </div>\n                                  )}\n                                </DialogContent>\n                              </Dialog>\n\n                              {chat.needsHumanSupport && !chat.isEscalated && (\n                                <Button\n                                  size=\"sm\"\n                                  variant=\"outline\"\n                                  className=\"glass text-red-500\"\n                                  onClick={() => escalateToHumanMutation.mutate(chat.id)}\n                                >\n                                  <Headphones className=\"w-3 h-3\" />\n                                </Button>\n                              )}\n                            </div>\n                          </TableCell>\n                        </TableRow>\n                      ))}\n                    </TableBody>\n                  </Table>\n                </div>\n              )}\n            </GlassCard>\n          </TabsContent>\n\n          {/* Analytics Tab */}\n          <TabsContent value=\"analytics\">\n            <GlassCard className=\"p-6\">\n              <div className=\"text-center py-12\">\n                <BarChart3 className=\"w-12 h-12 text-muted-foreground mx-auto mb-4\" />\n                <h3 className=\"text-lg font-semibold text-foreground mb-2\">Chat Analytics</h3>\n                <p className=\"text-muted-foreground\">AI performance metrics and insights</p>\n              </div>\n            </GlassCard>\n          </TabsContent>\n\n          {/* Human Support Tab */}\n          <TabsContent value=\"escalations\">\n            <GlassCard className=\"p-6\">\n              <div className=\"text-center py-12\">\n                <Headphones className=\"w-12 h-12 text-muted-foreground mx-auto mb-4\" />\n                <h3 className=\"text-lg font-semibold text-foreground mb-2\">Human Support Queue</h3>\n                <p className=\"text-muted-foreground\">Escalated chats requiring human intervention</p>\n              </div>\n            </GlassCard>\n          </TabsContent>\n        </Tabs>\n      </div>\n    </div>\n  );\n}","size_bytes":19644},"server/gemini.ts":{"content":"import { GoogleGenerativeAI } from \"@google/generative-ai\";\n\nif (!process.env.GEMINI_API_KEY) {\n  console.warn(\"GEMINI_API_KEY not set. AI responses will be limited to FAQ matching.\");\n}\n\nconst genAI = process.env.GEMINI_API_KEY ? new GoogleGenerativeAI(process.env.GEMINI_API_KEY) : null;\n\ninterface ServiceContext {\n  consultationTypes: any[];\n  courses: any[];\n  products: any[];\n  faqs: any[];\n  pricing: any;\n}\n\nexport async function generateAIResponse(\n  userMessage: string,\n  context: ServiceContext\n): Promise<string> {\n  if (!genAI) {\n    return \"I apologize, but AI responses are currently unavailable. Please contact our support team directly for assistance with your astrology consultation needs.\";\n  }\n\n  try {\n    const model = genAI.getGenerativeModel({ model: \"gemini-pro\" });\n\n    const systemPrompt = `You are an AI assistant for \"Jai Guru Astro Remedy\", an astrology consultation business run by expert astrologer Arup Shastri. \n\nBUSINESS CONTEXT:\n- Consultation Types: ${JSON.stringify(context.consultationTypes)}\n- Available Courses: ${JSON.stringify(context.courses)}\n- Products: ${JSON.stringify(context.products)}\n- Common FAQs: ${context.faqs.map(faq => `Q: ${faq.question} A: ${faq.answer}`).join('\\n')}\n\nINSTRUCTIONS:\n1. Provide helpful, accurate information about our astrology services\n2. Always be respectful and professional\n3. Mention specific pricing and service details when relevant\n4. Encourage booking consultations when appropriate\n5. If you don't know something specific, offer to connect them with our expert team\n6. Keep responses concise but informative\n7. Use warm, welcoming tone befitting an astrology business\n\nUSER QUESTION: ${userMessage}\n\nPlease provide a helpful response:`;\n\n    const result = await model.generateContent(systemPrompt);\n    const response = await result.response;\n    return response.text();\n\n  } catch (error) {\n    console.error(\"Gemini API error:\", error);\n    return \"I'm experiencing some technical difficulties right now. For immediate assistance with your astrology consultation needs, please contact our support team directly.\";\n  }\n}\n\nexport async function buildServiceContext(storage: any): Promise<ServiceContext> {\n  try {\n    const [courses, products, faqs] = await Promise.all([\n      storage.getAllCourses(),\n      storage.getAllProducts(), \n      storage.getAllFaqs()\n    ]);\n\n    const consultationTypes = [\n      {\n        type: \"video\",\n        name: \"Video Call Consultation\",\n        pricing: \"₹299-999 (15-60 minutes)\",\n        description: \"Face-to-face consultation via secure video call\"\n      },\n      {\n        type: \"audio\", \n        name: \"Audio Call Consultation\",\n        pricing: \"₹299-999 (15-60 minutes)\",\n        description: \"Voice-only consultation for focused guidance\"\n      },\n      {\n        type: \"chat\",\n        name: \"Chat Session\",\n        pricing: \"₹299-999 (15-60 minutes)\", \n        description: \"Text-based consultation through secure messaging\"\n      },\n      {\n        type: \"in-person\",\n        name: \"In-Person Consultation\",\n        pricing: \"₹499-999 (30-60 minutes)\",\n        description: \"Traditional face-to-face consultation in Kolkata\",\n        availability: \"Wednesdays 3pm-6pm only\"\n      },\n      {\n        type: \"home-service\",\n        name: \"Home Service Consultation\", \n        pricing: \"₹2499-6999 (90-180 minutes)\",\n        description: \"Premium consultation at your home with personalized rituals\",\n        coverage: \"Within 25km of Kolkata\"\n      },\n      {\n        type: \"topic-based\",\n        name: \"Topic-Based Consultation\",\n        pricing: \"₹100 per topic (6 minutes each)\",\n        description: \"Select specific topics for focused guidance\"\n      }\n    ];\n\n    return {\n      consultationTypes,\n      courses: courses.slice(0, 5), // Limit context size\n      products: products.slice(0, 5),\n      faqs: faqs.slice(0, 10),\n      pricing: {\n        consultations: \"₹299-6999 depending on type and duration\",\n        courses: \"Various pricing available\", \n        products: \"Authentic astrological remedies and items\"\n      }\n    };\n\n  } catch (error) {\n    console.error(\"Error building service context:\", error);\n    return {\n      consultationTypes: [],\n      courses: [],\n      products: [],\n      faqs: [],\n      pricing: {}\n    };\n  }\n}","size_bytes":4299},"client/src/components/ui/cart-drawer.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n  SheetTrigger,\n} from \"@/components/ui/sheet\";\nimport { \n  ShoppingCart, \n  Plus, \n  Minus, \n  X, \n  CreditCard,\n  Calendar,\n  Book,\n  Package,\n  Trash2,\n  ArrowRight\n} from \"lucide-react\";\nimport { useLanguage } from \"@/contexts/LanguageContext\";\n\ninterface CartItem {\n  id: string;\n  type: 'consultation' | 'course' | 'product';\n  name: string;\n  description?: string;\n  price: number;\n  duration?: number;\n  quantity: number;\n  image?: string;\n  category?: string;\n}\n\nexport default function CartDrawer() {\n  const [, setLocation] = useLocation();\n  const [cartItems, setCartItems] = useState<CartItem[]>([]);\n  const [isOpen, setIsOpen] = useState(false);\n\n  // Load cart from localStorage\n  useEffect(() => {\n    const savedCart = localStorage.getItem(\"cart\");\n    if (savedCart) {\n      try {\n        setCartItems(JSON.parse(savedCart));\n      } catch (error) {\n        console.error(\"Failed to parse cart data:\", error);\n        localStorage.removeItem(\"cart\");\n      }\n    }\n  }, []);\n\n  // Save cart to localStorage whenever it changes\n  useEffect(() => {\n    localStorage.setItem(\"cart\", JSON.stringify(cartItems));\n  }, [cartItems]);\n\n  const updateQuantity = (itemId: string, newQuantity: number) => {\n    if (newQuantity <= 0) {\n      removeItem(itemId);\n      return;\n    }\n\n    setCartItems(prevItems =>\n      prevItems.map(item =>\n        item.id === itemId ? { ...item, quantity: newQuantity } : item\n      )\n    );\n  };\n\n  const removeItem = (itemId: string) => {\n    setCartItems(prevItems => prevItems.filter(item => item.id !== itemId));\n  };\n\n  const clearCart = () => {\n    setCartItems([]);\n  };\n\n  const getItemIcon = (type: string) => {\n    switch (type) {\n      case 'consultation':\n        return Calendar;\n      case 'course':\n        return Book;\n      case 'product':\n        return Package;\n      default:\n        return Package;\n    }\n  };\n\n  const totalItems = cartItems.reduce((sum, item) => sum + item.quantity, 0);\n  const totalPrice = cartItems.reduce((sum, item) => sum + (item.price * item.quantity), 0);\n  const gst = Math.round(totalPrice * 0.18);\n  const finalTotal = totalPrice + gst;\n\n  const handleCheckout = () => {\n    if (cartItems.length === 0) return;\n    \n    setIsOpen(false);\n    setLocation(\"/checkout\");\n  };\n\n  return (\n    <Sheet open={isOpen} onOpenChange={setIsOpen}>\n      <SheetTrigger asChild>\n        <Button variant=\"outline\" size=\"sm\" className=\"relative glass\" data-testid=\"cart-trigger\">\n          <ShoppingCart className=\"w-4 h-4\" />\n          {totalItems > 0 && (\n            <Badge \n              variant=\"destructive\" \n              className=\"absolute -top-2 -right-2 h-5 w-5 p-0 flex items-center justify-center text-xs rounded-full\"\n            >\n              {totalItems}\n            </Badge>\n          )}\n        </Button>\n      </SheetTrigger>\n      \n      <SheetContent className=\"glass-card w-full sm:w-96 flex flex-col h-full\">\n        <SheetHeader className=\"border-b border-primary/20 pb-4\">\n          <SheetTitle className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-2\">\n              <ShoppingCart className=\"w-5 h-5 text-primary\" />\n              <span className=\"neon-text text-primary\">Shopping Cart</span>\n            </div>\n            <Badge variant=\"outline\" className=\"text-primary border-primary/50\">\n              {totalItems} items\n            </Badge>\n          </SheetTitle>\n          <SheetDescription>\n            Review your items before checkout\n          </SheetDescription>\n        </SheetHeader>\n\n        <div className=\"flex-1 overflow-auto py-4 space-y-4\">\n          {cartItems.length === 0 ? (\n            <div className=\"flex flex-col items-center justify-center h-full text-center\">\n              <ShoppingCart className=\"w-12 h-12 text-muted-foreground mb-4\" />\n              <h3 className=\"text-lg font-semibold text-foreground mb-2\">\n                Your cart is empty\n              </h3>\n              <p className=\"text-sm text-muted-foreground mb-4\">\n                Add some items to get started\n              </p>\n              <Button \n                onClick={() => setIsOpen(false)} \n                variant=\"outline\" \n                className=\"glass\"\n              >\n                Continue Shopping\n              </Button>\n            </div>\n          ) : (\n            <>\n              {cartItems.map((item) => {\n                const IconComponent = getItemIcon(item.type);\n                return (\n                  <div key={item.id} className=\"glass p-4 rounded-lg\">\n                    <div className=\"flex items-start space-x-3\">\n                      <div className=\"w-12 h-12 bg-primary/20 rounded-lg flex items-center justify-center flex-shrink-0\">\n                        <IconComponent className=\"w-6 h-6 text-primary\" />\n                      </div>\n                      \n                      <div className=\"flex-1 min-w-0\">\n                        <h4 className=\"font-medium text-foreground truncate\">\n                          {item.name}\n                        </h4>\n                        {item.description && (\n                          <p className=\"text-sm text-muted-foreground line-clamp-2 mt-1\">\n                            {item.description}\n                          </p>\n                        )}\n                        {item.duration && (\n                          <div className=\"flex items-center text-sm text-primary mt-1\">\n                            <Calendar className=\"w-3 h-3 mr-1\" />\n                            {item.duration} min\n                          </div>\n                        )}\n                        {item.category && (\n                          <Badge variant=\"secondary\" className=\"mt-2 text-xs\">\n                            {item.category}\n                          </Badge>\n                        )}\n                      </div>\n\n                      <Button\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        onClick={() => removeItem(item.id)}\n                        className=\"text-muted-foreground hover:text-destructive flex-shrink-0\"\n                      >\n                        <X className=\"w-4 h-4\" />\n                      </Button>\n                    </div>\n\n                    <div className=\"flex items-center justify-between mt-4\">\n                      <div className=\"flex items-center space-x-3\">\n                        {item.type !== 'consultation' && (\n                          <>\n                            <Button\n                              variant=\"outline\"\n                              size=\"sm\"\n                              onClick={() => updateQuantity(item.id, item.quantity - 1)}\n                              disabled={item.quantity <= 1}\n                              className=\"h-8 w-8 p-0\"\n                            >\n                              <Minus className=\"w-3 h-3\" />\n                            </Button>\n                            <span className=\"w-8 text-center font-medium\">\n                              {item.quantity}\n                            </span>\n                            <Button\n                              variant=\"outline\"\n                              size=\"sm\"\n                              onClick={() => updateQuantity(item.id, item.quantity + 1)}\n                              className=\"h-8 w-8 p-0\"\n                            >\n                              <Plus className=\"w-3 h-3\" />\n                            </Button>\n                          </>\n                        )}\n                      </div>\n                      <div className=\"text-right\">\n                        <p className=\"font-semibold text-foreground\">\n                          ₹{(item.price * item.quantity).toLocaleString()}\n                        </p>\n                        {item.quantity > 1 && (\n                          <p className=\"text-sm text-muted-foreground\">\n                            ₹{item.price.toLocaleString()} each\n                          </p>\n                        )}\n                      </div>\n                    </div>\n                  </div>\n                );\n              })}\n            </>\n          )}\n        </div>\n\n        {cartItems.length > 0 && (\n          <>\n            {/* Cart Summary */}\n            <div className=\"border-t border-primary/20 pt-4 space-y-3\">\n              <div className=\"glass p-4 rounded-lg space-y-2\">\n                <div className=\"flex justify-between text-muted-foreground\">\n                  <span>Subtotal</span>\n                  <span>₹{totalPrice.toLocaleString()}</span>\n                </div>\n                <div className=\"flex justify-between text-muted-foreground\">\n                  <span>GST (18%)</span>\n                  <span>₹{gst.toLocaleString()}</span>\n                </div>\n                <div className=\"flex justify-between text-lg font-bold text-foreground pt-2 border-t border-primary/20\">\n                  <span>Total</span>\n                  <span>₹{finalTotal.toLocaleString()}</span>\n                </div>\n              </div>\n\n              {/* Action Buttons */}\n              <div className=\"grid grid-cols-2 gap-3\">\n                <Button\n                  variant=\"outline\"\n                  onClick={clearCart}\n                  className=\"glass\"\n                  data-testid=\"clear-cart-button\"\n                >\n                  <Trash2 className=\"w-4 h-4 mr-2\" />\n                  Clear All\n                </Button>\n                <Button\n                  onClick={handleCheckout}\n                  className=\"neon-button\"\n                  data-testid=\"checkout-button\"\n                >\n                  <CreditCard className=\"w-4 h-4 mr-2\" />\n                  Checkout\n                </Button>\n              </div>\n\n              <Button\n                variant=\"ghost\"\n                onClick={() => setIsOpen(false)}\n                className=\"w-full text-muted-foreground\"\n              >\n                Continue Shopping\n                <ArrowRight className=\"w-4 h-4 ml-2\" />\n              </Button>\n            </div>\n          </>\n        )}\n      </SheetContent>\n    </Sheet>\n  );\n}\n\n// Export function to add items to cart\nexport const addToCart = (item: Omit<CartItem, 'quantity'> & { quantity?: number }) => {\n  const currentCart = JSON.parse(localStorage.getItem(\"cart\") || \"[]\") as CartItem[];\n  const existingItem = currentCart.find(cartItem => cartItem.id === item.id);\n\n  if (existingItem) {\n    existingItem.quantity += item.quantity || 1;\n  } else {\n    currentCart.push({ ...item, quantity: item.quantity || 1 });\n  }\n\n  localStorage.setItem(\"cart\", JSON.stringify(currentCart));\n  \n  // Dispatch custom event to update cart components\n  window.dispatchEvent(new CustomEvent('cartUpdated'));\n};","size_bytes":11075},"client/src/pages/admin/analytics.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { useLocation } from \"wouter\";\nimport { GlassCard } from \"@/components/ui/glass-card\";\nimport { \n  BarChart3,\n  TrendingUp,\n  DollarSign,\n  Users,\n  Calendar,\n  Package,\n  BookOpen,\n  MessageCircle,\n  Star,\n  Activity,\n  Eye,\n  Clock,\n  Target,\n  Globe,\n  Zap\n} from \"lucide-react\";\n\n\nexport default function AdminAnalytics() {\n  const [, setLocation] = useLocation();\n\n  // Check if user is admin\n  const { data: user } = useQuery({\n    queryKey: [\"/api/profile\"],\n    enabled: !!localStorage.getItem(\"token\"),\n  });\n\n  const { data: analytics, isLoading } = useQuery({\n    queryKey: [\"/api/admin/analytics\"],\n    enabled: !!localStorage.getItem(\"token\") && user?.isAdmin,\n  });\n\n  if (!user?.isAdmin) {\n    setLocation(\"/\");\n    return null;\n  }\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen pt-16 flex items-center justify-center\">\n        <div className=\"animate-spin w-8 h-8 border-4 border-primary border-t-transparent rounded-full\" />\n      </div>\n    );\n  }\n\n  // Mock analytics data - would come from backend in real implementation\n  const revenueData = [\n    { month: 'Jan', revenue: 45000, consultations: 120, courses: 45 },\n    { month: 'Feb', revenue: 52000, consultations: 135, courses: 52 },\n    { month: 'Mar', revenue: 48000, consultations: 128, courses: 48 },\n    { month: 'Apr', revenue: 61000, consultations: 156, courses: 61 },\n    { month: 'May', revenue: 55000, consultations: 142, courses: 55 },\n    { month: 'Jun', revenue: 67000, consultations: 168, courses: 62 },\n  ];\n\n  const performanceMetrics = [\n    {\n      title: \"Conversion Rate\",\n      value: \"24.8%\",\n      change: \"+3.2%\",\n      trend: \"up\",\n      icon: Target,\n      color: \"text-green-400\",\n      bgColor: \"bg-green-500/10\"\n    },\n    {\n      title: \"Avg Session Time\",\n      value: \"8m 42s\",\n      change: \"+1.5%\",\n      trend: \"up\",\n      icon: Clock,\n      color: \"text-blue-400\",\n      bgColor: \"bg-blue-500/10\"\n    },\n    {\n      title: \"Customer Retention\",\n      value: \"78.5%\",\n      change: \"+5.1%\",\n      trend: \"up\",\n      icon: Users,\n      color: \"text-purple-400\",\n      bgColor: \"bg-purple-500/10\"\n    },\n    {\n      title: \"AI Accuracy\",\n      value: \"94.2%\",\n      change: \"+2.8%\",\n      trend: \"up\",\n      icon: Zap,\n      color: \"text-yellow-400\",\n      bgColor: \"bg-yellow-500/10\"\n    }\n  ];\n\n  const topServices = [\n    { name: \"Birth Chart Reading\", bookings: 156, revenue: 31200, growth: \"+12%\" },\n    { name: \"Relationship Consultation\", bookings: 134, revenue: 26800, growth: \"+8%\" },\n    { name: \"Career Guidance\", bookings: 98, revenue: 19600, growth: \"+15%\" },\n    { name: \"Health & Wellness\", bookings: 87, revenue: 17400, growth: \"+6%\" },\n    { name: \"Muhurat Consultation\", bookings: 76, revenue: 15200, growth: \"+22%\" },\n  ];\n\n  const trafficSources = [\n    { source: \"Organic Search\", visitors: 2456, percentage: 42 },\n    { source: \"Social Media\", visitors: 1834, percentage: 32 },\n    { source: \"Direct\", visitors: 987, percentage: 17 },\n    { source: \"Referrals\", visitors: 523, percentage: 9 },\n  ];\n\n  return (\n    <div className=\"min-h-screen pt-16 pb-16\" data-testid=\"admin-analytics\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        {/* Header */}\n        <div className=\"mb-8\">\n          <h1 className=\"text-4xl font-bold neon-text text-primary mb-2\">\n            \"Analytics & Reports\"\n          </h1>\n          <p className=\"text-muted-foreground\">\n            \"Comprehensive insights into your astrology business performance\"\n          </p>\n        </div>\n\n        {/* Performance Metrics */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\n          {performanceMetrics.map((metric, index) => (\n            <GlassCard key={index} className=\"p-6 hover:scale-105 transition-all duration-300 group\">\n              <div className=\"flex items-center justify-between mb-4\">\n                <div className={`w-14 h-14 rounded-xl ${metric.bgColor} flex items-center justify-center group-hover:scale-110 transition-transform duration-300`}>\n                  <metric.icon className={`w-7 h-7 ${metric.color}`} />\n                </div>\n                <div className={`flex items-center space-x-1 text-sm ${\n                  metric.trend === 'up' ? 'text-green-400' : 'text-red-400'\n                }`}>\n                  <TrendingUp className={`w-4 h-4 ${metric.trend === 'down' ? 'rotate-180' : ''}`} />\n                  <span>{metric.change}</span>\n                </div>\n              </div>\n              <div>\n                <p className=\"text-sm text-muted-foreground mb-1\">{metric.title}</p>\n                <p className=\"text-2xl font-bold text-foreground group-hover:text-primary transition-colors\">\n                  {metric.value}\n                </p>\n              </div>\n            </GlassCard>\n          ))}\n        </div>\n\n        {/* Revenue Chart */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8 mb-8\">\n          <GlassCard className=\"p-6\">\n            <div className=\"flex items-center justify-between mb-6\">\n              <h3 className=\"text-xl font-bold text-foreground\">Monthly Revenue Trend</h3>\n              <DollarSign className=\"w-6 h-6 text-green-400\" />\n            </div>\n            <div className=\"space-y-4\">\n              {revenueData.map((data, index) => (\n                <div key={index} className=\"flex items-center justify-between\">\n                  <span className=\"text-muted-foreground text-sm\">{data.month}</span>\n                  <div className=\"flex items-center space-x-4\">\n                    <div className=\"w-32 bg-background rounded-full h-2\">\n                      <div \n                        className=\"bg-gradient-to-r from-green-400 to-emerald-500 h-2 rounded-full\" \n                        style={{ width: `${(data.revenue / 70000) * 100}%` }}\n                      />\n                    </div>\n                    <span className=\"text-foreground font-semibold text-sm\">\n                      ₹{data.revenue.toLocaleString()}\n                    </span>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </GlassCard>\n\n          <GlassCard className=\"p-6\">\n            <div className=\"flex items-center justify-between mb-6\">\n              <h3 className=\"text-xl font-bold text-foreground\">Top Services</h3>\n              <Star className=\"w-6 h-6 text-yellow-400\" />\n            </div>\n            <div className=\"space-y-4\">\n              {topServices.map((service, index) => (\n                <div key={index} className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"font-medium text-foreground text-sm\">{service.name}</p>\n                    <p className=\"text-xs text-muted-foreground\">{service.bookings} bookings</p>\n                  </div>\n                  <div className=\"text-right\">\n                    <p className=\"font-semibold text-primary text-sm\">₹{service.revenue.toLocaleString()}</p>\n                    <p className=\"text-xs text-green-400\">{service.growth}</p>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </GlassCard>\n        </div>\n\n        {/* Traffic Sources & User Engagement */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8 mb-8\">\n          <GlassCard className=\"p-6\">\n            <div className=\"flex items-center justify-between mb-6\">\n              <h3 className=\"text-xl font-bold text-foreground\">Traffic Sources</h3>\n              <Globe className=\"w-6 h-6 text-blue-400\" />\n            </div>\n            <div className=\"space-y-4\">\n              {trafficSources.map((source, index) => (\n                <div key={index} className=\"space-y-2\">\n                  <div className=\"flex items-center justify-between\">\n                    <span className=\"text-foreground text-sm\">{source.source}</span>\n                    <span className=\"text-muted-foreground text-sm\">{source.visitors} visitors</span>\n                  </div>\n                  <div className=\"w-full bg-background rounded-full h-2\">\n                    <div \n                      className=\"bg-gradient-to-r from-blue-400 to-cyan-500 h-2 rounded-full\" \n                      style={{ width: `${source.percentage}%` }}\n                    />\n                  </div>\n                </div>\n              ))}\n            </div>\n          </GlassCard>\n\n          <GlassCard className=\"p-6\">\n            <div className=\"flex items-center justify-between mb-6\">\n              <h3 className=\"text-xl font-bold text-foreground\">User Engagement</h3>\n              <Activity className=\"w-6 h-6 text-purple-400\" />\n            </div>\n            <div className=\"space-y-6\">\n              <div className=\"text-center\">\n                <div className=\"w-32 h-32 mx-auto mb-4 relative\">\n                  <div className=\"w-full h-full border-8 border-background rounded-full\"></div>\n                  <div className=\"absolute inset-0 w-full h-full border-8 border-primary rounded-full\" \n                       style={{ clipPath: 'polygon(0 0, 75% 0, 75% 100%, 0 100%)' }}>\n                  </div>\n                  <div className=\"absolute inset-0 flex items-center justify-center\">\n                    <div className=\"text-center\">\n                      <div className=\"text-2xl font-bold text-primary\">75%</div>\n                      <div className=\"text-xs text-muted-foreground\">Engagement</div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n              <div className=\"grid grid-cols-2 gap-4 text-center\">\n                <div>\n                  <div className=\"text-lg font-bold text-green-400\">8.2min</div>\n                  <div className=\"text-xs text-muted-foreground\">Avg. Session</div>\n                </div>\n                <div>\n                  <div className=\"text-lg font-bold text-blue-400\">92%</div>\n                  <div className=\"text-xs text-muted-foreground\">Satisfaction</div>\n                </div>\n              </div>\n            </div>\n          </GlassCard>\n        </div>\n\n        {/* Quick Stats Grid */}\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n          <GlassCard className=\"p-6 text-center\">\n            <div className=\"w-16 h-16 bg-gradient-to-br from-purple-500 to-pink-500 rounded-xl flex items-center justify-center mx-auto mb-4\">\n              <Calendar className=\"w-8 h-8 text-white\" />\n            </div>\n            <div className=\"text-2xl font-bold text-primary mb-2\">1,247</div>\n            <div className=\"text-sm text-muted-foreground mb-1\">Total Consultations</div>\n            <div className=\"text-xs text-green-400\">+18% this month</div>\n          </GlassCard>\n\n          <GlassCard className=\"p-6 text-center\">\n            <div className=\"w-16 h-16 bg-gradient-to-br from-orange-500 to-yellow-500 rounded-xl flex items-center justify-center mx-auto mb-4\">\n              <BookOpen className=\"w-8 h-8 text-white\" />\n            </div>\n            <div className=\"text-2xl font-bold text-primary mb-2\">89</div>\n            <div className=\"text-sm text-muted-foreground mb-1\">Course Enrollments</div>\n            <div className=\"text-xs text-green-400\">+12% this month</div>\n          </GlassCard>\n\n          <GlassCard className=\"p-6 text-center\">\n            <div className=\"w-16 h-16 bg-gradient-to-br from-cyan-500 to-blue-500 rounded-xl flex items-center justify-center mx-auto mb-4\">\n              <MessageCircle className=\"w-8 h-8 text-white\" />\n            </div>\n            <div className=\"text-2xl font-bold text-primary mb-2\">2,847</div>\n            <div className=\"text-sm text-muted-foreground mb-1\">AI Chat Sessions</div>\n            <div className=\"text-xs text-green-400\">+25% this month</div>\n          </GlassCard>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":11910},"client/src/pages/admin/notifications.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { GlassCard } from \"@/components/ui/glass-card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport {\n  MessageSquare,\n  Mail,\n  CheckCircle,\n  XCircle,\n  Send,\n  Settings,\n  AlertCircle,\n  Bell,\n  Smartphone\n} from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\n\nexport default function AdminNotifications() {\n  const [testPhoneNumber, setTestPhoneNumber] = useState(\"\");\n  const [testCountryCode, setTestCountryCode] = useState(\"+91\");\n  const [testEmail, setTestEmail] = useState(\"\");\n  const [testMessage, setTestMessage] = useState(\"\");\n  const { toast } = useToast();\n\n  const { data: notificationStatus, isLoading } = useQuery({\n    queryKey: [\"/api/notifications/status\"],\n  });\n\n  const sendTestSMSMutation = useMutation({\n    mutationFn: async (data: any) => {\n      return apiRequest(\"POST\", \"/api/auth/send-otp\", {\n        phoneNumber: data.phoneNumber,\n        countryCode: data.countryCode,\n        purpose: 'test'\n      });\n    },\n    onSuccess: () => {\n      toast({\n        title: \"SMS Test Sent\",\n        description: \"Test OTP has been sent to the provided number\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"SMS Test Failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const sendTestEmailMutation = useMutation({\n    mutationFn: async (data: any) => {\n      // This would be a test email endpoint\n      return apiRequest(\"POST\", \"/api/test/send-email\", data);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Email Test Sent\",\n        description: \"Test email has been sent successfully\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Email Test Failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleTestSMS = () => {\n    if (!testPhoneNumber) {\n      toast({\n        title: \"Phone number required\",\n        description: \"Please enter a phone number for testing\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    sendTestSMSMutation.mutate({\n      phoneNumber: testPhoneNumber,\n      countryCode: testCountryCode\n    });\n  };\n\n  const handleTestEmail = () => {\n    if (!testEmail) {\n      toast({\n        title: \"Email required\",\n        description: \"Please enter an email address for testing\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    sendTestEmailMutation.mutate({\n      email: testEmail,\n      subject: \"Test Email from Jai Guru Astro Remedy\",\n      message: testMessage || \"This is a test email to verify email service functionality.\"\n    });\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"space-y-6\">\n        <div className=\"animate-spin w-8 h-8 border-4 border-primary border-t-transparent rounded-full mx-auto\" />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\" data-testid=\"admin-notifications\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold neon-text text-primary\">\n            \"Notification Services\"\n          </h1>\n          <p className=\"text-muted-foreground mt-1\">\n            Manage SMS and email communication services\n          </p>\n        </div>\n        <Badge \n          variant={notificationStatus?.twilioConfigured && notificationStatus?.emailConfigured ? \"default\" : \"destructive\"}\n          className=\"px-3 py-1\"\n        >\n          {notificationStatus?.twilioConfigured && notificationStatus?.emailConfigured ? \"All Services Active\" : \"Setup Required\"}\n        </Badge>\n      </div>\n\n      {/* Service Status */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n        {/* SMS Service Status */}\n        <GlassCard className=\"p-6\">\n          <div className=\"flex items-center justify-between mb-4\">\n            <div className=\"flex items-center space-x-3\">\n              <div className={`w-12 h-12 rounded-lg flex items-center justify-center ${\n                notificationStatus?.twilioConfigured ? 'bg-green-500/20' : 'bg-red-500/20'\n              }`}>\n                <MessageSquare className={`w-6 h-6 ${\n                  notificationStatus?.twilioConfigured ? 'text-green-400' : 'text-red-400'\n                }`} />\n              </div>\n              <div>\n                <h3 className=\"text-lg font-semibold text-foreground\">SMS Service</h3>\n                <p className=\"text-sm text-muted-foreground\">Twilio Integration</p>\n              </div>\n            </div>\n            {notificationStatus?.twilioConfigured ? (\n              <CheckCircle className=\"w-6 h-6 text-green-400\" />\n            ) : (\n              <XCircle className=\"w-6 h-6 text-red-400\" />\n            )}\n          </div>\n\n          <div className=\"space-y-3\">\n            <div className=\"flex justify-between items-center\">\n              <span className=\"text-muted-foreground\">Status</span>\n              <span className={notificationStatus?.twilioConfigured ? 'text-green-400' : 'text-red-400'}>\n                {notificationStatus?.twilioConfigured ? 'Connected' : 'Not Configured'}\n              </span>\n            </div>\n            \n            {notificationStatus?.services?.sms?.features && (\n              <div>\n                <span className=\"text-muted-foreground\">Features:</span>\n                <div className=\"mt-2 flex flex-wrap gap-2\">\n                  {notificationStatus.services.sms.features.map((feature: string, index: number) => (\n                    <Badge key={index} variant=\"secondary\" className=\"text-xs\">\n                      {feature}\n                    </Badge>\n                  ))}\n                </div>\n              </div>\n            )}\n          </div>\n        </GlassCard>\n\n        {/* Email Service Status */}\n        <GlassCard className=\"p-6\">\n          <div className=\"flex items-center justify-between mb-4\">\n            <div className=\"flex items-center space-x-3\">\n              <div className={`w-12 h-12 rounded-lg flex items-center justify-center ${\n                notificationStatus?.emailConfigured ? 'bg-green-500/20' : 'bg-red-500/20'\n              }`}>\n                <Mail className={`w-6 h-6 ${\n                  notificationStatus?.emailConfigured ? 'text-green-400' : 'text-red-400'\n                }`} />\n              </div>\n              <div>\n                <h3 className=\"text-lg font-semibold text-foreground\">Email Service</h3>\n                <p className=\"text-sm text-muted-foreground\">Amazon SES Integration</p>\n              </div>\n            </div>\n            {notificationStatus?.emailConfigured ? (\n              <CheckCircle className=\"w-6 h-6 text-green-400\" />\n            ) : (\n              <XCircle className=\"w-6 h-6 text-red-400\" />\n            )}\n          </div>\n\n          <div className=\"space-y-3\">\n            <div className=\"flex justify-between items-center\">\n              <span className=\"text-muted-foreground\">Status</span>\n              <span className={notificationStatus?.emailConfigured ? 'text-green-400' : 'text-red-400'}>\n                {notificationStatus?.emailConfigured ? 'Connected' : 'Not Configured'}\n              </span>\n            </div>\n            \n            {notificationStatus?.services?.email?.features && (\n              <div>\n                <span className=\"text-muted-foreground\">Features:</span>\n                <div className=\"mt-2 flex flex-wrap gap-2\">\n                  {notificationStatus.services.email.features.map((feature: string, index: number) => (\n                    <Badge key={index} variant=\"secondary\" className=\"text-xs\">\n                      {feature}\n                    </Badge>\n                  ))}\n                </div>\n              </div>\n            )}\n          </div>\n        </GlassCard>\n      </div>\n\n      {/* Service Testing */}\n      <Tabs defaultValue=\"sms\" className=\"w-full\">\n        <TabsList className=\"grid w-full grid-cols-2 glass-card\">\n          <TabsTrigger value=\"sms\">SMS Testing</TabsTrigger>\n          <TabsTrigger value=\"email\">Email Testing</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"sms\" className=\"space-y-4\">\n          <GlassCard className=\"p-6\">\n            <div className=\"flex items-center space-x-3 mb-6\">\n              <Smartphone className=\"w-6 h-6 text-primary\" />\n              <h3 className=\"text-xl font-semibold text-foreground\">Test SMS Service</h3>\n            </div>\n\n            <div className=\"space-y-4\">\n              <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n                <div>\n                  <label className=\"block text-sm font-medium text-foreground mb-2\">\n                    Country Code\n                  </label>\n                  <Select value={testCountryCode} onValueChange={setTestCountryCode}>\n                    <SelectTrigger className=\"form-input\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent className=\"glass-card\">\n                      <SelectItem value=\"+91\">🇮🇳 +91 India</SelectItem>\n                      <SelectItem value=\"+1\">🇺🇸 +1 USA</SelectItem>\n                      <SelectItem value=\"+44\">🇬🇧 +44 UK</SelectItem>\n                      <SelectItem value=\"+971\">🇦🇪 +971 UAE</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n                <div className=\"md:col-span-3\">\n                  <label className=\"block text-sm font-medium text-foreground mb-2\">\n                    Phone Number\n                  </label>\n                  <Input\n                    type=\"tel\"\n                    placeholder=\"9876543210\"\n                    value={testPhoneNumber}\n                    onChange={(e) => setTestPhoneNumber(e.target.value)}\n                    className=\"form-input\"\n                  />\n                </div>\n              </div>\n\n              <Button\n                onClick={handleTestSMS}\n                disabled={sendTestSMSMutation.isPending || !notificationStatus?.twilioConfigured}\n                className=\"neon-button\"\n              >\n                <Send className=\"w-4 h-4 mr-2\" />\n                {sendTestSMSMutation.isPending ? 'Sending...' : 'Send Test OTP'}\n              </Button>\n\n              {!notificationStatus?.twilioConfigured && (\n                <div className=\"p-4 bg-yellow-500/10 border border-yellow-500/20 rounded-lg\">\n                  <div className=\"flex items-center space-x-3\">\n                    <AlertCircle className=\"w-5 h-5 text-yellow-400\" />\n                    <p className=\"text-sm text-yellow-400\">\n                      Twilio credentials not configured. SMS testing is disabled.\n                    </p>\n                  </div>\n                </div>\n              )}\n            </div>\n          </GlassCard>\n        </TabsContent>\n\n        <TabsContent value=\"email\" className=\"space-y-4\">\n          <GlassCard className=\"p-6\">\n            <div className=\"flex items-center space-x-3 mb-6\">\n              <Mail className=\"w-6 h-6 text-primary\" />\n              <h3 className=\"text-xl font-semibold text-foreground\">Test Email Service</h3>\n            </div>\n\n            <div className=\"space-y-4\">\n              <div>\n                <label className=\"block text-sm font-medium text-foreground mb-2\">\n                  Email Address\n                </label>\n                <Input\n                  type=\"email\"\n                  placeholder=\"test@example.com\"\n                  value={testEmail}\n                  onChange={(e) => setTestEmail(e.target.value)}\n                  className=\"form-input\"\n                />\n              </div>\n\n              <div>\n                <label className=\"block text-sm font-medium text-foreground mb-2\">\n                  Test Message (Optional)\n                </label>\n                <Input\n                  type=\"text\"\n                  placeholder={\"Custom test message...\"}\n                  value={testMessage}\n                  onChange={(e) => setTestMessage(e.target.value)}\n                  className=\"form-input\"\n                />\n              </div>\n\n              <Button\n                onClick={handleTestEmail}\n                disabled={sendTestEmailMutation.isPending || !notificationStatus?.emailConfigured}\n                className=\"neon-button\"\n              >\n                <Send className=\"w-4 h-4 mr-2\" />\n                {sendTestEmailMutation.isPending ? 'Sending...' : 'Send Test Email'}\n              </Button>\n\n              {!notificationStatus?.emailConfigured && (\n                <div className=\"p-4 bg-yellow-500/10 border border-yellow-500/20 rounded-lg\">\n                  <div className=\"flex items-center space-x-3\">\n                    <AlertCircle className=\"w-5 h-5 text-yellow-400\" />\n                    <p className=\"text-sm text-yellow-400\">\n                      Amazon SES credentials not configured. Email testing is disabled.\n                    </p>\n                  </div>\n                </div>\n              )}\n            </div>\n          </GlassCard>\n        </TabsContent>\n      </Tabs>\n\n      {/* Configuration Guide */}\n      <GlassCard className=\"p-6\">\n        <div className=\"flex items-center space-x-3 mb-4\">\n          <Settings className=\"w-6 h-6 text-primary\" />\n          <h3 className=\"text-xl font-semibold text-foreground\">Configuration Guide</h3>\n        </div>\n\n        <div className=\"space-y-4\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            <div>\n              <h4 className=\"font-medium text-foreground mb-3\">Twilio SMS Setup:</h4>\n              <ul className=\"text-sm text-muted-foreground space-y-2\">\n                <li>• TWILIO_ACCOUNT_SID - Account identifier</li>\n                <li>• TWILIO_AUTH_TOKEN - Authentication token</li>\n                <li>• TWILIO_PHONE_NUMBER - Your Twilio number</li>\n              </ul>\n            </div>\n            <div>\n              <h4 className=\"font-medium text-foreground mb-3\">Amazon SES Setup:</h4>\n              <ul className=\"text-sm text-muted-foreground space-y-2\">\n                <li>• AWS_ACCESS_KEY_ID - AWS access key</li>\n                <li>• AWS_SECRET_ACCESS_KEY - AWS secret key</li>\n                <li>• AWS_SES_FROM_EMAIL - Verified sender email</li>\n                <li>• AWS_REGION - AWS region (default: us-east-1)</li>\n              </ul>\n            </div>\n          </div>\n          \n          <div className=\"mt-6 p-4 bg-primary/10 border border-primary/20 rounded-lg\">\n            <p className=\"text-sm text-foreground\">\n              <strong>Note:</strong> All notification services work in development mode with console logging. \n              Once you configure the API credentials, real SMS and emails will be sent.\n            </p>\n          </div>\n        </div>\n      </GlassCard>\n    </div>\n  );\n}","size_bytes":15290},"client/src/pages/checkout.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { GlassCard } from \"@/components/ui/glass-card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { RadioGroup, RadioGroupItem } from \"@/components/ui/radio-group\";\nimport { Label } from \"@/components/ui/label\";\nimport { \n  CreditCard, \n  Smartphone, \n  QrCode, \n  Building, \n  ShieldCheck,\n  ArrowLeft,\n  Lock,\n  CheckCircle,\n  Info,\n  Loader2\n} from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\n\ninterface CheckoutItem {\n  id: string;\n  type: 'consultation' | 'course' | 'product';\n  name: string;\n  description?: string;\n  price: number;\n  duration?: number;\n  quantity?: number;\n}\n\nexport default function Checkout() {\n  const [, setLocation] = useLocation();\n  const [paymentMethod, setPaymentMethod] = useState(\"upi_intent\");\n  const [upiId, setUpiId] = useState(\"\");\n  const [isProcessing, setIsProcessing] = useState(false);\n  const { toast } = useToast();\n\n  // Get cart items from localStorage or URL params\n  const [cartItems, setCartItems] = useState<CheckoutItem[]>([]);\n  \n  useEffect(() => {\n    const storedCart = localStorage.getItem(\"cart\");\n    if (storedCart) {\n      setCartItems(JSON.parse(storedCart));\n    } else {\n      // If no cart, redirect to home\n      setLocation(\"/\");\n    }\n  }, [setLocation]);\n\n  const { data: user } = useQuery({\n    queryKey: [\"/api/profile\"],\n    enabled: !!localStorage.getItem(\"token\"),\n  });\n\n  const createPaymentMutation = useMutation({\n    mutationFn: async (paymentData: any) => {\n      return apiRequest(\"POST\", \"/api/payments/phonepe/create\", paymentData);\n    },\n    onSuccess: (data) => {\n      if (data.success && data.paymentUrl) {\n        // Redirect to PhonePe payment page\n        window.location.href = data.paymentUrl;\n      } else {\n        toast({\n          title: \"Payment Error\",\n          description: data.message || \"Failed to initiate payment\",\n          variant: \"destructive\",\n        });\n      }\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Payment Error\",\n        description: error.message || \"Failed to create payment\",\n        variant: \"destructive\",\n      });\n      setIsProcessing(false);\n    },\n  });\n\n  const totalAmount = cartItems.reduce((sum, item) => sum + (item.price * (item.quantity || 1)), 0);\n  const gst = Math.round(totalAmount * 0.18);\n  const finalAmount = totalAmount + gst;\n\n  const handlePayment = async () => {\n    if (!user) {\n      toast({\n        title: \"Authentication Required\",\n        description: \"Please login to continue with payment\",\n        variant: \"destructive\",\n      });\n      setLocation(\"/login\");\n      return;\n    }\n\n    if (paymentMethod === \"upi_collect\" && !upiId) {\n      toast({\n        title: \"UPI ID Required\",\n        description: \"Please enter your UPI ID for UPI Collect payment\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setIsProcessing(true);\n\n    const paymentData = {\n      amount: finalAmount * 100, // Convert to paisa\n      merchantOrderId: `ORDER_${Date.now()}_${user.id}`,\n      merchantUserId: user.id,\n      items: cartItems,\n      paymentMethod,\n      upiId: paymentMethod === \"upi_collect\" ? upiId : undefined,\n      redirectUrl: `${window.location.origin}/payment/success`,\n      callbackUrl: `${window.location.origin}/api/payments/phonepe/callback`,\n    };\n\n    createPaymentMutation.mutate(paymentData);\n  };\n\n  const paymentMethods = [\n    {\n      id: \"upi_intent\",\n      name: \"UPI Apps\",\n      description: \"Pay using PhonePe, Google Pay, Paytm, etc.\",\n      icon: Smartphone,\n      popular: true\n    },\n    {\n      id: \"upi_collect\",\n      name: \"UPI ID\",\n      description: \"Enter your UPI ID to receive payment request\",\n      icon: QrCode,\n      popular: false\n    },\n    {\n      id: \"upi_qr\", \n      name: \"UPI QR Code\",\n      description: \"Scan QR code with any UPI app\",\n      icon: QrCode,\n      popular: false\n    },\n    {\n      id: \"card\",\n      name: \"Debit/Credit Card\",\n      description: \"Visa, Mastercard, RuPay cards accepted\",\n      icon: CreditCard,\n      popular: false\n    },\n    {\n      id: \"netbanking\",\n      name: \"Net Banking\",\n      description: \"Pay directly from your bank account\",\n      icon: Building,\n      popular: false\n    }\n  ];\n\n  if (!user) {\n    return (\n      <div className=\"min-h-screen pt-16 flex items-center justify-center\">\n        <GlassCard className=\"p-8 text-center max-w-md\">\n          <h2 className=\"text-2xl font-bold text-foreground mb-4\">Login Required</h2>\n          <p className=\"text-muted-foreground mb-6\">Please login to proceed with checkout</p>\n          <Button onClick={() => setLocation(\"/login\")} className=\"neon-button\">\n            Login to Continue\n          </Button>\n        </GlassCard>\n      </div>\n    );\n  }\n\n  if (cartItems.length === 0) {\n    return (\n      <div className=\"min-h-screen pt-16 flex items-center justify-center\">\n        <GlassCard className=\"p-8 text-center max-w-md\">\n          <h2 className=\"text-2xl font-bold text-foreground mb-4\">Empty Cart</h2>\n          <p className=\"text-muted-foreground mb-6\">Add items to cart before checkout</p>\n          <Button onClick={() => setLocation(\"/\")} className=\"neon-button\">\n            Continue Shopping\n          </Button>\n        </GlassCard>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen pt-16 pb-16\" data-testid=\"checkout-page\">\n      <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        {/* Header */}\n        <div className=\"flex items-center mb-8\">\n          <Button\n            variant=\"ghost\"\n            onClick={() => setLocation(-1)}\n            className=\"mr-4 text-muted-foreground hover:text-foreground\"\n          >\n            <ArrowLeft className=\"w-4 h-4\" />\n          </Button>\n          <div>\n            <h1 className=\"text-3xl font-bold neon-text text-primary mb-2\">\n              Secure Checkout\n            </h1>\n            <div className=\"flex items-center text-muted-foreground\">\n              <Lock className=\"w-4 h-4 mr-2\" />\n              <span>SSL Encrypted & Secure Payment</span>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n          {/* Order Summary */}\n          <div className=\"lg:col-span-1\">\n            <GlassCard className=\"p-6 sticky top-24\">\n              <h3 className=\"text-xl font-bold text-foreground mb-4\">Order Summary</h3>\n              \n              <div className=\"space-y-4 mb-6\">\n                {cartItems.map((item, index) => (\n                  <div key={index} className=\"flex justify-between items-start\">\n                    <div className=\"flex-1\">\n                      <p className=\"font-medium text-foreground\">{item.name}</p>\n                      {item.description && (\n                        <p className=\"text-sm text-muted-foreground\">{item.description}</p>\n                      )}\n                      {item.duration && (\n                        <p className=\"text-sm text-primary\">{item.duration} minutes</p>\n                      )}\n                      {item.quantity && item.quantity > 1 && (\n                        <p className=\"text-sm text-muted-foreground\">Qty: {item.quantity}</p>\n                      )}\n                    </div>\n                    <div className=\"text-right\">\n                      <p className=\"font-semibold text-foreground\">\n                        ₹{(item.price * (item.quantity || 1)).toLocaleString()}\n                      </p>\n                    </div>\n                  </div>\n                ))}\n              </div>\n\n              <div className=\"border-t border-primary/20 pt-4 space-y-2\">\n                <div className=\"flex justify-between text-muted-foreground\">\n                  <span>Subtotal</span>\n                  <span>₹{totalAmount.toLocaleString()}</span>\n                </div>\n                <div className=\"flex justify-between text-muted-foreground\">\n                  <span>GST (18%)</span>\n                  <span>₹{gst.toLocaleString()}</span>\n                </div>\n                <div className=\"flex justify-between text-lg font-bold text-foreground pt-2 border-t border-primary/20\">\n                  <span>Total</span>\n                  <span>₹{finalAmount.toLocaleString()}</span>\n                </div>\n              </div>\n            </GlassCard>\n          </div>\n\n          {/* Payment Methods */}\n          <div className=\"lg:col-span-2\">\n            <GlassCard className=\"p-6\">\n              <h3 className=\"text-xl font-bold text-foreground mb-6\">Choose Payment Method</h3>\n              \n              <RadioGroup value={paymentMethod} onValueChange={setPaymentMethod} className=\"space-y-4\">\n                {paymentMethods.map((method) => (\n                  <div key={method.id} className=\"relative\">\n                    <div className={`glass p-4 rounded-lg cursor-pointer transition-all ${\n                      paymentMethod === method.id ? 'ring-2 ring-primary' : 'hover:bg-primary/5'\n                    }`}>\n                      <div className=\"flex items-center space-x-4\">\n                        <RadioGroupItem value={method.id} id={method.id} />\n                        <div className=\"flex items-center space-x-3 flex-1\">\n                          <div className=\"w-12 h-12 bg-primary/20 rounded-lg flex items-center justify-center\">\n                            <method.icon className=\"w-6 h-6 text-primary\" />\n                          </div>\n                          <div className=\"flex-1\">\n                            <div className=\"flex items-center space-x-2\">\n                              <Label htmlFor={method.id} className=\"font-medium text-foreground cursor-pointer\">\n                                {method.name}\n                              </Label>\n                              {method.popular && (\n                                <Badge variant=\"secondary\" className=\"text-xs\">Most Popular</Badge>\n                              )}\n                            </div>\n                            <p className=\"text-sm text-muted-foreground\">{method.description}</p>\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n\n                    {/* UPI Collect Input */}\n                    {paymentMethod === \"upi_collect\" && method.id === \"upi_collect\" && (\n                      <div className=\"mt-4 p-4 bg-background/50 rounded-lg\">\n                        <Label htmlFor=\"upiId\" className=\"text-sm font-medium text-foreground\">\n                          Enter UPI ID\n                        </Label>\n                        <Input\n                          id=\"upiId\"\n                          type=\"text\"\n                          placeholder=\"yourname@paytm\"\n                          value={upiId}\n                          onChange={(e) => setUpiId(e.target.value)}\n                          className=\"mt-2 form-input\"\n                        />\n                      </div>\n                    )}\n                  </div>\n                ))}\n              </RadioGroup>\n\n              {/* Security Notice */}\n              <div className=\"mt-6 p-4 bg-green-500/10 border border-green-500/20 rounded-lg\">\n                <div className=\"flex items-start space-x-3\">\n                  <ShieldCheck className=\"w-5 h-5 text-green-400 mt-0.5\" />\n                  <div>\n                    <p className=\"text-sm font-medium text-green-400\">100% Secure Payment</p>\n                    <p className=\"text-xs text-muted-foreground mt-1\">\n                      Your payment is protected by 256-bit SSL encryption and processed through PhonePe's secure gateway.\n                    </p>\n                  </div>\n                </div>\n              </div>\n\n              {/* Pay Button */}\n              <Button\n                onClick={handlePayment}\n                disabled={isProcessing}\n                className=\"w-full mt-6 neon-button text-lg py-6\"\n                data-testid=\"pay-button\"\n              >\n                {isProcessing ? (\n                  <>\n                    <Loader2 className=\"w-5 h-5 mr-2 animate-spin\" />\n                    Processing Payment...\n                  </>\n                ) : (\n                  <>\n                    <Lock className=\"w-5 h-5 mr-2\" />\n                    Pay ₹{finalAmount.toLocaleString()}\n                  </>\n                )}\n              </Button>\n\n              {/* Terms */}\n              <p className=\"text-xs text-muted-foreground text-center mt-4\">\n                By proceeding with payment, you agree to our{\" \"}\n                <span className=\"text-primary cursor-pointer\">Terms & Conditions</span> and{\" \"}\n                <span className=\"text-primary cursor-pointer\">Privacy Policy</span>\n              </p>\n            </GlassCard>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":13222},"client/src/pages/mobile-login.tsx":{"content":"import { useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { GlassCard } from \"@/components/ui/glass-card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { \n  Smartphone, \n  MessageSquare, \n  Shield, \n  ArrowLeft,\n  CheckCircle,\n  Loader2,\n  Timer,\n  User,\n  Calendar,\n  MapPin\n} from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\n\nexport default function MobileLogin() {\n  const [, setLocation] = useLocation();\n  const [step, setStep] = useState<'phone' | 'otp' | 'details'>('phone');\n  const [selectedTab, setSelectedTab] = useState('login');\n  const [phoneNumber, setPhoneNumber] = useState(\"\");\n  const [countryCode, setCountryCode] = useState(\"+91\");\n  const [otp, setOtp] = useState(\"\");\n  const [otpTimer, setOtpTimer] = useState(0);\n  const [userDetails, setUserDetails] = useState({\n    fullName: \"\",\n    email: \"\",\n    dateOfBirth: \"\",\n    placeOfBirth: \"\",\n    timeOfBirth: \"\",\n    username: \"\"\n  });\n  const { toast } = useToast();\n\n  const sendOtpMutation = useMutation({\n    mutationFn: async ({ phone, code, purpose }: { phone: string; code: string; purpose: string }) => {\n      return apiRequest(\"POST\", \"/api/auth/send-otp\", {\n        phoneNumber: phone,\n        countryCode: code,\n        purpose\n      });\n    },\n    onSuccess: (data) => {\n      setStep('otp');\n      setOtpTimer(600); // 10 minutes\n      startTimer();\n      toast({\n        title: \"OTP Sent\",\n        description: `Verification code sent to ${countryCode} ${phoneNumber}`,\n      });\n      // Show OTP in development\n      if (data.otp) {\n        toast({\n          title: \"Development Mode\",\n          description: `Your OTP is: ${data.otp}`,\n          duration: 10000,\n        });\n      }\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Failed to Send OTP\",\n        description: error.message || \"Please try again\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const verifyOtpMutation = useMutation({\n    mutationFn: async (data: any) => {\n      return apiRequest(\"POST\", \"/api/auth/verify-otp\", data);\n    },\n    onSuccess: (data) => {\n      localStorage.setItem(\"token\", data.token);\n      toast({\n        title: \"Success!\",\n        description: \"You have been successfully logged in\",\n      });\n      setLocation(\"/\");\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Verification Failed\",\n        description: error.message || \"Invalid OTP. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const startTimer = () => {\n    const interval = setInterval(() => {\n      setOtpTimer((prev) => {\n        if (prev <= 1) {\n          clearInterval(interval);\n          return 0;\n        }\n        return prev - 1;\n      });\n    }, 1000);\n  };\n\n  const formatTimer = (seconds: number) => {\n    const minutes = Math.floor(seconds / 60);\n    const remainingSeconds = seconds % 60;\n    return `${minutes}:${remainingSeconds.toString().padStart(2, '0')}`;\n  };\n\n  const handleSendOtp = () => {\n    if (!phoneNumber || phoneNumber.length < 10) {\n      toast({\n        title: \"Invalid Phone Number\",\n        description: \"Please enter a valid 10-digit mobile number\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    sendOtpMutation.mutate({\n      phone: phoneNumber,\n      code: countryCode,\n      purpose: selectedTab\n    });\n  };\n\n  const handleVerifyOtp = () => {\n    if (!otp || otp.length !== 6) {\n      toast({\n        title: \"Invalid OTP\",\n        description: \"Please enter the complete 6-digit OTP\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (selectedTab === 'registration') {\n      setStep('details');\n    } else {\n      verifyOtpMutation.mutate({\n        phoneNumber,\n        countryCode,\n        otp,\n        purpose: selectedTab\n      });\n    }\n  };\n\n  const handleCompleteRegistration = () => {\n    if (!userDetails.fullName || !userDetails.email || !userDetails.username) {\n      toast({\n        title: \"Missing Information\",\n        description: \"Please fill in all required fields\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    verifyOtpMutation.mutate({\n      phoneNumber,\n      countryCode,\n      otp,\n      purpose: 'registration',\n      userData: userDetails\n    });\n  };\n\n  const countries = [\n    { code: \"+91\", name: \"India\", flag: \"🇮🇳\" },\n    { code: \"+1\", name: \"USA\", flag: \"🇺🇸\" },\n    { code: \"+44\", name: \"UK\", flag: \"🇬🇧\" },\n    { code: \"+971\", name: \"UAE\", flag: \"🇦🇪\" },\n    { code: \"+65\", name: \"Singapore\", flag: \"🇸🇬\" },\n    { code: \"+61\", name: \"Australia\", flag: \"🇦🇺\" },\n    { code: \"+49\", name: \"Germany\", flag: \"🇩🇪\" },\n  ];\n\n  return (\n    <div className=\"min-h-screen pt-16 pb-16\" data-testid=\"mobile-login\">\n      <div className=\"max-w-md mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        {/* Header */}\n        <div className=\"text-center mb-8\">\n          <Button\n            variant=\"ghost\"\n            onClick={() => step === 'phone' ? setLocation(\"/\") : setStep('phone')}\n            className=\"absolute left-4 top-20 text-muted-foreground hover:text-foreground\"\n          >\n            <ArrowLeft className=\"w-4 h-4\" />\n          </Button>\n          \n          <div className=\"w-16 h-16 bg-gradient-to-br from-primary to-secondary rounded-full flex items-center justify-center mx-auto mb-4\">\n            <Smartphone className=\"w-8 h-8 text-white\" />\n          </div>\n          <h1 className=\"text-2xl font-bold neon-text text-primary mb-2\">\n            \"Mobile Verification\"\n          </h1>\n          <p className=\"text-muted-foreground\">\n            \"Secure login with OTP verification\"\n          </p>\n        </div>\n\n        <GlassCard className=\"p-6\">\n          {step === 'phone' && (\n            <>\n              <Tabs value={selectedTab} onValueChange={setSelectedTab} className=\"mb-6\">\n                <TabsList className=\"grid w-full grid-cols-2 glass-card\">\n                  <TabsTrigger value=\"login\">\"Login\"</TabsTrigger>\n                  <TabsTrigger value=\"registration\">\"Sign Up\"</TabsTrigger>\n                </TabsList>\n              </Tabs>\n\n              <div className=\"space-y-4\">\n                <div>\n                  <label className=\"block text-sm font-medium text-foreground mb-2\">\n                    \"Country\"\n                  </label>\n                  <Select value={countryCode} onValueChange={setCountryCode}>\n                    <SelectTrigger className=\"form-input\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent className=\"glass-card\">\n                      {countries.map((country) => (\n                        <SelectItem key={country.code} value={country.code}>\n                          <div className=\"flex items-center space-x-2\">\n                            <span>{country.flag}</span>\n                            <span>{country.name}</span>\n                            <span className=\"text-muted-foreground\">{country.code}</span>\n                          </div>\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div>\n                  <label className=\"block text-sm font-medium text-foreground mb-2\">\n                    Mobile Number\n                  </label>\n                  <div className=\"flex\">\n                    <div className=\"px-3 py-2 bg-background/50 border border-primary/20 rounded-l-lg text-muted-foreground\">\n                      {countryCode}\n                    </div>\n                    <Input\n                      type=\"tel\"\n                      placeholder=\"9876543210\"\n                      value={phoneNumber}\n                      onChange={(e) => setPhoneNumber(e.target.value)}\n                      className=\"rounded-l-none form-input\"\n                      maxLength={10}\n                      data-testid=\"phone-input\"\n                    />\n                  </div>\n                </div>\n\n                <Button\n                  onClick={handleSendOtp}\n                  disabled={sendOtpMutation.isPending}\n                  className=\"w-full neon-button\"\n                  data-testid=\"send-otp-button\"\n                >\n                  {sendOtpMutation.isPending ? (\n                    <>\n                      <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" />\n                      Sending OTP...\n                    </>\n                  ) : (\n                    <>\n                      <MessageSquare className=\"w-4 h-4 mr-2\" />\n                      Send OTP\n                    </>\n                  )}\n                </Button>\n              </div>\n            </>\n          )}\n\n          {step === 'otp' && (\n            <div className=\"space-y-4\">\n              <div className=\"text-center mb-6\">\n                <div className=\"w-16 h-16 bg-green-500/20 rounded-full flex items-center justify-center mx-auto mb-3\">\n                  <MessageSquare className=\"w-8 h-8 text-green-400\" />\n                </div>\n                <h3 className=\"text-lg font-semibold text-foreground mb-2\">\n                  Enter Verification Code\n                </h3>\n                <p className=\"text-sm text-muted-foreground\">\n                  We've sent a 6-digit code to<br />\n                  <strong>{countryCode} {phoneNumber}</strong>\n                </p>\n              </div>\n\n              <div>\n                <label className=\"block text-sm font-medium text-foreground mb-2\">\n                  6-Digit OTP\n                </label>\n                <Input\n                  type=\"text\"\n                  placeholder=\"123456\"\n                  value={otp}\n                  onChange={(e) => setOtp(e.target.value)}\n                  className=\"form-input text-center text-2xl tracking-widest\"\n                  maxLength={6}\n                  data-testid=\"otp-input\"\n                />\n              </div>\n\n              {otpTimer > 0 && (\n                <div className=\"flex items-center justify-center text-muted-foreground\">\n                  <Timer className=\"w-4 h-4 mr-2\" />\n                  <span className=\"text-sm\">Resend OTP in {formatTimer(otpTimer)}</span>\n                </div>\n              )}\n\n              <Button\n                onClick={handleVerifyOtp}\n                disabled={verifyOtpMutation.isPending}\n                className=\"w-full neon-button\"\n                data-testid=\"verify-otp-button\"\n              >\n                {verifyOtpMutation.isPending ? (\n                  <>\n                    <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" />\n                    Verifying...\n                  </>\n                ) : (\n                  <>\n                    <CheckCircle className=\"w-4 h-4 mr-2\" />\n                    Verify OTP\n                  </>\n                )}\n              </Button>\n\n              {otpTimer === 0 && (\n                <Button\n                  variant=\"outline\"\n                  onClick={handleSendOtp}\n                  disabled={sendOtpMutation.isPending}\n                  className=\"w-full glass\"\n                >\n                  Resend OTP\n                </Button>\n              )}\n            </div>\n          )}\n\n          {step === 'details' && (\n            <div className=\"space-y-4\">\n              <div className=\"text-center mb-6\">\n                <div className=\"w-16 h-16 bg-primary/20 rounded-full flex items-center justify-center mx-auto mb-3\">\n                  <User className=\"w-8 h-8 text-primary\" />\n                </div>\n                <h3 className=\"text-lg font-semibold text-foreground mb-2\">\n                  Complete Your Profile\n                </h3>\n                <p className=\"text-sm text-muted-foreground\">\n                  Help us serve you better with accurate astrological guidance\n                </p>\n              </div>\n\n              <div>\n                <label className=\"block text-sm font-medium text-foreground mb-2\">\n                  Full Name *\n                </label>\n                <Input\n                  placeholder={\"Your full name\"}\n                  value={userDetails.fullName}\n                  onChange={(e) => setUserDetails({...userDetails, fullName: e.target.value})}\n                  className=\"form-input\"\n                  data-testid=\"fullname-input\"\n                />\n              </div>\n\n              <div>\n                <label className=\"block text-sm font-medium text-foreground mb-2\">\n                  Username *\n                </label>\n                <Input\n                  placeholder={\"Choose a unique username\"}\n                  value={userDetails.username}\n                  onChange={(e) => setUserDetails({...userDetails, username: e.target.value})}\n                  className=\"form-input\"\n                  data-testid=\"username-input\"\n                />\n              </div>\n\n              <div>\n                <label className=\"block text-sm font-medium text-foreground mb-2\">\n                  Email *\n                </label>\n                <Input\n                  type=\"email\"\n                  placeholder=\"your.email@example.com\"\n                  value={userDetails.email}\n                  onChange={(e) => setUserDetails({...userDetails, email: e.target.value})}\n                  className=\"form-input\"\n                  data-testid=\"email-input\"\n                />\n              </div>\n\n              <div>\n                <label className=\"block text-sm font-medium text-foreground mb-2\">\n                  Date of Birth\n                </label>\n                <Input\n                  type=\"date\"\n                  value={userDetails.dateOfBirth}\n                  onChange={(e) => setUserDetails({...userDetails, dateOfBirth: e.target.value})}\n                  className=\"form-input\"\n                />\n              </div>\n\n              <div>\n                <label className=\"block text-sm font-medium text-foreground mb-2\">\n                  Time of Birth\n                </label>\n                <Input\n                  type=\"time\"\n                  value={userDetails.timeOfBirth}\n                  onChange={(e) => setUserDetails({...userDetails, timeOfBirth: e.target.value})}\n                  className=\"form-input\"\n                />\n              </div>\n\n              <div>\n                <label className=\"block text-sm font-medium text-foreground mb-2\">\n                  Place of Birth\n                </label>\n                <Input\n                  placeholder=\"City, State, Country\"\n                  value={userDetails.placeOfBirth}\n                  onChange={(e) => setUserDetails({...userDetails, placeOfBirth: e.target.value})}\n                  className=\"form-input\"\n                />\n              </div>\n\n              <Button\n                onClick={handleCompleteRegistration}\n                disabled={verifyOtpMutation.isPending}\n                className=\"w-full neon-button\"\n                data-testid=\"complete-registration-button\"\n              >\n                {verifyOtpMutation.isPending ? (\n                  <>\n                    <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" />\n                    Creating Account...\n                  </>\n                ) : (\n                  <>\n                    <CheckCircle className=\"w-4 h-4 mr-2\" />\n                    Complete Registration\n                  </>\n                )}\n              </Button>\n            </div>\n          )}\n\n          {/* Security Notice */}\n          <div className=\"mt-6 p-4 bg-primary/10 border border-primary/20 rounded-lg\">\n            <div className=\"flex items-start space-x-3\">\n              <Shield className=\"w-5 h-5 text-primary mt-0.5\" />\n              <div>\n                <p className=\"text-sm font-medium text-primary\">Secure & Private</p>\n                <p className=\"text-xs text-muted-foreground mt-1\">\n                  Your mobile number is encrypted and never shared with third parties.\n                  OTP verification ensures the highest security for your account.\n                </p>\n              </div>\n            </div>\n          </div>\n        </GlassCard>\n      </div>\n    </div>\n  );\n}","size_bytes":16513},"client/src/pages/payment/failed.tsx":{"content":"import { useEffect, useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { GlassCard } from \"@/components/ui/glass-card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { \n  XCircle, \n  RefreshCw, \n  Home, \n  MessageCircle,\n  AlertTriangle,\n  CreditCard,\n  HelpCircle\n} from \"lucide-react\";\n\n\nexport default function PaymentFailed() {\n  const [, setLocation] = useLocation();\n  const [errorDetails, setErrorDetails] = useState<any>(null);\n\n  useEffect(() => {\n    // Get error details from URL params or localStorage\n    const urlParams = new URLSearchParams(window.location.search);\n    const error = urlParams.get('error');\n    const message = urlParams.get('message');\n    \n    if (error || message) {\n      setErrorDetails({\n        error: error || 'PAYMENT_FAILED',\n        message: message || 'Payment could not be processed'\n      });\n    }\n  }, []);\n\n  const commonReasons = [\n    {\n      title: \"Insufficient Balance\",\n      description: \"Your account doesn't have enough balance\",\n      icon: CreditCard,\n      solution: \"Add money to your UPI account or use a different payment method\"\n    },\n    {\n      title: \"Network Issues\",\n      description: \"Poor internet connection during payment\",\n      icon: RefreshCw,\n      solution: \"Check your internet connection and try again\"\n    },\n    {\n      title: \"Bank Server Issues\",\n      description: \"Your bank's server was temporarily unavailable\",\n      icon: AlertTriangle,\n      solution: \"Wait a few minutes and retry the payment\"\n    },\n    {\n      title: \"Incorrect UPI PIN\",\n      description: \"Wrong UPI PIN entered multiple times\",\n      icon: XCircle,\n      solution: \"Double-check your UPI PIN and try again\"\n    }\n  ];\n\n  const handleRetryPayment = () => {\n    // Redirect back to checkout\n    setLocation(\"/checkout\");\n  };\n\n  return (\n    <div className=\"min-h-screen pt-16 pb-16\" data-testid=\"payment-failed\">\n      <div className=\"max-w-2xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        {/* Failed Animation */}\n        <div className=\"text-center mb-8\">\n          <div className=\"w-24 h-24 bg-red-500 rounded-full flex items-center justify-center mx-auto mb-6 animate-pulse\">\n            <XCircle className=\"w-12 h-12 text-white\" />\n          </div>\n          <h1 className=\"text-3xl font-bold text-red-400 mb-2\">\n            \"Payment Failed\"\n          </h1>\n          <p className=\"text-muted-foreground\">\n            \"Your payment could not be processed. Don't worry, no money was deducted.\"\n          </p>\n        </div>\n\n        {/* Error Details */}\n        {errorDetails && (\n          <GlassCard className=\"p-6 mb-6\">\n            <div className=\"flex items-center justify-between mb-4\">\n              <h3 className=\"text-lg font-semibold text-foreground\">\"Error Details\"</h3>\n              <Badge variant=\"destructive\">\n                <XCircle className=\"w-3 h-3 mr-1\" />\n                \"Failed\"\n              </Badge>\n            </div>\n\n            <div className=\"space-y-3\">\n              <div className=\"flex justify-between items-center\">\n                <span className=\"text-muted-foreground\">Error Code</span>\n                <span className=\"font-mono text-sm text-foreground\">{errorDetails.error}</span>\n              </div>\n              \n              <div className=\"flex justify-between items-start\">\n                <span className=\"text-muted-foreground\">Reason</span>\n                <span className=\"text-foreground text-right max-w-xs\">{errorDetails.message}</span>\n              </div>\n              \n              <div className=\"flex justify-between items-center\">\n                <span className=\"text-muted-foreground\">Time</span>\n                <span className=\"text-foreground\">\n                  {new Date().toLocaleDateString('en-IN', {\n                    day: 'numeric',\n                    month: 'short',\n                    year: 'numeric',\n                    hour: '2-digit',\n                    minute: '2-digit'\n                  })}\n                </span>\n              </div>\n            </div>\n          </GlassCard>\n        )}\n\n        {/* Common Reasons */}\n        <GlassCard className=\"p-6 mb-6\">\n          <h3 className=\"text-lg font-semibold text-foreground mb-4\">Common Reasons & Solutions</h3>\n          <div className=\"space-y-4\">\n            {commonReasons.map((reason, index) => (\n              <div key={index} className=\"flex items-start space-x-3 p-3 glass rounded-lg\">\n                <div className=\"w-10 h-10 bg-primary/20 rounded-lg flex items-center justify-center flex-shrink-0\">\n                  <reason.icon className=\"w-5 h-5 text-primary\" />\n                </div>\n                <div className=\"flex-1\">\n                  <h4 className=\"font-medium text-foreground mb-1\">{reason.title}</h4>\n                  <p className=\"text-sm text-muted-foreground mb-2\">{reason.description}</p>\n                  <p className=\"text-xs text-primary\">{reason.solution}</p>\n                </div>\n              </div>\n            ))}\n          </div>\n        </GlassCard>\n\n        {/* Quick Actions */}\n        <GlassCard className=\"p-6 mb-6\">\n          <h3 className=\"text-lg font-semibold text-foreground mb-4\">Quick Actions</h3>\n          <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-4\">\n            <Button\n              onClick={handleRetryPayment}\n              className=\"neon-button\"\n              data-testid=\"retry-payment-button\"\n            >\n              <RefreshCw className=\"w-4 h-4 mr-2\" />\n              Retry Payment\n            </Button>\n            \n            <Button\n              onClick={() => setLocation(\"/\")}\n              variant=\"outline\"\n              className=\"glass\"\n              data-testid=\"back-to-home-button\"\n            >\n              <Home className=\"w-4 h-4 mr-2\" />\n              Back to Home\n            </Button>\n          </div>\n        </GlassCard>\n\n        {/* Payment Tips */}\n        <GlassCard className=\"p-6 mb-6\">\n          <h3 className=\"text-lg font-semibold text-foreground mb-4\">Payment Tips</h3>\n          <div className=\"space-y-3\">\n            <div className=\"flex items-center text-muted-foreground\">\n              <HelpCircle className=\"w-4 h-4 text-primary mr-3 flex-shrink-0\" />\n              <span className=\"text-sm\">Ensure stable internet connection during payment</span>\n            </div>\n            <div className=\"flex items-center text-muted-foreground\">\n              <HelpCircle className=\"w-4 h-4 text-primary mr-3 flex-shrink-0\" />\n              <span className=\"text-sm\">Check your UPI app balance before making payment</span>\n            </div>\n            <div className=\"flex items-center text-muted-foreground\">\n              <HelpCircle className=\"w-4 h-4 text-primary mr-3 flex-shrink-0\" />\n              <span className=\"text-sm\">Try using a different UPI app if payment keeps failing</span>\n            </div>\n            <div className=\"flex items-center text-muted-foreground\">\n              <HelpCircle className=\"w-4 h-4 text-primary mr-3 flex-shrink-0\" />\n              <span className=\"text-sm\">Contact your bank if the issue persists</span>\n            </div>\n          </div>\n        </GlassCard>\n\n        {/* Alternative Payment Methods */}\n        <GlassCard className=\"p-6 mb-6\">\n          <h3 className=\"text-lg font-semibold text-foreground mb-4\">Try Alternative Methods</h3>\n          <p className=\"text-muted-foreground text-sm mb-4\">\n            If UPI payment is not working, you can try these alternatives:\n          </p>\n          <div className=\"grid grid-cols-1 sm:grid-cols-3 gap-3\">\n            <div className=\"text-center p-3 glass rounded-lg\">\n              <CreditCard className=\"w-6 h-6 text-primary mx-auto mb-2\" />\n              <p className=\"text-sm text-foreground font-medium\">Debit/Credit Card</p>\n            </div>\n            <div className=\"text-center p-3 glass rounded-lg\">\n              <CreditCard className=\"w-6 h-6 text-primary mx-auto mb-2\" />\n              <p className=\"text-sm text-foreground font-medium\">Net Banking</p>\n            </div>\n            <div className=\"text-center p-3 glass rounded-lg\">\n              <CreditCard className=\"w-6 h-6 text-primary mx-auto mb-2\" />\n              <p className=\"text-sm text-foreground font-medium\">UPI QR Code</p>\n            </div>\n          </div>\n        </GlassCard>\n\n        {/* Support Contact */}\n        <div className=\"text-center\">\n          <div className=\"p-6 bg-primary/10 rounded-lg\">\n            <MessageCircle className=\"w-8 h-8 text-primary mx-auto mb-3\" />\n            <h3 className=\"font-semibold text-foreground mb-2\">Need Help?</h3>\n            <p className=\"text-sm text-muted-foreground mb-4\">\n              Our support team is available 24/7 to assist you\n            </p>\n            <div className=\"flex flex-col sm:flex-row gap-3 justify-center\">\n              <Button size=\"sm\" variant=\"outline\" className=\"glass\">\n                <MessageCircle className=\"w-4 h-4 mr-2\" />\n                Live Chat\n              </Button>\n              <Button size=\"sm\" variant=\"outline\" className=\"glass\">\n                Email: support@jaiguruastroremedy.com\n              </Button>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":9279},"client/src/pages/payment/success.tsx":{"content":"import { useEffect, useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { GlassCard } from \"@/components/ui/glass-card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { \n  CheckCircle, \n  Download, \n  Calendar, \n  ArrowRight, \n  Home,\n  Receipt,\n  Share2,\n  Clock\n} from \"lucide-react\";\n\n\nexport default function PaymentSuccess() {\n  const [, setLocation] = useLocation();\n  const [transactionId, setTransactionId] = useState<string>(\"\");\n  const [orderDetails, setOrderDetails] = useState<any>(null);\n\n  // Get transaction ID from URL params\n  useEffect(() => {\n    const urlParams = new URLSearchParams(window.location.search);\n    const txnId = urlParams.get('transactionId') || urlParams.get('merchantTransactionId');\n    if (txnId) {\n      setTransactionId(txnId);\n    }\n    \n    // Clear cart after successful payment\n    localStorage.removeItem('cart');\n  }, []);\n\n  const { data: paymentDetails, isLoading } = useQuery({\n    queryKey: [\"/api/payments/details\", transactionId],\n    enabled: !!transactionId,\n  });\n\n  useEffect(() => {\n    if (paymentDetails) {\n      setOrderDetails(paymentDetails);\n    }\n  }, [paymentDetails]);\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen pt-16 flex items-center justify-center\">\n        <div className=\"animate-spin w-8 h-8 border-4 border-primary border-t-transparent rounded-full\" />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen pt-16 pb-16\" data-testid=\"payment-success\">\n      <div className=\"max-w-2xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        {/* Success Animation */}\n        <div className=\"text-center mb-8\">\n          <div className=\"w-24 h-24 bg-green-500 rounded-full flex items-center justify-center mx-auto mb-6 animate-pulse\">\n            <CheckCircle className=\"w-12 h-12 text-white\" />\n          </div>\n          <h1 className=\"text-3xl font-bold neon-text text-primary mb-2\">\n            \"Payment Successful!\"\n          </h1>\n          <p className=\"text-muted-foreground\">\n            \"Thank you for your payment. Your order has been confirmed.\"\n          </p>\n        </div>\n\n        {/* Payment Details */}\n        <GlassCard className=\"p-6 mb-6\">\n          <div className=\"flex items-center justify-between mb-4\">\n            <h3 className=\"text-lg font-semibold text-foreground\">\"Payment Details\"</h3>\n            <Badge variant=\"default\" className=\"bg-green-500\">\n              <CheckCircle className=\"w-3 h-3 mr-1\" />\n              \"Completed\"\n            </Badge>\n          </div>\n\n          <div className=\"space-y-4\">\n            <div className=\"flex justify-between items-center\">\n              <span className=\"text-muted-foreground\">Transaction ID</span>\n              <span className=\"font-mono text-sm text-foreground\">{transactionId}</span>\n            </div>\n            \n            <div className=\"flex justify-between items-center\">\n              <span className=\"text-muted-foreground\">Payment Method</span>\n              <span className=\"text-foreground\">PhonePe UPI</span>\n            </div>\n            \n            <div className=\"flex justify-between items-center\">\n              <span className=\"text-muted-foreground\">Amount Paid</span>\n              <span className=\"text-lg font-semibold text-primary\">\n                ₹{orderDetails?.totalAmount?.toLocaleString() || '0'}\n              </span>\n            </div>\n            \n            <div className=\"flex justify-between items-center\">\n              <span className=\"text-muted-foreground\">Payment Date</span>\n              <span className=\"text-foreground\">\n                {new Date().toLocaleDateString('en-IN', {\n                  day: 'numeric',\n                  month: 'short',\n                  year: 'numeric',\n                  hour: '2-digit',\n                  minute: '2-digit'\n                })}\n              </span>\n            </div>\n          </div>\n        </GlassCard>\n\n        {/* Order Summary */}\n        {orderDetails?.items && (\n          <GlassCard className=\"p-6 mb-6\">\n            <h3 className=\"text-lg font-semibold text-foreground mb-4\">Order Summary</h3>\n            <div className=\"space-y-3\">\n              {orderDetails.items.map((item: any, index: number) => (\n                <div key={index} className=\"flex justify-between items-start\">\n                  <div className=\"flex-1\">\n                    <p className=\"font-medium text-foreground\">{item.name}</p>\n                    {item.description && (\n                      <p className=\"text-sm text-muted-foreground\">{item.description}</p>\n                    )}\n                    {item.duration && (\n                      <div className=\"flex items-center text-sm text-primary mt-1\">\n                        <Clock className=\"w-3 h-3 mr-1\" />\n                        {item.duration} minutes\n                      </div>\n                    )}\n                  </div>\n                  <div className=\"text-right\">\n                    <p className=\"font-semibold text-foreground\">\n                      ₹{(item.price * (item.quantity || 1)).toLocaleString()}\n                    </p>\n                    {item.quantity && item.quantity > 1 && (\n                      <p className=\"text-sm text-muted-foreground\">Qty: {item.quantity}</p>\n                    )}\n                  </div>\n                </div>\n              ))}\n            </div>\n          </GlassCard>\n        )}\n\n        {/* Next Steps */}\n        <GlassCard className=\"p-6 mb-6\">\n          <h3 className=\"text-lg font-semibold text-foreground mb-4\">What's Next?</h3>\n          <div className=\"space-y-3\">\n            <div className=\"flex items-center text-muted-foreground\">\n              <CheckCircle className=\"w-4 h-4 text-green-500 mr-3\" />\n              <span>Payment confirmation sent to your email</span>\n            </div>\n            <div className=\"flex items-center text-muted-foreground\">\n              <CheckCircle className=\"w-4 h-4 text-green-500 mr-3\" />\n              <span>Order details updated in your account</span>\n            </div>\n            {orderDetails?.items?.some((item: any) => item.type === 'consultation') && (\n              <div className=\"flex items-center text-muted-foreground\">\n                <Calendar className=\"w-4 h-4 text-primary mr-3\" />\n                <span>Consultation will be scheduled shortly</span>\n              </div>\n            )}\n            {orderDetails?.items?.some((item: any) => item.type === 'course') && (\n              <div className=\"flex items-center text-muted-foreground\">\n                <Download className=\"w-4 h-4 text-primary mr-3\" />\n                <span>Course access will be activated within 24 hours</span>\n              </div>\n            )}\n          </div>\n        </GlassCard>\n\n        {/* Action Buttons */}\n        <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-4\">\n          <Button\n            onClick={() => setLocation(\"/dashboard\")}\n            className=\"neon-button\"\n            data-testid=\"view-orders-button\"\n          >\n            <Receipt className=\"w-4 h-4 mr-2\" />\n            View My Orders\n          </Button>\n          \n          <Button\n            onClick={() => setLocation(\"/\")}\n            variant=\"outline\"\n            className=\"glass\"\n            data-testid=\"continue-shopping-button\"\n          >\n            <Home className=\"w-4 h-4 mr-2\" />\n            Continue Shopping\n          </Button>\n        </div>\n\n        {/* Share Success */}\n        <div className=\"text-center mt-8\">\n          <p className=\"text-sm text-muted-foreground mb-4\">\n            Share your experience with Jai Guru Astro Remedy\n          </p>\n          <div className=\"flex justify-center space-x-4\">\n            <Button size=\"sm\" variant=\"ghost\" className=\"text-primary\">\n              <Share2 className=\"w-4 h-4 mr-1\" />\n              Share\n            </Button>\n          </div>\n        </div>\n\n        {/* Support Info */}\n        <div className=\"text-center mt-8 p-4 bg-primary/10 rounded-lg\">\n          <p className=\"text-sm text-muted-foreground\">\n            Need help? Contact our support team at{\" \"}\n            <span className=\"text-primary\">support@jaiguruastroremedy.com</span>\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":8333},"server/email-service.ts":{"content":"import { SES } from '@aws-sdk/client-ses';\n\nexport class EmailService {\n  private ses: SES | null = null;\n  private fromEmail: string;\n  private fromName: string;\n\n  constructor() {\n    const accessKeyId = process.env.AWS_ACCESS_KEY_ID;\n    const secretAccessKey = process.env.AWS_SECRET_ACCESS_KEY;\n    const region = process.env.AWS_REGION || 'us-east-1';\n    \n    this.fromEmail = process.env.AWS_SES_FROM_EMAIL || 'noreply@jaiguruastroremedy.com';\n    this.fromName = process.env.AWS_SES_FROM_NAME || 'Jai Guru Astro Remedy';\n\n    if (accessKeyId && secretAccessKey) {\n      this.ses = new SES({\n        region,\n        credentials: {\n          accessKeyId,\n          secretAccessKey\n        }\n      });\n    } else {\n      console.warn('AWS SES credentials not found. Email functionality will be disabled.');\n    }\n  }\n\n  async sendEmail(params: {\n    to: string;\n    subject: string;\n    htmlBody: string;\n    textBody?: string;\n  }): Promise<{ success: boolean; messageId?: string; error?: string }> {\n    if (!this.ses) {\n      console.log(`Email would be sent to ${params.to}: ${params.subject}`);\n      console.log('Body:', params.htmlBody);\n      return { \n        success: true, \n        messageId: 'dev-mode-' + Date.now(),\n        error: 'Development mode - Email not actually sent'\n      };\n    }\n\n    try {\n      const command = {\n        Source: `${this.fromName} <${this.fromEmail}>`,\n        Destination: {\n          ToAddresses: [params.to]\n        },\n        Message: {\n          Subject: {\n            Data: params.subject,\n            Charset: 'UTF-8'\n          },\n          Body: {\n            Html: {\n              Data: params.htmlBody,\n              Charset: 'UTF-8'\n            },\n            Text: params.textBody ? {\n              Data: params.textBody,\n              Charset: 'UTF-8'\n            } : undefined\n          }\n        }\n      };\n\n      const result = await this.ses.sendEmail(command);\n      \n      return {\n        success: true,\n        messageId: result.MessageId\n      };\n    } catch (error: any) {\n      console.error('AWS SES email error:', error);\n      return {\n        success: false,\n        error: error.message || 'Failed to send email'\n      };\n    }\n  }\n\n  async sendWelcomeEmail(email: string, fullName: string): Promise<{ success: boolean; messageId?: string; error?: string }> {\n    const htmlBody = `\n    <!DOCTYPE html>\n    <html>\n    <head>\n        <style>\n            .container { max-width: 600px; margin: 0 auto; font-family: Arial, sans-serif; }\n            .header { background: linear-gradient(135deg, #ff6b35, #f7931e); padding: 30px; text-align: center; color: white; }\n            .content { padding: 30px; background: #ffffff; }\n            .footer { padding: 20px; background: #f8f9fa; text-align: center; color: #666; }\n            .neon-text { color: #ff6b35; font-weight: bold; }\n        </style>\n    </head>\n    <body>\n        <div class=\"container\">\n            <div class=\"header\">\n                <h1>🌟 Welcome to Jai Guru Astro Remedy!</h1>\n            </div>\n            <div class=\"content\">\n                <h2>Namaste ${fullName}!</h2>\n                <p>Thank you for joining our astrological family. We're excited to guide you on your spiritual journey.</p>\n                \n                <h3>What's Available for You:</h3>\n                <ul>\n                    <li>🔮 <strong>Personal Consultations</strong> - Video, Audio, Chat & In-Person</li>\n                    <li>📚 <strong>Astrology Courses</strong> - Learn from Expert Astrologer Arup Shastri</li>\n                    <li>🏡 <strong>Home Tuition</strong> - One-to-one and Group Learning</li>\n                    <li>🛍️ <strong>Remedial Products</strong> - Gemstones, Yantras, Books & More</li>\n                </ul>\n                \n                <p>Your account is now active and ready to use. Start your journey by booking your first consultation.</p>\n                \n                <div style=\"text-align: center; margin: 30px 0;\">\n                    <a href=\"${process.env.FRONTEND_URL || 'https://jaiguruastroremedy.com'}/consultations/book\" \n                       style=\"background: linear-gradient(135deg, #ff6b35, #f7931e); color: white; padding: 15px 30px; text-decoration: none; border-radius: 25px; font-weight: bold;\">\n                        Book Your First Consultation\n                    </a>\n                </div>\n            </div>\n            <div class=\"footer\">\n                <p>🙏 Thank you for choosing Jai Guru Astro Remedy</p>\n                <p>For support, contact us at support@jaiguruastroremedy.com</p>\n            </div>\n        </div>\n    </body>\n    </html>`;\n\n    const textBody = `Welcome to Jai Guru Astro Remedy!\n\nNamaste ${fullName}!\n\nThank you for joining our astrological family. We're excited to guide you on your spiritual journey.\n\nWhat's Available:\n- Personal Consultations (Video, Audio, Chat & In-Person)\n- Astrology Courses by Expert Astrologer Arup Shastri  \n- Home Tuition (One-to-one and Group Learning)\n- Remedial Products (Gemstones, Yantras, Books & More)\n\nYour account is now active. Start by booking your first consultation.\n\nThank you for choosing Jai Guru Astro Remedy!\nSupport: support@jaiguruastroremedy.com`;\n\n    return this.sendEmail({\n      to: email,\n      subject: '🌟 Welcome to Jai Guru Astro Remedy - Your Spiritual Journey Begins!',\n      htmlBody,\n      textBody\n    });\n  }\n\n  async sendBookingConfirmationEmail(email: string, fullName: string, details: {\n    bookingId: string;\n    consultationType: string;\n    dateTime: string;\n    astrologer: string;\n    amount: number;\n    meetingLink?: string;\n    paymentId: string;\n  }): Promise<{ success: boolean; messageId?: string; error?: string }> {\n    const htmlBody = `\n    <!DOCTYPE html>\n    <html>\n    <head>\n        <style>\n            .container { max-width: 600px; margin: 0 auto; font-family: Arial, sans-serif; }\n            .header { background: linear-gradient(135deg, #ff6b35, #f7931e); padding: 30px; text-align: center; color: white; }\n            .content { padding: 30px; background: #ffffff; }\n            .booking-details { background: #f8f9fa; padding: 20px; border-radius: 10px; margin: 20px 0; }\n            .footer { padding: 20px; background: #f8f9fa; text-align: center; color: #666; }\n        </style>\n    </head>\n    <body>\n        <div class=\"container\">\n            <div class=\"header\">\n                <h1>✅ Consultation Booking Confirmed!</h1>\n            </div>\n            <div class=\"content\">\n                <h2>Dear ${fullName},</h2>\n                <p>Your consultation booking has been confirmed. We look forward to providing you with insightful guidance.</p>\n                \n                <div class=\"booking-details\">\n                    <h3>📋 Booking Details:</h3>\n                    <p><strong>Booking ID:</strong> ${details.bookingId}</p>\n                    <p><strong>Consultation Type:</strong> ${details.consultationType}</p>\n                    <p><strong>Date & Time:</strong> ${details.dateTime}</p>\n                    <p><strong>Astrologer:</strong> ${details.astrologer}</p>\n                    <p><strong>Amount Paid:</strong> ₹${details.amount}</p>\n                    <p><strong>Payment ID:</strong> ${details.paymentId}</p>\n                    ${details.meetingLink ? `<p><strong>Meeting Link:</strong> <a href=\"${details.meetingLink}\">${details.meetingLink}</a></p>` : ''}\n                </div>\n                \n                <h3>📝 Preparation Guidelines:</h3>\n                <ul>\n                    <li>Have your birth details ready (Date, Time, Place of Birth)</li>\n                    <li>Prepare specific questions you want to ask</li>\n                    <li>Ensure stable internet connection for video/audio sessions</li>\n                    <li>Join 5 minutes before the scheduled time</li>\n                </ul>\n                \n                <p>You will receive a reminder 24 hours and 1 hour before your consultation.</p>\n            </div>\n            <div class=\"footer\">\n                <p>🙏 Thank you for choosing Jai Guru Astro Remedy</p>\n                <p>For support, contact us at support@jaiguruastroremedy.com</p>\n            </div>\n        </div>\n    </body>\n    </html>`;\n\n    return this.sendEmail({\n      to: email,\n      subject: `✅ Consultation Confirmed - ${details.consultationType} on ${details.dateTime}`,\n      htmlBody\n    });\n  }\n\n  async sendPaymentReceiptEmail(email: string, fullName: string, details: {\n    transactionId: string;\n    amount: number;\n    items: Array<{ name: string; price: number; quantity: number }>;\n    paymentMethod: string;\n  }): Promise<{ success: boolean; messageId?: string; error?: string }> {\n    const itemsHtml = details.items.map(item => \n      `<tr>\n        <td style=\"padding: 10px; border-bottom: 1px solid #ddd;\">${item.name}</td>\n        <td style=\"padding: 10px; border-bottom: 1px solid #ddd; text-align: right;\">₹${item.price}</td>\n        <td style=\"padding: 10px; border-bottom: 1px solid #ddd; text-align: center;\">${item.quantity}</td>\n        <td style=\"padding: 10px; border-bottom: 1px solid #ddd; text-align: right;\">₹${item.price * item.quantity}</td>\n      </tr>`\n    ).join('');\n\n    const subtotal = details.items.reduce((sum, item) => sum + (item.price * item.quantity), 0);\n    const gst = Math.round(subtotal * 0.18);\n\n    const htmlBody = `\n    <!DOCTYPE html>\n    <html>\n    <head>\n        <style>\n            .container { max-width: 600px; margin: 0 auto; font-family: Arial, sans-serif; }\n            .header { background: linear-gradient(135deg, #ff6b35, #f7931e); padding: 30px; text-align: center; color: white; }\n            .content { padding: 30px; background: #ffffff; }\n            .receipt { background: #f8f9fa; padding: 20px; border-radius: 10px; margin: 20px 0; }\n            .items-table { width: 100%; border-collapse: collapse; margin: 20px 0; }\n            .footer { padding: 20px; background: #f8f9fa; text-align: center; color: #666; }\n        </style>\n    </head>\n    <body>\n        <div class=\"container\">\n            <div class=\"header\">\n                <h1>🧾 Payment Receipt</h1>\n            </div>\n            <div class=\"content\">\n                <h2>Dear ${fullName},</h2>\n                <p>Thank you for your purchase! Your payment has been processed successfully.</p>\n                \n                <div class=\"receipt\">\n                    <h3>💰 Payment Details:</h3>\n                    <p><strong>Transaction ID:</strong> ${details.transactionId}</p>\n                    <p><strong>Payment Method:</strong> ${details.paymentMethod}</p>\n                    <p><strong>Date:</strong> ${new Date().toLocaleDateString('en-IN')}</p>\n                    \n                    <table class=\"items-table\">\n                        <thead>\n                            <tr style=\"background: #e9ecef;\">\n                                <th style=\"padding: 10px; text-align: left;\">Item</th>\n                                <th style=\"padding: 10px; text-align: right;\">Price</th>\n                                <th style=\"padding: 10px; text-align: center;\">Qty</th>\n                                <th style=\"padding: 10px; text-align: right;\">Total</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            ${itemsHtml}\n                            <tr style=\"background: #f8f9fa;\">\n                                <td colspan=\"3\" style=\"padding: 10px; font-weight: bold;\">Subtotal:</td>\n                                <td style=\"padding: 10px; text-align: right; font-weight: bold;\">₹${subtotal}</td>\n                            </tr>\n                            <tr style=\"background: #f8f9fa;\">\n                                <td colspan=\"3\" style=\"padding: 10px;\">GST (18%):</td>\n                                <td style=\"padding: 10px; text-align: right;\">₹${gst}</td>\n                            </tr>\n                            <tr style=\"background: #ff6b35; color: white;\">\n                                <td colspan=\"3\" style=\"padding: 10px; font-weight: bold;\">Final Total:</td>\n                                <td style=\"padding: 10px; text-align: right; font-weight: bold;\">₹${details.amount}</td>\n                            </tr>\n                        </tbody>\n                    </table>\n                </div>\n                \n                <p>Your order will be processed shortly. You'll receive updates on your order status.</p>\n            </div>\n            <div class=\"footer\">\n                <p>🙏 Thank you for choosing Jai Guru Astro Remedy</p>\n                <p>For support, contact us at support@jaiguruastroremedy.com</p>\n            </div>\n        </div>\n    </body>\n    </html>`;\n\n    return this.sendEmail({\n      to: email,\n      subject: `🧾 Payment Receipt - Transaction ${details.transactionId}`,\n      htmlBody\n    });\n  }\n\n  async sendConsultationReminderEmail(email: string, fullName: string, details: {\n    consultationType: string;\n    dateTime: string;\n    astrologer: string;\n    meetingLink?: string;\n    reminderType: '24hours' | '1hour';\n  }): Promise<{ success: boolean; messageId?: string; error?: string }> {\n    const timeframe = details.reminderType === '24hours' ? '24 hours' : '1 hour';\n    \n    const htmlBody = `\n    <!DOCTYPE html>\n    <html>\n    <head>\n        <style>\n            .container { max-width: 600px; margin: 0 auto; font-family: Arial, sans-serif; }\n            .header { background: linear-gradient(135deg, #ff6b35, #f7931e); padding: 30px; text-align: center; color: white; }\n            .content { padding: 30px; background: #ffffff; }\n            .reminder-box { background: #fff3cd; border: 2px solid #ffc107; padding: 20px; border-radius: 10px; margin: 20px 0; }\n            .footer { padding: 20px; background: #f8f9fa; text-align: center; color: #666; }\n        </style>\n    </head>\n    <body>\n        <div class=\"container\">\n            <div class=\"header\">\n                <h1>⏰ Consultation Reminder</h1>\n            </div>\n            <div class=\"content\">\n                <h2>Dear ${fullName},</h2>\n                <p>This is a friendly reminder that your consultation is scheduled in <strong>${timeframe}</strong>.</p>\n                \n                <div class=\"reminder-box\">\n                    <h3>📅 Session Details:</h3>\n                    <p><strong>Type:</strong> ${details.consultationType}</p>\n                    <p><strong>Date & Time:</strong> ${details.dateTime}</p>\n                    <p><strong>Astrologer:</strong> ${details.astrologer}</p>\n                    ${details.meetingLink ? `<p><strong>Meeting Link:</strong> <a href=\"${details.meetingLink}\">${details.meetingLink}</a></p>` : ''}\n                </div>\n                \n                <h3>📝 Before Your Session:</h3>\n                <ul>\n                    <li>Have your birth details ready (Date, Time, Place of Birth)</li>\n                    <li>Prepare your questions in advance</li>\n                    <li>Ensure stable internet connection</li>\n                    <li>Find a quiet, private space for the session</li>\n                    <li>Join 5 minutes early</li>\n                </ul>\n                \n                ${details.reminderType === '1hour' ? \n                  '<p style=\"color: #dc3545; font-weight: bold;\">⚠️ Your session starts in 1 hour! Please be ready to join.</p>' : \n                  '<p>We look forward to providing you with insightful guidance tomorrow.</p>'\n                }\n            </div>\n            <div class=\"footer\">\n                <p>🙏 Thank you for choosing Jai Guru Astro Remedy</p>\n                <p>For support, contact us at support@jaiguruastroremedy.com</p>\n            </div>\n        </div>\n    </body>\n    </html>`;\n\n    return this.sendEmail({\n      to: email,\n      subject: `⏰ Consultation Reminder - ${timeframe} to go!`,\n      htmlBody\n    });\n  }\n\n  async sendCourseEnrollmentEmail(email: string, fullName: string, details: {\n    courseName: string;\n    startDate: string;\n    duration: string;\n    courseId: string;\n  }): Promise<{ success: boolean; messageId?: string; error?: string }> {\n    const htmlBody = `\n    <!DOCTYPE html>\n    <html>\n    <head>\n        <style>\n            .container { max-width: 600px; margin: 0 auto; font-family: Arial, sans-serif; }\n            .header { background: linear-gradient(135deg, #ff6b35, #f7931e); padding: 30px; text-align: center; color: white; }\n            .content { padding: 30px; background: #ffffff; }\n            .course-box { background: #e7f3ff; border: 2px solid #007bff; padding: 20px; border-radius: 10px; margin: 20px 0; }\n            .footer { padding: 20px; background: #f8f9fa; text-align: center; color: #666; }\n        </style>\n    </head>\n    <body>\n        <div class=\"container\">\n            <div class=\"header\">\n                <h1>📚 Course Enrollment Confirmed!</h1>\n            </div>\n            <div class=\"content\">\n                <h2>Dear ${fullName},</h2>\n                <p>Congratulations! You have successfully enrolled in our astrology course. Your learning journey begins soon!</p>\n                \n                <div class=\"course-box\">\n                    <h3>📖 Course Details:</h3>\n                    <p><strong>Course:</strong> ${details.courseName}</p>\n                    <p><strong>Start Date:</strong> ${details.startDate}</p>\n                    <p><strong>Duration:</strong> ${details.duration}</p>\n                    <p><strong>Course ID:</strong> ${details.courseId}</p>\n                </div>\n                \n                <h3>🎯 What to Expect:</h3>\n                <ul>\n                    <li>Comprehensive study materials and resources</li>\n                    <li>Expert guidance from Astrologer Arup Shastri</li>\n                    <li>Practical exercises and assignments</li>\n                    <li>Certificate upon successful completion</li>\n                    <li>Lifetime access to course materials</li>\n                </ul>\n                \n                <h3>📋 Next Steps:</h3>\n                <ul>\n                    <li>You'll receive course access details 1 day before start date</li>\n                    <li>Prepare a notebook for taking notes</li>\n                    <li>Join our student WhatsApp group for updates</li>\n                </ul>\n                \n                <p>We're excited to have you on this transformative learning journey!</p>\n                \n                <div style=\"text-align: center; margin: 30px 0;\">\n                    <a href=\"${process.env.FRONTEND_URL || 'https://jaiguruastroremedy.com'}/courses/my-learning\" \n                       style=\"background: linear-gradient(135deg, #ff6b35, #f7931e); color: white; padding: 15px 30px; text-decoration: none; border-radius: 25px; font-weight: bold;\">\n                        View My Courses\n                    </a>\n                </div>\n            </div>\n            <div class=\"footer\">\n                <p>🙏 Thank you for choosing Jai Guru Astro Remedy</p>\n                <p>For support, contact us at support@jaiguruastroremedy.com</p>\n            </div>\n        </div>\n    </body>\n    </html>`;\n\n    return this.sendEmail({\n      to: email,\n      subject: `📚 Course Enrollment Confirmed - ${details.courseName}`,\n      htmlBody\n    });\n  }\n\n  isConfigured(): boolean {\n    return this.ses !== null;\n  }\n}\n\nexport const emailService = new EmailService();","size_bytes":19535},"server/phonepe.ts":{"content":"import crypto from 'crypto';\nimport axios from 'axios';\nimport { v4 as uuidv4 } from 'uuid';\n\nexport interface PhonePeConfig {\n  merchantId: string;\n  saltKey: string;\n  saltIndex: string;\n  hostUrl: string;\n}\n\nexport interface PaymentRequest {\n  amount: number; // in paisa (100 = ₹1)\n  merchantOrderId: string;\n  merchantUserId: string;\n  redirectUrl: string;\n  callbackUrl: string;\n  mobileNumber?: string;\n  paymentInstrument?: {\n    type: 'UPI_COLLECT' | 'UPI_INTENT' | 'UPI_QR' | 'CARD' | 'NET_BANKING' | 'PAY_PAGE';\n    targetApp?: string;\n  };\n}\n\nexport interface PaymentResponse {\n  success: boolean;\n  code: string;\n  message: string;\n  data?: {\n    merchantId: string;\n    merchantTransactionId: string;\n    transactionId: string;\n    amount: number;\n    state: 'PENDING' | 'COMPLETED' | 'FAILED';\n    responseCode: string;\n    paymentInstrument: {\n      type: string;\n      utr?: string;\n    };\n  };\n}\n\nexport class PhonePePaymentService {\n  private config: PhonePeConfig;\n\n  constructor() {\n    this.config = {\n      merchantId: process.env.PHONEPE_MERCHANT_ID || 'PGTESTPAYUAT',\n      saltKey: process.env.PHONEPE_SALT_KEY || '099eb0cd-02cf-4e2a-8aca-3e6c6aff0399',\n      saltIndex: process.env.PHONEPE_SALT_INDEX || '1',\n      hostUrl: process.env.PHONEPE_HOST_URL || 'https://api-preprod.phonepe.com/apis/hermes/pg/v1'\n    };\n  }\n\n  private generateChecksum(payload: string, endpoint: string): string {\n    const string = payload + endpoint + this.config.saltKey;\n    const sha256 = crypto.createHash('sha256').update(string).digest('hex');\n    return sha256 + '###' + this.config.saltIndex;\n  }\n\n  async createPayment(paymentRequest: PaymentRequest): Promise<PaymentResponse> {\n    try {\n      const merchantTransactionId = paymentRequest.merchantOrderId || uuidv4();\n      \n      const payload = {\n        merchantId: this.config.merchantId,\n        merchantTransactionId,\n        merchantUserId: paymentRequest.merchantUserId,\n        amount: paymentRequest.amount,\n        redirectUrl: paymentRequest.redirectUrl,\n        redirectMode: 'POST',\n        callbackUrl: paymentRequest.callbackUrl,\n        mobileNumber: paymentRequest.mobileNumber,\n        paymentInstrument: paymentRequest.paymentInstrument || {\n          type: 'PAY_PAGE'\n        }\n      };\n\n      const base64Payload = Buffer.from(JSON.stringify(payload)).toString('base64');\n      const endpoint = '/pg/v1/pay';\n      const checksum = this.generateChecksum(base64Payload, endpoint);\n\n      const response = await axios.post(\n        `${this.config.hostUrl}${endpoint}`,\n        {\n          request: base64Payload\n        },\n        {\n          headers: {\n            'Content-Type': 'application/json',\n            'X-VERIFY': checksum,\n            'accept': 'application/json'\n          }\n        }\n      );\n\n      if (response.data.success) {\n        return {\n          success: true,\n          code: response.data.code,\n          message: response.data.message,\n          data: {\n            ...response.data.data,\n            merchantTransactionId,\n            paymentUrl: response.data.data.instrumentResponse.redirectInfo.url\n          }\n        };\n      } else {\n        return {\n          success: false,\n          code: response.data.code,\n          message: response.data.message\n        };\n      }\n    } catch (error: any) {\n      console.error('PhonePe payment creation error:', error);\n      return {\n        success: false,\n        code: 'PAYMENT_ERROR',\n        message: error.response?.data?.message || 'Payment initiation failed'\n      };\n    }\n  }\n\n  async verifyPayment(merchantTransactionId: string): Promise<PaymentResponse> {\n    try {\n      const endpoint = `/pg/v1/status/${this.config.merchantId}/${merchantTransactionId}`;\n      const checksum = this.generateChecksum('', endpoint);\n\n      const response = await axios.get(\n        `${this.config.hostUrl}${endpoint}`,\n        {\n          headers: {\n            'Content-Type': 'application/json',\n            'X-VERIFY': checksum,\n            'X-MERCHANT-ID': this.config.merchantId,\n            'accept': 'application/json'\n          }\n        }\n      );\n\n      return {\n        success: response.data.success,\n        code: response.data.code,\n        message: response.data.message,\n        data: response.data.data\n      };\n    } catch (error: any) {\n      console.error('PhonePe payment verification error:', error);\n      return {\n        success: false,\n        code: 'VERIFICATION_ERROR',\n        message: error.response?.data?.message || 'Payment verification failed'\n      };\n    }\n  }\n\n  async processWebhook(payload: any, checksum: string): Promise<boolean> {\n    try {\n      // Verify webhook signature\n      const expectedChecksum = crypto\n        .createHash('sha256')\n        .update(JSON.stringify(payload) + this.config.saltKey)\n        .digest('hex') + '###' + this.config.saltIndex;\n\n      if (checksum !== expectedChecksum) {\n        console.error('Invalid webhook checksum');\n        return false;\n      }\n\n      // Process webhook data\n      console.log('PhonePe webhook received:', payload);\n      return true;\n    } catch (error) {\n      console.error('PhonePe webhook processing error:', error);\n      return false;\n    }\n  }\n}\n\nexport const phonePeService = new PhonePePaymentService();","size_bytes":5278},"server/twilio-service.ts":{"content":"import twilio from 'twilio';\n\nexport class TwilioService {\n  private client: any = null;\n  private fromNumber: string;\n\n  constructor() {\n    const accountSid = process.env.TWILIO_ACCOUNT_SID;\n    const authToken = process.env.TWILIO_AUTH_TOKEN;\n    this.fromNumber = process.env.TWILIO_PHONE_NUMBER || '';\n\n    if (accountSid && authToken) {\n      this.client = twilio(accountSid, authToken);\n    } else {\n      console.warn('Twilio credentials not found. SMS functionality will be disabled.');\n    }\n  }\n\n  async sendSMS(to: string, message: string): Promise<{ success: boolean; messageId?: string; error?: string }> {\n    if (!this.client) {\n      console.log(`SMS would be sent to ${to}: ${message}`);\n      return { \n        success: true, \n        messageId: 'dev-mode-' + Date.now(),\n        error: 'Development mode - SMS not actually sent'\n      };\n    }\n\n    try {\n      const result = await this.client.messages.create({\n        body: message,\n        from: this.fromNumber,\n        to: to\n      });\n\n      return {\n        success: true,\n        messageId: result.sid\n      };\n    } catch (error: any) {\n      console.error('Twilio SMS error:', error);\n      return {\n        success: false,\n        error: error.message || 'Failed to send SMS'\n      };\n    }\n  }\n\n  async sendOTP(phoneNumber: string, countryCode: string, otp: string, purpose: string): Promise<{ success: boolean; messageId?: string; error?: string }> {\n    const fullNumber = `${countryCode}${phoneNumber}`;\n    \n    let message: string;\n    switch (purpose) {\n      case 'registration':\n        message = `Welcome to Jai Guru Astro Remedy! Your registration OTP is: ${otp}. Valid for 10 minutes. Do not share this code.`;\n        break;\n      case 'login':\n        message = `Your Jai Guru Astro Remedy login OTP is: ${otp}. Valid for 10 minutes. Do not share this code.`;\n        break;\n      case 'mobile_change':\n        message = `Your mobile number change OTP is: ${otp}. Valid for 10 minutes. Do not share this code.`;\n        break;\n      case 'recovery':\n        message = `Your account recovery OTP is: ${otp}. Valid for 10 minutes. Do not share this code.`;\n        break;\n      default:\n        message = `Your Jai Guru Astro Remedy verification code is: ${otp}. Valid for 10 minutes.`;\n    }\n\n    return this.sendSMS(fullNumber, message);\n  }\n\n  async sendBookingConfirmation(phoneNumber: string, countryCode: string, details: {\n    bookingId: string;\n    consultationType: string;\n    dateTime: string;\n    astrologer: string;\n    amount: number;\n  }): Promise<{ success: boolean; messageId?: string; error?: string }> {\n    const fullNumber = `${countryCode}${phoneNumber}`;\n    const message = `🌟 Booking Confirmed! \nID: ${details.bookingId}\nType: ${details.consultationType}\nDate: ${details.dateTime}\nAstrologer: ${details.astrologer}\nAmount: ₹${details.amount}\nThank you for choosing Jai Guru Astro Remedy!`;\n\n    return this.sendSMS(fullNumber, message);\n  }\n\n  async sendPaymentConfirmation(phoneNumber: string, countryCode: string, details: {\n    transactionId: string;\n    amount: number;\n    items: string[];\n  }): Promise<{ success: boolean; messageId?: string; error?: string }> {\n    const fullNumber = `${countryCode}${phoneNumber}`;\n    const itemsList = details.items.slice(0, 2).join(', ') + (details.items.length > 2 ? ' +more' : '');\n    \n    const message = `💰 Payment Successful!\nTransaction ID: ${details.transactionId}\nAmount: ₹${details.amount}\nItems: ${itemsList}\nThank you for your purchase at Jai Guru Astro Remedy!`;\n\n    return this.sendSMS(fullNumber, message);\n  }\n\n  async sendConsultationReminder(phoneNumber: string, countryCode: string, details: {\n    consultationType: string;\n    dateTime: string;\n    astrologer: string;\n    meetingLink?: string;\n  }): Promise<{ success: boolean; messageId?: string; error?: string }> {\n    const fullNumber = `${countryCode}${phoneNumber}`;\n    let message = `⏰ Consultation Reminder\nType: ${details.consultationType}\nDate: ${details.dateTime}\nAstrologer: ${details.astrologer}`;\n\n    if (details.meetingLink) {\n      message += `\\nJoin: ${details.meetingLink}`;\n    }\n\n    message += '\\nPrepare your questions. See you soon!';\n\n    return this.sendSMS(fullNumber, message);\n  }\n\n  async sendCourseEnrollmentConfirmation(phoneNumber: string, countryCode: string, details: {\n    courseName: string;\n    startDate: string;\n    duration: string;\n  }): Promise<{ success: boolean; messageId?: string; error?: string }> {\n    const fullNumber = `${countryCode}${phoneNumber}`;\n    const message = `📚 Course Enrollment Confirmed!\nCourse: ${details.courseName}\nStart Date: ${details.startDate}\nDuration: ${details.duration}\nWelcome to your learning journey with Jai Guru Astro Remedy!`;\n\n    return this.sendSMS(fullNumber, message);\n  }\n\n  isConfigured(): boolean {\n    return this.client !== null;\n  }\n}\n\nexport const twilioService = new TwilioService();","size_bytes":4931},"client/src/pages/consultation-feedback.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { useLocation } from \"wouter\";\nimport { GlassCard } from \"@/components/ui/glass-card\";\nimport { NeonButton } from \"@/components/ui/neon-button\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { RadioGroup, RadioGroupItem } from \"@/components/ui/radio-group\";\nimport { Label } from \"@/components/ui/label\";\nimport { Star, ThumbsUp, MessageCircle, Home } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\nexport default function ConsultationFeedback() {\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const [feedback, setFeedback] = useState({\n    rating: 5,\n    experience: \"excellent\",\n    helpfulness: \"very-helpful\",\n    clarity: \"very-clear\",\n    recommendation: \"yes\",\n    comments: \"\",\n    suggestions: \"\",\n    followUp: false\n  });\n\n  const submitFeedbackMutation = useMutation({\n    mutationFn: async (feedbackData: typeof feedback) => {\n      return apiRequest(\"POST\", \"/api/consultation-feedback\", feedbackData);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Thank You!\",\n        description: \"Your feedback has been submitted successfully.\",\n      });\n      setTimeout(() => {\n        setLocation('/');\n      }, 2000);\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to submit feedback. Please try again.\",\n        variant: \"destructive\",\n      });\n    }\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    submitFeedbackMutation.mutate(feedback);\n  };\n\n  const StarRating = ({ rating, onChange }: { rating: number; onChange: (rating: number) => void }) => (\n    <div className=\"flex space-x-1\">\n      {[1, 2, 3, 4, 5].map((star) => (\n        <button\n          key={star}\n          type=\"button\"\n          onClick={() => onChange(star)}\n          className=\"focus:outline-none\"\n        >\n          <Star\n            className={`w-8 h-8 transition-colors ${\n              star <= rating ? \"text-yellow-400 fill-yellow-400\" : \"text-gray-400\"\n            }`}\n          />\n        </button>\n      ))}\n    </div>\n  );\n\n  return (\n    <div className=\"min-h-screen cosmic-bg\">\n      <div className=\"container mx-auto px-4 py-8\">\n        <div className=\"max-w-2xl mx-auto\">\n          \n          <GlassCard className=\"p-8\">\n            <div className=\"text-center mb-8\">\n              <div className=\"w-16 h-16 bg-green-500/20 rounded-full flex items-center justify-center mx-auto mb-4\">\n                <ThumbsUp className=\"w-8 h-8 text-green-400\" />\n              </div>\n              <h1 className=\"text-3xl font-bold neon-text mb-2\">Consultation Complete!</h1>\n              <p className=\"text-muted-foreground\">\n                Thank you for your session with Astrologer Arup Shastri. Your feedback helps us improve our services.\n              </p>\n            </div>\n\n            <form onSubmit={handleSubmit} className=\"space-y-6\">\n              \n              {/* Overall Rating */}\n              <div className=\"space-y-3\">\n                <label className=\"block text-sm font-medium text-foreground\">\n                  Overall Rating *\n                </label>\n                <div className=\"flex items-center space-x-4\">\n                  <StarRating \n                    rating={feedback.rating} \n                    onChange={(rating) => setFeedback({ ...feedback, rating })}\n                  />\n                  <span className=\"text-sm text-muted-foreground\">\n                    ({feedback.rating} / 5 stars)\n                  </span>\n                </div>\n              </div>\n\n              {/* Experience Rating */}\n              <div className=\"space-y-3\">\n                <label className=\"block text-sm font-medium text-foreground\">\n                  How was your overall experience? *\n                </label>\n                <RadioGroup \n                  value={feedback.experience} \n                  onValueChange={(value) => setFeedback({ ...feedback, experience: value })}\n                >\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <div className=\"flex items-center space-x-2\">\n                      <RadioGroupItem value=\"excellent\" id=\"excellent\" />\n                      <Label htmlFor=\"excellent\">Excellent</Label>\n                    </div>\n                    <div className=\"flex items-center space-x-2\">\n                      <RadioGroupItem value=\"good\" id=\"good\" />\n                      <Label htmlFor=\"good\">Good</Label>\n                    </div>\n                    <div className=\"flex items-center space-x-2\">\n                      <RadioGroupItem value=\"average\" id=\"average\" />\n                      <Label htmlFor=\"average\">Average</Label>\n                    </div>\n                    <div className=\"flex items-center space-x-2\">\n                      <RadioGroupItem value=\"poor\" id=\"poor\" />\n                      <Label htmlFor=\"poor\">Poor</Label>\n                    </div>\n                  </div>\n                </RadioGroup>\n              </div>\n\n              {/* Helpfulness */}\n              <div className=\"space-y-3\">\n                <label className=\"block text-sm font-medium text-foreground\">\n                  How helpful was the consultation? *\n                </label>\n                <RadioGroup \n                  value={feedback.helpfulness} \n                  onValueChange={(value) => setFeedback({ ...feedback, helpfulness: value })}\n                >\n                  <div className=\"grid grid-cols-1 gap-3\">\n                    <div className=\"flex items-center space-x-2\">\n                      <RadioGroupItem value=\"very-helpful\" id=\"very-helpful\" />\n                      <Label htmlFor=\"very-helpful\">Very helpful - got clear guidance</Label>\n                    </div>\n                    <div className=\"flex items-center space-x-2\">\n                      <RadioGroupItem value=\"somewhat-helpful\" id=\"somewhat-helpful\" />\n                      <Label htmlFor=\"somewhat-helpful\">Somewhat helpful - some questions answered</Label>\n                    </div>\n                    <div className=\"flex items-center space-x-2\">\n                      <RadioGroupItem value=\"not-helpful\" id=\"not-helpful\" />\n                      <Label htmlFor=\"not-helpful\">Not very helpful - unclear guidance</Label>\n                    </div>\n                  </div>\n                </RadioGroup>\n              </div>\n\n              {/* Clarity */}\n              <div className=\"space-y-3\">\n                <label className=\"block text-sm font-medium text-foreground\">\n                  How clear were the explanations? *\n                </label>\n                <RadioGroup \n                  value={feedback.clarity} \n                  onValueChange={(value) => setFeedback({ ...feedback, clarity: value })}\n                >\n                  <div className=\"grid grid-cols-1 gap-3\">\n                    <div className=\"flex items-center space-x-2\">\n                      <RadioGroupItem value=\"very-clear\" id=\"very-clear\" />\n                      <Label htmlFor=\"very-clear\">Very clear - easy to understand</Label>\n                    </div>\n                    <div className=\"flex items-center space-x-2\">\n                      <RadioGroupItem value=\"mostly-clear\" id=\"mostly-clear\" />\n                      <Label htmlFor=\"mostly-clear\">Mostly clear - minor confusion</Label>\n                    </div>\n                    <div className=\"flex items-center space-x-2\">\n                      <RadioGroupItem value=\"unclear\" id=\"unclear\" />\n                      <Label htmlFor=\"unclear\">Unclear - hard to follow</Label>\n                    </div>\n                  </div>\n                </RadioGroup>\n              </div>\n\n              {/* Recommendation */}\n              <div className=\"space-y-3\">\n                <label className=\"block text-sm font-medium text-foreground\">\n                  Would you recommend our services to others? *\n                </label>\n                <RadioGroup \n                  value={feedback.recommendation} \n                  onValueChange={(value) => setFeedback({ ...feedback, recommendation: value })}\n                >\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <div className=\"flex items-center space-x-2\">\n                      <RadioGroupItem value=\"yes\" id=\"recommend-yes\" />\n                      <Label htmlFor=\"recommend-yes\">Yes, definitely</Label>\n                    </div>\n                    <div className=\"flex items-center space-x-2\">\n                      <RadioGroupItem value=\"maybe\" id=\"recommend-maybe\" />\n                      <Label htmlFor=\"recommend-maybe\">Maybe</Label>\n                    </div>\n                    <div className=\"flex items-center space-x-2\">\n                      <RadioGroupItem value=\"no\" id=\"recommend-no\" />\n                      <Label htmlFor=\"recommend-no\">No</Label>\n                    </div>\n                  </div>\n                </RadioGroup>\n              </div>\n\n              {/* Comments */}\n              <div className=\"space-y-3\">\n                <label className=\"block text-sm font-medium text-foreground\">\n                  Additional Comments\n                </label>\n                <Textarea\n                  value={feedback.comments}\n                  onChange={(e) => setFeedback({ ...feedback, comments: e.target.value })}\n                  placeholder=\"Share your thoughts about the consultation, what you liked, and any specific insights you received...\"\n                  className=\"form-input min-h-[100px]\"\n                  data-testid=\"comments-input\"\n                />\n              </div>\n\n              {/* Suggestions */}\n              <div className=\"space-y-3\">\n                <label className=\"block text-sm font-medium text-foreground\">\n                  Suggestions for Improvement\n                </label>\n                <Textarea\n                  value={feedback.suggestions}\n                  onChange={(e) => setFeedback({ ...feedback, suggestions: e.target.value })}\n                  placeholder=\"How can we improve our consultation services? Any features or topics you'd like to see covered...\"\n                  className=\"form-input min-h-[100px]\"\n                  data-testid=\"suggestions-input\"\n                />\n              </div>\n\n              {/* Follow-up Interest */}\n              <div className=\"glass p-4 rounded-lg\">\n                <div className=\"flex items-start space-x-3\">\n                  <input\n                    type=\"checkbox\"\n                    id=\"followUp\"\n                    checked={feedback.followUp}\n                    onChange={(e) => setFeedback({ ...feedback, followUp: e.target.checked })}\n                    className=\"mt-1\"\n                  />\n                  <div>\n                    <Label htmlFor=\"followUp\" className=\"font-medium\">\n                      I'm interested in follow-up consultations\n                    </Label>\n                    <p className=\"text-sm text-muted-foreground mt-1\">\n                      We'll contact you about future consultation options and special offers.\n                    </p>\n                  </div>\n                </div>\n              </div>\n\n              {/* Submit Buttons */}\n              <div className=\"flex items-center space-x-4 pt-6\">\n                <NeonButton\n                  type=\"submit\"\n                  className=\"flex-1\"\n                  disabled={submitFeedbackMutation.isPending}\n                  data-testid=\"submit-feedback\"\n                >\n                  {submitFeedbackMutation.isPending ? \"Submitting...\" : \"Submit Feedback\"}\n                </NeonButton>\n                \n                <Button\n                  type=\"button\"\n                  variant=\"outline\"\n                  onClick={() => setLocation('/')}\n                  data-testid=\"skip-feedback\"\n                >\n                  <Home className=\"w-4 h-4 mr-2\" />\n                  Skip & Go Home\n                </Button>\n              </div>\n            </form>\n\n            {/* Thank You Message */}\n            <div className=\"text-center mt-8 pt-6 border-t border-primary/20\">\n              <MessageCircle className=\"w-6 h-6 text-primary mx-auto mb-2\" />\n              <p className=\"text-sm text-muted-foreground\">\n                Thank you for choosing Jai Guru Astro Remedy for your astrological guidance!\n              </p>\n            </div>\n          </GlassCard>\n\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":12716},"client/src/pages/consultation-session.tsx":{"content":"import { useState, useEffect, useRef } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useLocation } from \"wouter\";\nimport { GlassCard } from \"@/components/ui/glass-card\";\nimport { NeonButton } from \"@/components/ui/neon-button\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { \n  Video, \n  VideoOff, \n  Mic, \n  MicOff, \n  Phone, \n  MessageSquare,\n  Clock,\n  AlertTriangle,\n  Settings,\n  Users\n} from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\ninterface ConsultationTimer {\n  totalDuration: number; // in seconds\n  remainingTime: number; // in seconds\n  isActive: boolean;\n  isPaused: boolean;\n  warnings: {\n    fifteenMin: boolean;\n    fiveMin: boolean;\n    oneMin: boolean;\n  };\n}\n\nexport default function ConsultationSession() {\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const [sessionId, setSessionId] = useState<string>(\"\");\n  const [timer, setTimer] = useState<ConsultationTimer>({\n    totalDuration: 3600, // Default 60 minutes\n    remainingTime: 3600,\n    isActive: false,\n    isPaused: false,\n    warnings: {\n      fifteenMin: false,\n      fiveMin: false,\n      oneMin: false\n    }\n  });\n  const [mediaControls, setMediaControls] = useState({\n    videoEnabled: true,\n    audioEnabled: true,\n    screenShare: false\n  });\n  \n  const intervalRef = useRef<NodeJS.Timeout>();\n  const audioWarningRef = useRef<HTMLAudioElement | null>(null);\n\n  // Get consultation session data\n  const { data: sessionData } = useQuery({\n    queryKey: ['/api/consultation-session', sessionId],\n    enabled: !!sessionId\n  });\n\n  // Initialize session from URL params or consultation data\n  useEffect(() => {\n    const urlParams = new URLSearchParams(window.location.search);\n    const id = urlParams.get('session');\n    if (id) {\n      setSessionId(id);\n    }\n  }, []);\n\n  // Timer countdown logic\n  useEffect(() => {\n    if (timer.isActive && !timer.isPaused && timer.remainingTime > 0) {\n      intervalRef.current = setInterval(() => {\n        setTimer(prev => {\n          const newRemainingTime = prev.remainingTime - 1;\n          const newTimer = { ...prev, remainingTime: newRemainingTime };\n          \n          // Check for warning thresholds\n          const fifteenMinutes = 15 * 60;\n          const fiveMinutes = 5 * 60;\n          const oneMinute = 60;\n          \n          // 15-minute warning\n          if (newRemainingTime === fifteenMinutes && !prev.warnings.fifteenMin) {\n            newTimer.warnings.fifteenMin = true;\n            showTimeWarning(\"15 minutes remaining in your consultation\");\n          }\n          \n          // 5-minute warning\n          if (newRemainingTime === fiveMinutes && !prev.warnings.fiveMin) {\n            newTimer.warnings.fiveMin = true;\n            showTimeWarning(\"5 minutes remaining - please wrap up your consultation\");\n          }\n          \n          // 1-minute warning\n          if (newRemainingTime === oneMinute && !prev.warnings.oneMin) {\n            newTimer.warnings.oneMin = true;\n            showTimeWarning(\"1 minute remaining - consultation ending soon\", \"destructive\");\n          }\n          \n          // Session auto-end\n          if (newRemainingTime <= 0) {\n            endSession();\n            return { ...prev, remainingTime: 0, isActive: false };\n          }\n          \n          return newTimer;\n        });\n      }, 1000);\n    } else {\n      if (intervalRef.current) {\n        clearInterval(intervalRef.current);\n      }\n    }\n    \n    return () => {\n      if (intervalRef.current) {\n        clearInterval(intervalRef.current);\n      }\n    };\n  }, [timer.isActive, timer.isPaused, timer.remainingTime]);\n\n  // Initialize timer with consultation duration\n  useEffect(() => {\n    if (sessionData && typeof sessionData === 'object' && sessionData !== null && 'session' in sessionData) {\n      const session = (sessionData as any).session;\n      if (session && session.duration) {\n        const durationInSeconds = session.duration * 60; // Convert minutes to seconds\n        setTimer(prev => ({\n          ...prev,\n          totalDuration: durationInSeconds,\n          remainingTime: durationInSeconds\n        }));\n      }\n    }\n  }, [sessionData]);\n\n  const showTimeWarning = (message: string, variant: \"default\" | \"destructive\" = \"default\") => {\n    toast({\n      title: \"Time Alert\",\n      description: message,\n      variant,\n    });\n    \n    // Play warning sound\n    if (audioWarningRef.current) {\n      audioWarningRef.current.play();\n    }\n  };\n\n  const startTimer = () => {\n    setTimer(prev => ({ ...prev, isActive: true, isPaused: false }));\n    toast({\n      title: \"Consultation Started\",\n      description: \"Timer is now active\",\n    });\n  };\n\n  const pauseTimer = () => {\n    setTimer(prev => ({ ...prev, isPaused: !prev.isPaused }));\n    toast({\n      title: timer.isPaused ? \"Timer Resumed\" : \"Timer Paused\",\n      description: timer.isPaused ? \"Consultation timer resumed\" : \"Consultation timer paused\",\n    });\n  };\n\n  const extendTimer = (additionalMinutes: number) => {\n    const additionalSeconds = additionalMinutes * 60;\n    setTimer(prev => ({\n      ...prev,\n      totalDuration: prev.totalDuration + additionalSeconds,\n      remainingTime: prev.remainingTime + additionalSeconds\n    }));\n    toast({\n      title: \"Time Extended\",\n      description: `Added ${additionalMinutes} minutes to consultation`,\n    });\n  };\n\n  const endSession = () => {\n    setTimer(prev => ({ ...prev, isActive: false, isPaused: false }));\n    if (intervalRef.current) {\n      clearInterval(intervalRef.current);\n    }\n    \n    toast({\n      title: \"Consultation Ended\",\n      description: \"Thank you for your session with Astrologer Arup Shastri\",\n    });\n    \n    // Redirect to feedback page after 3 seconds\n    setTimeout(() => {\n      setLocation('/consultation-feedback');\n    }, 3000);\n  };\n\n  const formatTime = (seconds: number): string => {\n    const hours = Math.floor(seconds / 3600);\n    const minutes = Math.floor((seconds % 3600) / 60);\n    const secs = seconds % 60;\n    \n    if (hours > 0) {\n      return `${hours}:${minutes.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;\n    }\n    return `${minutes}:${secs.toString().padStart(2, '0')}`;\n  };\n\n  const getTimerColor = (): string => {\n    if (timer.remainingTime <= 60) return \"text-red-400\"; // Last minute\n    if (timer.remainingTime <= 300) return \"text-yellow-400\"; // Last 5 minutes\n    if (timer.remainingTime <= 900) return \"text-orange-400\"; // Last 15 minutes\n    return \"text-primary\"; // Normal\n  };\n\n  const getProgressPercentage = (): number => {\n    return ((timer.totalDuration - timer.remainingTime) / timer.totalDuration) * 100;\n  };\n\n  return (\n    <div className=\"min-h-screen cosmic-bg\">\n      <div className=\"container mx-auto px-4 py-8\">\n        <div className=\"max-w-6xl mx-auto space-y-6\">\n          \n          {/* Session Header */}\n          <GlassCard className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <h1 className=\"text-3xl font-bold neon-text mb-2\">Live Consultation</h1>\n                <p className=\"text-muted-foreground\">\n                  Session with Astrologer Arup Shastri • {(sessionData as any)?.session?.type || 'General Consultation'}\n                </p>\n              </div>\n              <div className=\"flex items-center space-x-4\">\n                <Badge variant=\"outline\" className=\"text-green-400 border-green-400\">\n                  <div className=\"w-2 h-2 bg-green-400 rounded-full mr-2 animate-pulse\" />\n                  LIVE\n                </Badge>\n                <Users className=\"w-5 h-5 text-muted-foreground\" />\n                <span className=\"text-sm text-muted-foreground\">2 participants</span>\n              </div>\n            </div>\n          </GlassCard>\n\n          <div className=\"grid grid-cols-1 lg:grid-cols-4 gap-6\">\n            \n            {/* Video/Audio Section */}\n            <div className=\"lg:col-span-3\">\n              <GlassCard className=\"p-6 h-96\">\n                <div className=\"relative w-full h-full bg-black/20 rounded-lg flex items-center justify-center\">\n                  {/* Video placeholder - integrate with your video service */}\n                  <div className=\"text-center\">\n                    <Video className=\"w-16 h-16 text-primary mx-auto mb-4\" />\n                    <p className=\"text-lg text-muted-foreground\">Video consultation area</p>\n                    <p className=\"text-sm text-muted-foreground\">Integrate with Jitsi Meet, Zoom, or your preferred video service</p>\n                  </div>\n                </div>\n                \n                {/* Media Controls */}\n                <div className=\"flex items-center justify-center mt-4 space-x-4\">\n                  <Button\n                    variant={mediaControls.audioEnabled ? \"default\" : \"destructive\"}\n                    size=\"lg\"\n                    onClick={() => setMediaControls(prev => ({ ...prev, audioEnabled: !prev.audioEnabled }))}\n                    className=\"rounded-full p-4\"\n                    data-testid=\"toggle-audio\"\n                  >\n                    {mediaControls.audioEnabled ? <Mic className=\"w-5 h-5\" /> : <MicOff className=\"w-5 h-5\" />}\n                  </Button>\n                  \n                  <Button\n                    variant={mediaControls.videoEnabled ? \"default\" : \"destructive\"}\n                    size=\"lg\"\n                    onClick={() => setMediaControls(prev => ({ ...prev, videoEnabled: !prev.videoEnabled }))}\n                    className=\"rounded-full p-4\"\n                    data-testid=\"toggle-video\"\n                  >\n                    {mediaControls.videoEnabled ? <Video className=\"w-5 h-5\" /> : <VideoOff className=\"w-5 h-5\" />}\n                  </Button>\n                  \n                  <Button\n                    variant=\"destructive\"\n                    size=\"lg\"\n                    onClick={endSession}\n                    className=\"rounded-full p-4\"\n                    data-testid=\"end-call\"\n                  >\n                    <Phone className=\"w-5 h-5 rotate-180\" />\n                  </Button>\n                </div>\n              </GlassCard>\n            </div>\n\n            {/* Timer & Controls Sidebar */}\n            <div className=\"space-y-6\">\n              \n              {/* Consultation Timer */}\n              <GlassCard className=\"p-6 text-center\">\n                <div className=\"flex items-center justify-center mb-4\">\n                  <Clock className=\"w-6 h-6 text-primary mr-2\" />\n                  <h3 className=\"text-lg font-semibold\">Session Timer</h3>\n                </div>\n                \n                {/* Timer Display */}\n                <div className={`text-4xl font-mono font-bold mb-4 ${getTimerColor()}`} data-testid=\"timer-display\">\n                  {formatTime(timer.remainingTime)}\n                </div>\n                \n                {/* Progress Bar */}\n                <div className=\"w-full bg-black/20 rounded-full h-2 mb-4\">\n                  <div \n                    className=\"bg-gradient-to-r from-primary to-pink-500 h-2 rounded-full transition-all duration-1000\"\n                    style={{ width: `${getProgressPercentage()}%` }}\n                  />\n                </div>\n                \n                <div className=\"text-sm text-muted-foreground mb-4\">\n                  {Math.floor(timer.remainingTime / 60)} minutes remaining\n                </div>\n\n                {/* Timer Controls */}\n                <div className=\"space-y-2\">\n                  {!timer.isActive ? (\n                    <NeonButton \n                      onClick={startTimer} \n                      className=\"w-full\"\n                      data-testid=\"start-timer\"\n                    >\n                      Start Session\n                    </NeonButton>\n                  ) : (\n                    <Button\n                      variant=\"outline\"\n                      onClick={pauseTimer}\n                      className=\"w-full\"\n                      data-testid=\"pause-timer\"\n                    >\n                      {timer.isPaused ? \"Resume\" : \"Pause\"}\n                    </Button>\n                  )}\n                  \n                  {/* Quick Extension Buttons */}\n                  <div className=\"grid grid-cols-2 gap-2 mt-2\">\n                    <Button\n                      variant=\"outline\" \n                      size=\"sm\"\n                      onClick={() => extendTimer(15)}\n                      data-testid=\"extend-15min\"\n                    >\n                      +15min\n                    </Button>\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\" \n                      onClick={() => extendTimer(30)}\n                      data-testid=\"extend-30min\"\n                    >\n                      +30min\n                    </Button>\n                  </div>\n                </div>\n              </GlassCard>\n\n              {/* Session Info */}\n              <GlassCard className=\"p-4\">\n                <h4 className=\"font-semibold mb-3\">Session Details</h4>\n                <div className=\"space-y-2 text-sm\">\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-muted-foreground\">Type:</span>\n                    <span className=\"capitalize\">{(sessionData as any)?.session?.type || 'General'}</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-muted-foreground\">Duration:</span>\n                    <span>{(sessionData as any)?.session?.duration || 60} minutes</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-muted-foreground\">Mode:</span>\n                    <span className=\"capitalize\">{(sessionData as any)?.session?.type || 'Video Call'}</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-muted-foreground\">Language:</span>\n                    <span>English</span>\n                  </div>\n                </div>\n              </GlassCard>\n\n              {/* Quick Chat */}\n              <GlassCard className=\"p-4\">\n                <div className=\"flex items-center justify-between mb-3\">\n                  <h4 className=\"font-semibold\">Quick Chat</h4>\n                  <MessageSquare className=\"w-4 h-4 text-primary\" />\n                </div>\n                <div className=\"text-sm text-muted-foreground\">\n                  Chat functionality can be integrated here for text communication during the session.\n                </div>\n              </GlassCard>\n            </div>\n          </div>\n\n          {/* Warning Messages */}\n          {timer.remainingTime <= 300 && timer.isActive && (\n            <GlassCard className=\"p-4 border-yellow-500/20 bg-yellow-500/5\">\n              <div className=\"flex items-center space-x-3\">\n                <AlertTriangle className=\"w-5 h-5 text-yellow-400\" />\n                <div>\n                  <h4 className=\"font-semibold text-yellow-400\">Time Running Low</h4>\n                  <p className=\"text-sm text-muted-foreground\">\n                    Please prepare to conclude your consultation.\n                  </p>\n                </div>\n              </div>\n            </GlassCard>\n          )}\n\n        </div>\n      </div>\n\n      {/* Audio element for warning sounds */}\n      <audio ref={audioWarningRef} preload=\"auto\">\n        <source src=\"data:audio/wav;base64,UklGRnoGAABXQVZFZm10IBAAAAABAAEAQB8AAEAfAAABAAgAZGF0YQoGAACBhYqFbF1fdJivrJBhNjVgodDbq2EcBj+a2/LDciUFLIHO8tiJNwgZaLvt559NEAxQp+PwtmMcBjiR1/LMeSwFJHfH8N2QQAoUXrTp66hVFApGn+L2um4gCaWqd1dqhY1uTUlQp9jkrIJaT1Bc\" />\n      </audio>\n\n    </div>\n  );\n}","size_bytes":15937},"server/consultation-session.ts":{"content":"import type { Express } from \"express\";\nimport { z } from \"zod\";\n\n// Schemas for consultation session management\nconst CreateSessionSchema = z.object({\n  consultationId: z.string(),\n  duration: z.number().min(15).max(180), // 15 minutes to 3 hours\n  type: z.enum(['video', 'audio', 'chat']),\n  scheduledTime: z.string().optional()\n});\n\nconst UpdateSessionTimerSchema = z.object({\n  sessionId: z.string(),\n  action: z.enum(['start', 'pause', 'resume', 'extend', 'end']),\n  extensionMinutes: z.number().optional()\n});\n\nconst SessionFeedbackSchema = z.object({\n  sessionId: z.string(),\n  rating: z.number().min(1).max(5),\n  experience: z.enum(['excellent', 'good', 'average', 'poor']),\n  helpfulness: z.enum(['very-helpful', 'somewhat-helpful', 'not-helpful']),\n  clarity: z.enum(['very-clear', 'mostly-clear', 'unclear']),\n  recommendation: z.enum(['yes', 'maybe', 'no']),\n  comments: z.string().optional(),\n  suggestions: z.string().optional(),\n  followUp: z.boolean().default(false)\n});\n\n// In-memory session storage (you can replace with database later)\ninterface ConsultationSession {\n  id: string;\n  consultationId: string;\n  userId: string;\n  astrologerId: string;\n  duration: number; // in minutes\n  type: 'video' | 'audio' | 'chat';\n  status: 'scheduled' | 'active' | 'paused' | 'completed' | 'cancelled';\n  startTime?: Date;\n  endTime?: Date;\n  pausedAt?: Date;\n  totalPausedTime: number; // in seconds\n  extensionsGranted: number; // additional minutes added\n  createdAt: Date;\n  scheduledTime?: Date;\n}\n\ninterface SessionTimer {\n  sessionId: string;\n  totalDuration: number; // in seconds\n  remainingTime: number; // in seconds\n  isActive: boolean;\n  isPaused: boolean;\n  startedAt?: Date;\n  pausedAt?: Date;\n  warnings: {\n    fifteenMin: boolean;\n    fiveMin: boolean;\n    oneMin: boolean;\n  };\n}\n\n// Storage for active sessions\nconst activeSessions = new Map<string, ConsultationSession>();\nconst activeTimers = new Map<string, SessionTimer>();\nconst sessionFeedbacks = new Map<string, any>();\n\nexport function registerConsultationSessionRoutes(app: Express) {\n  \n  // Get session data\n  app.get(\"/api/consultation-session/:sessionId\", async (req, res) => {\n    try {\n      const { sessionId } = req.params;\n      const session = activeSessions.get(sessionId);\n      \n      if (!session) {\n        return res.status(404).json({ error: \"Session not found\" });\n      }\n      \n      const timer = activeTimers.get(sessionId);\n      \n      res.json({\n        session,\n        timer,\n        message: \"Session data retrieved successfully\"\n      });\n    } catch (error) {\n      console.error(\"Error fetching session:\", error);\n      res.status(500).json({ error: \"Failed to fetch session data\" });\n    }\n  });\n\n  // Create new consultation session\n  app.post(\"/api/consultation-session/create\", async (req, res) => {\n    try {\n      const { consultationId, duration, type, scheduledTime } = req.body;\n      \n      // Generate session ID\n      const sessionId = `session_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n      \n      // Create session object\n      const session: ConsultationSession = {\n        id: sessionId,\n        consultationId,\n        userId: \"user_123\", // Get from authenticated user\n        astrologerId: \"astrologer_arup\",\n        duration,\n        type,\n        status: 'scheduled',\n        totalPausedTime: 0,\n        extensionsGranted: 0,\n        createdAt: new Date(),\n        scheduledTime: scheduledTime ? new Date(scheduledTime) : undefined\n      };\n      \n      // Create timer\n      const timer: SessionTimer = {\n        sessionId,\n        totalDuration: duration * 60, // Convert to seconds\n        remainingTime: duration * 60,\n        isActive: false,\n        isPaused: false,\n        warnings: {\n          fifteenMin: false,\n          fiveMin: false,\n          oneMin: false\n        }\n      };\n      \n      // Store session and timer\n      activeSessions.set(sessionId, session);\n      activeTimers.set(sessionId, timer);\n      \n      res.json({\n        sessionId,\n        session,\n        timer,\n        message: \"Consultation session created successfully\"\n      });\n    } catch (error) {\n      console.error(\"Error creating session:\", error);\n      res.status(500).json({ error: \"Failed to create consultation session\" });\n    }\n  });\n\n  // Update session timer (start, pause, extend, end)\n  app.post(\"/api/consultation-session/timer\", async (req, res) => {\n    try {\n      const { sessionId, action, extensionMinutes } = req.body;\n      \n      const session = activeSessions.get(sessionId);\n      const timer = activeTimers.get(sessionId);\n      \n      if (!session || !timer) {\n        return res.status(404).json({ error: \"Session not found\" });\n      }\n      \n      const now = new Date();\n      \n      switch (action) {\n        case 'start':\n          session.status = 'active';\n          session.startTime = now;\n          timer.isActive = true;\n          timer.isPaused = false;\n          timer.startedAt = now;\n          break;\n          \n        case 'pause':\n          session.status = 'paused';\n          session.pausedAt = now;\n          timer.isPaused = true;\n          timer.pausedAt = now;\n          break;\n          \n        case 'resume':\n          if (session.pausedAt && timer.pausedAt) {\n            const pausedDuration = now.getTime() - timer.pausedAt.getTime();\n            session.totalPausedTime += Math.floor(pausedDuration / 1000);\n          }\n          session.status = 'active';\n          session.pausedAt = undefined;\n          timer.isPaused = false;\n          timer.pausedAt = undefined;\n          break;\n          \n        case 'extend':\n          if (extensionMinutes && extensionMinutes > 0) {\n            const extensionSeconds = extensionMinutes * 60;\n            timer.totalDuration += extensionSeconds;\n            timer.remainingTime += extensionSeconds;\n            session.extensionsGranted += extensionMinutes;\n          }\n          break;\n          \n        case 'end':\n          session.status = 'completed';\n          session.endTime = now;\n          timer.isActive = false;\n          timer.isPaused = false;\n          timer.remainingTime = 0;\n          break;\n      }\n      \n      // Update stored data\n      activeSessions.set(sessionId, session);\n      activeTimers.set(sessionId, timer);\n      \n      res.json({\n        session,\n        timer,\n        message: `Session timer ${action}ed successfully`\n      });\n    } catch (error) {\n      console.error(\"Error updating session timer:\", error);\n      res.status(500).json({ error: \"Failed to update session timer\" });\n    }\n  });\n\n  // Submit consultation feedback\n  app.post(\"/api/consultation-feedback\", async (req, res) => {\n    try {\n      const feedbackData = req.body;\n      const { sessionId } = feedbackData;\n      \n      // Store feedback\n      sessionFeedbacks.set(sessionId, {\n        ...feedbackData,\n        submittedAt: new Date(),\n        id: `feedback_${Date.now()}`\n      });\n      \n      // Mark session as completed if not already\n      const session = activeSessions.get(sessionId);\n      if (session && session.status !== 'completed') {\n        session.status = 'completed';\n        session.endTime = new Date();\n        activeSessions.set(sessionId, session);\n      }\n      \n      res.json({\n        message: \"Feedback submitted successfully\",\n        feedbackId: `feedback_${Date.now()}`\n      });\n    } catch (error) {\n      console.error(\"Error submitting feedback:\", error);\n      res.status(500).json({ error: \"Failed to submit feedback\" });\n    }\n  });\n\n  // Get all active sessions (for admin)\n  app.get(\"/api/consultation-sessions/active\", async (req, res) => {\n    try {\n      const activeSessionsArray = Array.from(activeSessions.values()).filter(\n        session => ['scheduled', 'active', 'paused'].includes(session.status)\n      );\n      \n      const sessionsWithTimers = activeSessionsArray.map(session => ({\n        session,\n        timer: activeTimers.get(session.id)\n      }));\n      \n      res.json({\n        sessions: sessionsWithTimers,\n        count: sessionsWithTimers.length\n      });\n    } catch (error) {\n      console.error(\"Error fetching active sessions:\", error);\n      res.status(500).json({ error: \"Failed to fetch active sessions\" });\n    }\n  });\n\n  // Get session statistics\n  app.get(\"/api/consultation-sessions/stats\", async (req, res) => {\n    try {\n      const allSessions = Array.from(activeSessions.values());\n      const allFeedbacks = Array.from(sessionFeedbacks.values());\n      \n      const stats = {\n        totalSessions: allSessions.length,\n        activeSessions: allSessions.filter(s => s.status === 'active').length,\n        completedSessions: allSessions.filter(s => s.status === 'completed').length,\n        averageRating: allFeedbacks.length > 0 \n          ? allFeedbacks.reduce((sum, f) => sum + f.rating, 0) / allFeedbacks.length\n          : 0,\n        totalFeedbacks: allFeedbacks.length,\n        averageDuration: allSessions.length > 0\n          ? allSessions.reduce((sum, s) => sum + s.duration, 0) / allSessions.length\n          : 0\n      };\n      \n      res.json(stats);\n    } catch (error) {\n      console.error(\"Error fetching session stats:\", error);\n      res.status(500).json({ error: \"Failed to fetch session statistics\" });\n    }\n  });\n\n  // Delete session (cleanup)\n  app.delete(\"/api/consultation-session/:sessionId\", async (req, res) => {\n    try {\n      const { sessionId } = req.params;\n      \n      activeSessions.delete(sessionId);\n      activeTimers.delete(sessionId);\n      sessionFeedbacks.delete(sessionId);\n      \n      res.json({ message: \"Session deleted successfully\" });\n    } catch (error) {\n      console.error(\"Error deleting session:\", error);\n      res.status(500).json({ error: \"Failed to delete session\" });\n    }\n  });\n}\n\n// Export for use in main routes file\nexport { \n  activeSessions, \n  activeTimers, \n  sessionFeedbacks,\n  type ConsultationSession,\n  type SessionTimer\n};","size_bytes":9944},"client/src/pages/admin-working.tsx":{"content":"function AdminWorking() {\n  return (\n    <div style={{\n      minHeight: '100vh',\n      backgroundColor: '#000000',\n      color: '#ffffff',\n      padding: '80px 20px 20px 20px',\n      fontFamily: 'Arial, sans-serif'\n    }}>\n      <div style={{ maxWidth: '1200px', margin: '0 auto' }}>\n        \n        <div style={{ textAlign: 'center', marginBottom: '50px' }}>\n          <h1 style={{ \n            fontSize: '3rem', \n            color: '#ffd700', \n            marginBottom: '20px',\n            textShadow: '0 0 20px #ffd700'\n          }}>\n            🎯 ADMIN DASHBOARD IS WORKING! \n          </h1>\n          <p style={{ fontSize: '1.2rem', color: '#cccccc' }}>\n            Welcome to Jai Guru Astro Remedy Admin Panel\n          </p>\n        </div>\n\n        <div style={{ \n          display: 'grid', \n          gridTemplateColumns: 'repeat(auto-fit, minmax(250px, 1fr))', \n          gap: '20px',\n          marginBottom: '40px'\n        }}>\n          <div style={{\n            backgroundColor: '#1a1a1a',\n            padding: '30px',\n            borderRadius: '10px',\n            border: '2px solid #333',\n            textAlign: 'center'\n          }}>\n            <h3 style={{ color: '#00ff00', fontSize: '1.5rem', marginBottom: '10px' }}>Total Users</h3>\n            <p style={{ fontSize: '2.5rem', fontWeight: 'bold', color: '#ffffff' }}>156</p>\n            <p style={{ color: '#888', fontSize: '0.9rem' }}>+12% this month</p>\n          </div>\n\n          <div style={{\n            backgroundColor: '#1a1a1a',\n            padding: '30px',\n            borderRadius: '10px',\n            border: '2px solid #333',\n            textAlign: 'center'\n          }}>\n            <h3 style={{ color: '#00bfff', fontSize: '1.5rem', marginBottom: '10px' }}>Monthly Revenue</h3>\n            <p style={{ fontSize: '2.5rem', fontWeight: 'bold', color: '#ffffff' }}>₹48,500</p>\n            <p style={{ color: '#888', fontSize: '0.9rem' }}>+18% this month</p>\n          </div>\n\n          <div style={{\n            backgroundColor: '#1a1a1a',\n            padding: '30px',\n            borderRadius: '10px',\n            border: '2px solid #333',\n            textAlign: 'center'\n          }}>\n            <h3 style={{ color: '#ff6b6b', fontSize: '1.5rem', marginBottom: '10px' }}>Consultations</h3>\n            <p style={{ fontSize: '2.5rem', fontWeight: 'bold', color: '#ffffff' }}>89</p>\n            <p style={{ color: '#888', fontSize: '0.9rem' }}>+8% this month</p>\n          </div>\n\n          <div style={{\n            backgroundColor: '#1a1a1a',\n            padding: '30px',\n            borderRadius: '10px',\n            border: '2px solid #333',\n            textAlign: 'center'\n          }}>\n            <h3 style={{ color: '#ff9500', fontSize: '1.5rem', marginBottom: '10px' }}>Home Tuitions</h3>\n            <p style={{ fontSize: '2.5rem', fontWeight: 'bold', color: '#ffffff' }}>23</p>\n            <p style={{ color: '#888', fontSize: '0.9rem' }}>+15% this month</p>\n          </div>\n        </div>\n\n        <div style={{ \n          display: 'grid', \n          gridTemplateColumns: 'repeat(auto-fit, minmax(280px, 1fr))', \n          gap: '20px'\n        }}>\n          <div style={{\n            backgroundColor: '#1a1a1a',\n            padding: '25px',\n            borderRadius: '10px',\n            border: '2px solid #333',\n            cursor: 'pointer',\n            transition: 'all 0.3s ease'\n          }}\n          onMouseOver={(e) => e.target.style.backgroundColor = '#2a2a2a'}\n          onMouseOut={(e) => e.target.style.backgroundColor = '#1a1a1a'}\n          >\n            <h3 style={{ fontSize: '1.3rem', marginBottom: '10px', color: '#ffd700' }}>👥 Client Management</h3>\n            <p style={{ color: '#aaa', fontSize: '0.95rem' }}>Manage user accounts, profiles, and customer data</p>\n          </div>\n\n          <div style={{\n            backgroundColor: '#1a1a1a',\n            padding: '25px',\n            borderRadius: '10px',\n            border: '2px solid #333',\n            cursor: 'pointer',\n            transition: 'all 0.3s ease'\n          }}\n          onMouseOver={(e) => e.target.style.backgroundColor = '#2a2a2a'}\n          onMouseOut={(e) => e.target.style.backgroundColor = '#1a1a1a'}\n          >\n            <h3 style={{ fontSize: '1.3rem', marginBottom: '10px', color: '#ffd700' }}>📱 Consultations</h3>\n            <p style={{ color: '#aaa', fontSize: '0.95rem' }}>View and manage all consultation bookings</p>\n          </div>\n\n          <div style={{\n            backgroundColor: '#1a1a1a',\n            padding: '25px',\n            borderRadius: '10px',\n            border: '2px solid #333',\n            cursor: 'pointer',\n            transition: 'all 0.3s ease'\n          }}\n          onMouseOver={(e) => e.target.style.backgroundColor = '#2a2a2a'}\n          onMouseOut={(e) => e.target.style.backgroundColor = '#1a1a1a'}\n          >\n            <h3 style={{ fontSize: '1.3rem', marginBottom: '10px', color: '#ffd700' }}>📚 Course Management</h3>\n            <p style={{ color: '#aaa', fontSize: '0.95rem' }}>Create and manage astrology courses</p>\n          </div>\n\n          <div style={{\n            backgroundColor: '#1a1a1a',\n            padding: '25px',\n            borderRadius: '10px',\n            border: '2px solid #333',\n            cursor: 'pointer',\n            transition: 'all 0.3s ease'\n          }}\n          onMouseOver={(e) => e.target.style.backgroundColor = '#2a2a2a'}\n          onMouseOut={(e) => e.target.style.backgroundColor = '#1a1a1a'}\n          >\n            <h3 style={{ fontSize: '1.3rem', marginBottom: '10px', color: '#ffd700' }}>🛍️ Products & Orders</h3>\n            <p style={{ color: '#aaa', fontSize: '0.95rem' }}>Manage gemstones and remedy products</p>\n          </div>\n        </div>\n\n\n      </div>\n    </div>\n  );\n}\n\nexport default AdminWorking;","size_bytes":5815},"client/src/pages/admin/simple-dashboard.tsx":{"content":"export default function SimpleDashboard() {\n  return (\n    <div className=\"min-h-screen pt-24 pb-16 bg-black text-white\">\n      <div className=\"max-w-7xl mx-auto px-4 py-8\">\n        <div className=\"mb-8\">\n          <h1 className=\"text-4xl font-bold text-yellow-400 mb-2\">\n            Admin Dashboard\n          </h1>\n          <p className=\"text-gray-300\">\n            Welcome to the admin dashboard for Jai Guru Astro Remedy\n          </p>\n        </div>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\n          <div className=\"bg-gray-800 p-6 rounded-lg\">\n            <h3 className=\"text-lg font-semibold text-yellow-400 mb-2\">Total Users</h3>\n            <p className=\"text-3xl font-bold\">156</p>\n          </div>\n          \n          <div className=\"bg-gray-800 p-6 rounded-lg\">\n            <h3 className=\"text-lg font-semibold text-green-400 mb-2\">Monthly Revenue</h3>\n            <p className=\"text-3xl font-bold\">₹48,500</p>\n          </div>\n          \n          <div className=\"bg-gray-800 p-6 rounded-lg\">\n            <h3 className=\"text-lg font-semibold text-purple-400 mb-2\">Consultations</h3>\n            <p className=\"text-3xl font-bold\">89</p>\n          </div>\n          \n          <div className=\"bg-gray-800 p-6 rounded-lg\">\n            <h3 className=\"text-lg font-semibold text-orange-400 mb-2\">Home Tuitions</h3>\n            <p className=\"text-3xl font-bold\">23</p>\n          </div>\n        </div>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n          <div className=\"bg-gray-800 p-6 rounded-lg cursor-pointer hover:bg-gray-700 transition-all\">\n            <h3 className=\"text-lg font-semibold mb-2\">Client Management</h3>\n            <p className=\"text-sm text-gray-400\">Manage user accounts and profiles</p>\n          </div>\n          \n          <div className=\"bg-gray-800 p-6 rounded-lg cursor-pointer hover:bg-gray-700 transition-all\">\n            <h3 className=\"text-lg font-semibold mb-2\">Consultations</h3>\n            <p className=\"text-sm text-gray-400\">View and manage consultations</p>\n          </div>\n          \n          <div className=\"bg-gray-800 p-6 rounded-lg cursor-pointer hover:bg-gray-700 transition-all\">\n            <h3 className=\"text-lg font-semibold mb-2\">Courses</h3>\n            <p className=\"text-sm text-gray-400\">Manage online courses</p>\n          </div>\n          \n          <div className=\"bg-gray-800 p-6 rounded-lg cursor-pointer hover:bg-gray-700 transition-all\">\n            <h3 className=\"text-lg font-semibold mb-2\">Products</h3>\n            <p className=\"text-sm text-gray-400\">Manage product catalog</p>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":2703},"client/src/pages/test-admin.tsx":{"content":"export default function TestAdmin() {\n  return (\n    <div style={{ \n      minHeight: '100vh', \n      padding: '100px 20px', \n      backgroundColor: 'black', \n      color: 'white',\n      textAlign: 'center'\n    }}>\n      <h1 style={{ fontSize: '48px', color: 'yellow', marginBottom: '20px' }}>\n        ✅ ADMIN DASHBOARD WORKING!\n      </h1>\n      <p style={{ fontSize: '20px', color: 'white' }}>\n        This proves the routing is working correctly.\n      </p>\n      <div style={{ marginTop: '40px' }}>\n        <div style={{ \n          display: 'inline-block', \n          padding: '20px', \n          backgroundColor: '#333', \n          margin: '10px',\n          borderRadius: '8px'\n        }}>\n          <h3 style={{ color: 'lime' }}>Total Users: 156</h3>\n        </div>\n        <div style={{ \n          display: 'inline-block', \n          padding: '20px', \n          backgroundColor: '#333', \n          margin: '10px',\n          borderRadius: '8px'\n        }}>\n          <h3 style={{ color: 'cyan' }}>Revenue: ₹48,500</h3>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":1072},"client/src/contexts/LanguageContext.tsx":{"content":"import React, { createContext, useContext, useState, ReactNode } from 'react';\nimport { translateText, getMyMemoryLangCode } from '../utils/autoTranslate';\n\ntype Language = 'en' | 'hi' | 'bn' | 'te' | 'mr' | 'ta' | 'gu' | 'kn' | 'or' | 'pa' | 'ml' | 'as' | 'ur' | 'sa' | 'es' | 'fr' | 'de' | 'it' | 'pt' | 'ru' | 'zh' | 'ja' | 'ko' | 'ar' | 'nl' | 'sv' | 'no' | 'da' | 'fi' | 'pl' | 'cs' | 'hu' | 'ro' | 'el' | 'tr' | 'fa' | 'he' | 'th' | 'vi' | 'id' | 'ms' | 'fil' | 'sw' | 'af' | 'uk' | 'bg' | 'hr' | 'sk' | 'sl' | 'et' | 'lv' | 'lt';\n\ninterface LanguageContextType {\n  currentLanguage: Language;\n  setLanguage: (lang: Language) => void;\n  t: (key: string) => string;\n}\n\nconst LanguageContext = createContext<LanguageContextType | undefined>(undefined);\n\n// Translation data\nconst translations = {\n  en: {\n    // Navigation\n    home: \"Home\",\n    bookConsultation: \"Book Consultation\",\n    courses: \"Courses\",\n    homeTuition: \"Home Tuition\", \n    products: \"Products\",\n    adminDashboard: \"Admin Dashboard\",\n    login: \"Login\",\n    logout: \"Logout\",\n    \n    // Hero Section\n    heroTitle: \"Discover Your Cosmic Destiny\",\n    heroSubtitle: \"Unlock the secrets of the universe with expert Vedic astrology consultations by Astrologer Arup Shastri - 18+ years of transformative guidance\",\n    bookReadingNow: \"Book Your Reading Now\",\n    exploreCourses: \"Explore Courses\",\n    \n    // Profile Section\n    meetAstrologer: \"Meet Astrologer Arup Shastri\",\n    astrologerDescription: \"With over 18 years of dedicated practice in Vedic astrology, Astrologer Arup Shastri has guided thousands of souls towards clarity, purpose, and cosmic alignment.\",\n    scheduleConsultation: \"Schedule Personal Consultation\",\n    \n    // Expertise Areas\n    vedicAstrology: \"Vedic Astrology\",\n    vedicAstrologyDesc: \"Traditional birth chart analysis\",\n    palmistry: \"Palmistry\", \n    palmistryDesc: \"Hand reading & life insights\",\n    numerology: \"Numerology\",\n    numerologyDesc: \"Number patterns & destiny\",\n    cosmicRemedies: \"Cosmic Remedies\",\n    cosmicRemediesDesc: \"Healing solutions & guidance\",\n    vedicVastu: \"Vedic Vastu Shastra\",\n    vedicVastuDesc: \"Science of construction & harmony\",\n    yogaMeditation: \"Yoga & Meditation\",\n    yogaMeditationDesc: \"Pranayam & spiritual practices\",\n    \n    // Services Section\n    consultationServices: \"Consultation Services\",\n    servicesDescription: \"Choose from multiple consultation formats designed to provide you with personalized cosmic guidance\",\n    \n    // Service Types\n    videoCall: \"Video Call\",\n    audioCall: \"Audio Call\", \n    chatSession: \"Chat Session\",\n    inPerson: \"In-Person\",\n    homeService: \"Home Service\",\n    \n    // Service Descriptions\n    videoCallDesc: \"Face-to-face consultation via secure video call using Jitsi Meet\",\n    audioCallDesc: \"Voice-only consultation for focused spiritual guidance and clarity\",\n    chatSessionDesc: \"Text-based consultation through secure in-app messaging system\",\n    inPersonDesc: \"Traditional face-to-face consultations at designated locations\",\n    homeServiceDesc: \"Premium consultation at your home with personalized rituals\",\n    \n    // Service Buttons\n    bookVideoSession: \"Book Video Session\",\n    bookAudioSession: \"Book Audio Session\", \n    startChatSession: \"Start Chat Session\",\n    bookInPerson: \"Book In-Person\",\n    bookHomeService: \"Book Home Service\",\n    \n    // Additional Services\n    allServices: \"All Services\",\n    allServicesDescription: \"Comprehensive astrological solutions designed to guide you on your cosmic journey\",\n    liveConsultations: \"Live Consultations\",\n    liveConsultationsDesc: \"Video, Audio, Chat & In-Person sessions for personalized cosmic guidance\",\n    vedicAstrologyCourses: \"Vedic Astrology Courses\",\n    vedicAstrologyCoursesDesc: \"Master ancient wisdom through comprehensive online and offline learning programs\",\n    startingFrom: \"Starting from\",\n    beginnerToExpert: \"Beginner to Expert\",\n    \n    // Testimonials & CTA\n    readyToDiscover: \"Ready to Discover Your Cosmic Path?\",\n    bookPersonalizedConsultation: \"Book your personalized consultation today and unlock the mysteries of your destiny with expert guidance from Astrologer Arup Shastri.\",\n    discoverGuidance: \"Discover how Astrologer Arup Shastri's cosmic guidance has transformed lives across the globe\",\n    quickBooking: \"Quick Booking\",\n    \n    // Service full descriptions\n    vedicAstrologyFullDesc: \"Traditional birth chart analysis with personalized cosmic insights and remedial guidance\",\n    palmistryFullDesc: \"Palmistry, Numerology, and birth chart analysis for deep spiritual insights\", \n    numerologyFullDesc: \"Sacred number patterns and destiny analysis for life path clarity\",\n    cosmicRemediesFullDesc: \"Authentic gemstones, yantras, and spiritual products for positive energy transformation\",\n    vedicVastuFullDesc: \"Science of construction and architectural harmony for positive living spaces\",\n    yogaMeditationFullDesc: \"Pranayam breathing techniques and spiritual practices for inner peace and balance\",\n    homeServiceFullDesc: \"Premium consultation at your home with personalized rituals and sacred ceremonies\",\n    \n    // Testimonial names (keeping original)\n    priyaSharma: \"Priya Sharma\",\n    michaelJohnson: \"Michael Johnson\", \n    sarahMitchell: \"Sarah Mitchell\",\n    \n    // Stats\n    yearsExperience: \"Years Experience\",\n    satisfiedClients: \"Satisfied Clients\",\n    countriesServed: \"Countries Served\",\n    \n    \n    // Common\n    welcome: \"Welcome\",\n    loading: \"Loading...\",\n    error: \"Error\",\n    success: \"Success\",\n  },\n  hi: {\n    // Navigation - Hindi\n    home: \"होम\",\n    bookConsultation: \"परामर्श बुक करें\",\n    courses: \"पाठ्यक्रम\",\n    homeTuition: \"होम ट्यूशन\",\n    products: \"उत्पाद\",\n    adminDashboard: \"एडमिन डैशबोर्ड\",\n    login: \"लॉगिन\",\n    logout: \"लॉगआउट\",\n    \n    // Hero Section - Hindi\n    heroTitle: \"अपनी ब्रह्मांडीय नियति खोजें\",\n    heroSubtitle: \"ज्योतिषी अरुप शास्त्री के विशेषज्ञ वैदिक ज्योतिष परामर्श के साथ ब्रह्मांड के रहस्यों को अनलॉक करें - 18+ साल का परिवर्तनकारी मार्गदर्शन\",\n    bookReadingNow: \"अपना रीडिंग अभी बुक करें\",\n    exploreCourses: \"पाठ्यक्रम खोजें\",\n    \n    // Stats - Hindi\n    yearsExperience: \"वर्षों का अनुभव\",\n    satisfiedClients: \"संतुष्ट ग्राहक\",\n    countriesServed: \"देश सेवित\",\n    \n    // About Section - Hindi\n    meetAstrologer: \"ज्योतिषी अरुप शास्त्री से मिलें\",\n    \n    // Common - Hindi\n    welcome: \"स्वागत\",\n    loading: \"लोड हो रहा है...\",\n    error: \"त्रुटि\",\n    success: \"सफलता\",\n  },\n  bn: {\n    // Navigation - Bengali\n    home: \"হোম\",\n    bookConsultation: \"পরামর্শ বুক করুন\",\n    courses: \"কোর্স\",\n    homeTuition: \"হোম টিউশন\",\n    products: \"পণ্য\",\n    adminDashboard: \"অ্যাডমিন ড্যাশবোর্ড\",\n    login: \"লগইন\",\n    logout: \"লগআউট\",\n    \n    // Hero Section - Bengali\n    heroTitle: \"আপনার মহাজাগতিক নিয়তি আবিষ্কার করুন\",\n    heroSubtitle: \"জ্যোতিষী অরুপ শাস্ত্রীর বিশেষজ্ঞ বৈদিক জ্যোতিষ পরামর্শের সাথে মহাবিশ্বের রহস্য উন্মোচন করুন - 18+ বছরের রূপান্তরকারী নির্দেশনা\",\n    bookReadingNow: \"এখনই আপনার রিডিং বুক করুন\",\n    exploreCourses: \"কোর্স অন্বেষণ করুন\",\n    \n    // Stats - Bengali\n    yearsExperience: \"বছরের অভিজ্ঞতা\",\n    satisfiedClients: \"সন্তুষ্ট ক্লায়েন্ট\",\n    countriesServed: \"দেশ পরিবেশিত\",\n    \n    // Profile Section - Bengali\n    meetAstrologer: \"জ্যোতিষী অরুপ শাস্ত্রীর সাথে দেখা করুন\",\n    astrologerDescription: \"বৈদিক জ্যোতিষশাস্ত্রে 18 বছরের বেশি নিবেদিত অনুশীলনের সাথে, জ্যোতিষী অরুপ শাস্ত্রী হাজার হাজার আত্মাকে স্পষ্টতা, উদ্দেশ্য এবং মহাজাগতিক সংযোগের দিকে পরিচালিত করেছেন।\",\n    scheduleConsultation: \"ব্যক্তিগত পরামর্শের সময়সূচী\",\n    \n    // Price ranges\n    under1000: \"১,০০০ টাকার নীচে\",\n    from1000To5000: \"১,০০০ - ৥,০০০ টাকা\",\n    over5000: \"৥,০০০ টাকার উপরে\",\n    productsBn: \"পণ্যগুলি\",\n    \n    // Expertise Areas - Bengali  \n    vedicAstrology: \"বৈদিক জ্যোতিষশাস্ত্র\",\n    vedicAstrologyDesc: \"ঐতিহ্যবাহী জন্ম তালিকা বিশ্লেষণ\",\n    palmistry: \"হস্তরেখা বিদ্যা\",\n    palmistryDesc: \"হাত পড়া এবং জীবনের অন্তর্দৃষ্টি\",\n    numerology: \"সংখ্যাতত্ত্ব\",\n    numerologyDesc: \"সংখ্যার নিদর্শন এবং নিয়তি\",\n    cosmicRemedies: \"মহাজাগতিক প্রতিকার\",\n    cosmicRemediesDesc: \"নিরাময় সমাধান এবং নির্দেশনা\",\n    vedicVastu: \"বৈদিক বাস্তু শাস্ত্র\",\n    vedicVastuDesc: \"নির্মাণ ও সামঞ্জস্যের বিজ্ঞান\",\n    yogaMeditation: \"যোগব্যায়াম ও ধ্যান\",\n    yogaMeditationDesc: \"প্রাণায়াম এবং আধ্যাত্মিক অনুশীলন\",\n    \n    // Services Section - Bengali\n    consultationServices: \"পরামর্শ সেবা\",\n    servicesDescription: \"ব্যক্তিগতকৃত মহাজাগতিক নির্দেশনা প্রদানের জন্য ডিজাইন করা একাধিক পরামর্শ ফরম্যাট থেকে বেছে নিন\",\n    \n    // Service Types - Bengali\n    videoCall: \"ভিডিও কল\",\n    audioCall: \"অডিও কল\",\n    chatSession: \"চ্যাট সেশন\", \n    inPerson: \"ব্যক্তিগতভাবে\",\n    homeService: \"বাড়ির সেবা\",\n    \n    // Service Descriptions - Bengali\n    videoCallDesc: \"জিটসি মিট ব্যবহার করে নিরাপদ ভিডিও কলের মাধ্যমে মুখোমুখি পরামর্শ\",\n    audioCallDesc: \"কেন্দ্রীভূত আধ্যাত্মিক নির্দেশনা এবং স্পষ্টতার জন্য শুধুমাত্র ভয়েস পরামর্শ\",\n    chatSessionDesc: \"নিরাপদ ইন-অ্যাপ মেসেজিং সিস্টেমের মাধ্যমে টেক্সট-ভিত্তিক পরামর্শ\",\n    inPersonDesc: \"মনোনীত স্থানে ঐতিহ্যবাহী মুখোমুখি পরামর্শ\",\n    homeServiceDesc: \"ব্যক্তিগতকৃত আচার-অনুষ্ঠান সহ আপনার বাড়িতে প্রিমিয়াম পরামর্শ\",\n    \n    // Service Buttons - Bengali\n    bookVideoSession: \"ভিডিও সেশন বুক করুন\",\n    bookAudioSession: \"অডিও সেশন বুক করুন\",\n    startChatSession: \"চ্যাট সেশন শুরু করুন\", \n    bookInPerson: \"ব্যক্তিগত বুকিং\",\n    bookHomeService: \"হোম সার্ভিস বুক করুন\",\n    \n    // Additional Services - Bengali\n    allServices: \"সমস্ত সেবা\",\n    \n    // Course specific translations\n    astrologyFundamentals: \"জ্যোতিষশাস্ত্রের মৌলিক বিষয়\",\n    perfectForBeginners: \"নতুনদের জন্য নিখুঁত। বৈদিক জ্যোতিষশাস্ত্র, রাশিচক্র, ঘর এবং গ্রহের প্রভাবের মূল বিষয়গুলি শিখুন।\",\n    traditionalWisdom: \"ঐতিহ্যগত জ্ঞান\",\n    sacredHomeVisits: \"পবিত্র বাড়িতে ভিজিট\",\n    beginner: \"সাধারণ\",\n    intermediate: \"মধ্যম\",\n    expert: \"দক্ষ\",\n    learnMore: \"আরও জানুন\",\n    yogaMeditationBn: \"যোগ ও ধ্যান\",\n    \n    // Testimonials\n    priyaSharma: \"প্রিয়া শর্মা\",\n    michaelJohnson: \"মাইকেল জনসন\",\n    sarahMitchell: \"সারা মিচেল\",\n    testimonial1: \"জ্যোতিষী অরুপ শাস্ত্রীর অন্তর্দৃষ্টি আমার জীবনের দৃষ্টিভঙ্গি সম্পূর্ণভাবে পরিবর্তন করেছে। তার নির্ভুল ভবিষ্যদ্বাণী এবং প্রতিকার আমাকে আমার কর্মজীবনের পথে স্পষ্টতা খুঁজে পেতে সাহায্য করেছে। অত্যন্ত সুপারিশযোগ্য!\",\n    testimonial2: \"আশ্চর্যজনক অভিজ্ঞতা! ভিডিও পরামর্শ ছিল স্ফটিক স্বচ্ছ এবং অরুপের জ্ঞান গভীর। রত্ন পাথরের সুপারিশগুলি আমার সম্পর্কের জন্য বিস্ময়কর কাজ করেছে।\",\n    testimonial3: \"জ্যোতিষশাস্ত্র কোর্সটি অবিশ্বাস্যভাবে ব্যাপক ছিল। অরুপের শিক্ষাদানের ধরন স্পষ্ট এবং ব্যবহারিক অনুশীলন সত্যিই আমাকে গভীরভাবে ধারণাগুলি বুঝতে সাহায্য করেছে।\",\n    \n    // Location names in Bengali script\n    mumbaiIndia: \"মুম্বাই, ভারত\",\n    newYorkUSA: \"নিউ ইয়র্ক, যুক্তরাষ্ট্র\",\n    londonUK: \"লন্দন, যুক্তরাজ্য\",\n    allServicesDescription: \"আপনার মহাজাগতিক যাত্রায় গাইড করার জন্য ডিজাইন করা ব্যাপক জ্যোতিষশাস্ত্রীয় সমাধান\",\n    liveConsultations: \"লাইভ পরামর্শ\",\n    liveConsultationsDesc: \"ব্যক্তিগত মহাজাগতিক নির্দেশনার জন্য ভিডিও, অডিও, চ্যাট এবং ব্যক্তিগত সেশন\",\n    vedicAstrologyCourses: \"বৈদিক জ্যোতিষশাস্ত্র কোর্স\",\n    vedicAstrologyCoursesDesc: \"ব্যাপক অনলাইন এবং অফলাইন শিক্ষা প্রোগ্রামের মাধ্যমে প্রাচীন জ্ঞানে দক্ষতা অর্জন করুন\",\n    startingFrom: \"থেকে শুরু\",\n    beginnerToExpert: \"শিক্ষানবিস থেকে বিশেষজ্ঞ\",\n    \n    // Common UI elements\n    select: \"নির্বাচন করুন\",\n    language: \"ভাষা\",\n    english: \"ইংরেজি\",\n    bengali: \"বাংলা\",\n    profile: \"প্রোফাইল\",\n    logoutBn: \"লগআউট\",\n    menu: \"মেনু\",\n    close: \"বন্ধ করুন\",\n    \n    // Form elements\n    submit: \"জমা দিন\",\n    cancel: \"বাতিল\",\n    save: \"সংরক্ষণ\",\n    edit: \"সম্পাদনা\",\n    delete: \"মুছে ফেলুন\",\n    name: \"নাম\",\n    email: \"ইমেইল\",\n    phone: \"ফোন\",\n    message: \"বার্তা\",\n    \n    // Product categories\n    allProducts: \"সকল পণ্য\",\n    gemstones: \"রত্ন পাথর\",\n    sacredYantras: \"পবিত্র যন্ত্র\",\n    spiritualMalas: \"আধ্যাত্মিক মালা\",\n    astrologyBooks: \"জ্যোতিষশাস্ত্রের বই\",\n    remedyKits: \"প্রতিকার কিট\",\n    \n    // Product descriptions\n    browseAllCosmicRemedies: \"আমাদের সকল মহাজাগতিক প্রতিকার দেখুন\",\n    authenticCertifiedGemstones: \"গ্রহের প্রতিকারের জন্য প্রামাণিক প্রমাণিত রত্ন পাথর\",\n    energizedGeometricPatterns: \"সমৃদ্ধির জন্য শক্তিশালী জ্যামিতিক নমুনা\",\n    rudrakshaGemstoneForMeditation: \"ধ্যানের জন্য রুদ্রাক্ষ এবং রত্ন মালা\",\n    comprehensiveAncientWisdom: \"ব্যাপক গাইড এবং প্রাচীন জ্ঞানের গ্রন্থ\",\n    completePersonalizedRemedySolutions: \"সম্পূর্ণ ব্যক্তিগতকৃত প্রতিকার সমাধাঢ\",\n    \n    // Search and filter placeholders\n    searchProductsByName: \"নাম বা বর্ণনা দিয়ে পণ্য অনুসন্ধান করুন...\",\n    searchCoursesByTitle: \"শীর্ষক বা বর্ণনা দিয়ে কোর্স অনুসন্ধান করুন...\",\n    category: \"বিভাগ\",\n    price: \"দাম\",\n    level: \"স্তর\",\n    allLevels: \"সকল স্তর\",\n    allPrices: \"সকল দাম\",\n    allLanguages: \"সকল ভাষা\",\n    selectTime: \"সময় নির্বাচন করুন\",\n    \n    // Status messages\n    noProductsFound: \"কোন পণ্য পাওয়া যায়নি\",\n    noCoursesFound: \"কোন কোর্স পাওয়া যায়নি\",\n    loginRequired: \"লগইন প্রয়োজন\",\n    tryAdjustingSearchCriteria: \"আপনার অনুসন্ধানের মাপদণ্ড সমন্বয় করার চেষ্টা করুন\",\n    productsAvailableSoon: \"পণ্য খুব শীঘ্রই উপলব্ধ হবে\",\n    coursesAvailableSoon: \"কোর্স খুব শীঘ্রই উপলব্ধ হবে\",\n    \n    // Button text\n    enrollNow: \"এখনই ভর্তি হন\",\n    enrolling: \"ভর্তি হচ্ছে...\",\n    bookConsultationNow: \"এখনই পরামর্শ বুক করুন\",\n    viewAllCourses: \"সকল কোর্স দেখুন\",\n    browseAllProducts: \"সকল পণ্য ব্রাউজ করুন\",\n    \n    // Statistics\n    totalCourses: \"মোট কোর্স\",\n    activeStudents: \"সক্রিয় ছাত্রছাত্রী\",\n    averageRating: \"গড় রেটিং\",\n    hoursOfContent: \"ঘন্টা বিষয়বস্তু\",\n    \n    // Error messages\n    enrollmentFailed: \"নামনিবন্ধন ব্যর্থ\",\n    failedToEnrollInCourse: \"কোর্সে নামনিবন্ধন ব্যর্থ হয়েছে\",\n    pleaseLoginToEnrollInCourses: \"কোর্সে নামনিবন্ধনের জন্য অনুগ্রহ করে লগইন করুন\",\n    \n    // English labels for SelectItems\n    englishBn: \"ইংরেজি\",\n    hindiBn: \"হিন্দি\",\n    \n    // Testimonials & CTA - Bengali\n    readyToDiscover: \"আপনার মহাজাগতিক পথ আবিষ্কার করতে প্রস্তুত?\",\n    bookPersonalizedConsultation: \"আজই আপনার ব্যক্তিগতকৃত পরামর্শ বুক করুন এবং জ্যোতিষী অরুপ শাস্ত্রীর বিশেষজ্ঞ নির্দেশনার সাথে আপনার নিয়তির রহস্য উন্মোচন করুন।\",\n    discoverGuidance: \"আবিষ্কার করুন কীভাবে জ্যোতিষী অরুপ শাস্ত্রীর মহাজাগতিক নির্দেশনা বিশ্বব্যাপী জীবনকে রূপান্তরিত করেছে\",\n    quickBooking: \"দ্রুত বুকিং\",\n    \n    // Service full descriptions - Bengali\n    vedicAstrologyFullDesc: \"ব্যক্তিগতকৃত মহাজাগতিক অন্তর্দৃষ্টি এবং প্রতিকারমূলক নির্দেশনা সহ ঐতিহ্যগত জন্ম চার্ট বিশ্লেষণ\",\n    palmistryFullDesc: \"গভীর আধ্যাত্মিক অন্তর্দৃষ্টির জন্য হস্তরেখা, সংখ্যাতত্ত্ব এবং জন্ম চার্ট বিশ্লেষণ\", \n    numerologyFullDesc: \"জীবনের পথের স্বচ্ছতার জন্য পবিত্র সংখ্যার নিদর্শন এবং ভাগ্য বিশ্লেষণ\",\n    cosmicRemediesFullDesc: \"ইতিবাচক শক্তি রূপান্তরের জন্য প্রামাণিক রত্ন, যন্ত্র এবং আধ্যাত্মিক পণ্য\",\n    vedicVastuFullDesc: \"ইতিবাচক জীবনযাত্রার স্থানের জন্য নির্মাণ এবং স্থাপত্য সামঞ্জস্যের বিজ্ঞান\",\n    yogaMeditationFullDesc: \"অভ্যন্তরীণ শান্তি এবং ভারসাম্যের জন্য প্রাণায়াম শ্বাস কৌশল এবং আধ্যাত্মিক অনুশীলন\",\n    homeServiceFullDesc: \"ব্যক্তিগত আচার-অনুষ্ঠান এবং পবিত্র অনুষ্ঠান সহ আপনার বাড়িতে প্রিমিয়াম পরামর্শ\",\n    \n    // Testimonial names (keeping original)  \n    priyaSharmaBn: \"প্রিয়া শর্মা\",\n    michaelJohnsonBn: \"মাইকেল জনসন\", \n    sarahMitchellBn: \"সারাহ মিচেল\",\n    \n    // Common - Bengali\n    welcome: \"স্বাগতম\",\n    loading: \"লোড হচ্ছে...\",\n    error: \"ত্রুটি\",\n    success: \"সফল\",\n  },\n  es: {\n    // Navigation - Spanish\n    home: \"Inicio\",\n    bookConsultation: \"Reservar Consulta\",\n    courses: \"Cursos\",\n    homeTuition: \"Tutoría en Casa\",\n    products: \"Productos\",\n    adminDashboard: \"Panel de Administrador\",\n    login: \"Iniciar Sesión\",\n    logout: \"Cerrar Sesión\",\n    \n    // Hero Section - Spanish\n    heroTitle: \"Descubre Tu Destino Cósmico\",\n    heroSubtitle: \"Desbloquea los secretos del universo con consultas expertas de astrología védica por el Astrólogo Arup Shastri - 18+ años de guía transformadora\",\n    bookReadingNow: \"Reserva Tu Lectura Ahora\",\n    exploreCourses: \"Explorar Cursos\",\n    \n    // Stats - Spanish\n    yearsExperience: \"Años de Experiencia\",\n    satisfiedClients: \"Clientes Satisfechos\",\n    countriesServed: \"Países Atendidos\",\n    \n    // Profile Section - Spanish\n    meetAstrologer: \"Conoce al Astrólogo Arup Shastri\",\n    astrologerDescription: \"Con más de 18 años de práctica dedicada en astrología védica, el Astrólogo Arup Shastri ha guiado a miles de almas hacia la claridad, propósito y alineación cósmica.\",\n    scheduleConsultation: \"Programar Consulta Personal\",\n    \n    // Expertise Areas - Spanish\n    vedicAstrology: \"Astrología Védica\",\n    vedicAstrologyDesc: \"Análisis tradicional de carta natal\",\n    palmistry: \"Quiromancia\",\n    palmistryDesc: \"Lectura de manos e insights de vida\",\n    numerology: \"Numerología\",\n    numerologyDesc: \"Patrones numéricos y destino\",\n    cosmicRemedies: \"Remedios Cósmicos\",\n    cosmicRemediesDesc: \"Soluciones curativas y orientación\",\n    vedicVastu: \"Vedic Vastu Shastra\",\n    vedicVastuDesc: \"Ciencia de construcción y armonía\",\n    yogaMeditation: \"Yoga y Meditación\",\n    yogaMeditationDesc: \"Pranayam y prácticas espirituales\",\n    \n    // Services Section - Spanish\n    consultationServices: \"Servicios de Consulta\",\n    servicesDescription: \"Elige entre múltiples formatos de consulta diseñados para brindarte orientación cósmica personalizada\",\n    \n    // Service Types - Spanish\n    videoCall: \"Videollamada\",\n    audioCall: \"Llamada de Audio\",\n    chatSession: \"Sesión de Chat\",\n    inPerson: \"En Persona\",\n    homeService: \"Servicio a Domicilio\",\n    \n    // Service Descriptions - Spanish\n    videoCallDesc: \"Consulta cara a cara a través de videollamada segura usando Jitsi Meet\",\n    audioCallDesc: \"Consulta solo de voz para orientación espiritual enfocada y claridad\",\n    chatSessionDesc: \"Consulta basada en texto a través del sistema de mensajería segura en la aplicación\",\n    inPersonDesc: \"Consultas tradicionales cara a cara en ubicaciones designadas\",\n    homeServiceDesc: \"Consulta premium en tu hogar con rituales personalizados\",\n    \n    // Service Buttons - Spanish\n    bookVideoSession: \"Reservar Sesión de Video\",\n    bookAudioSession: \"Reservar Sesión de Audio\",\n    startChatSession: \"Iniciar Sesión de Chat\",\n    bookInPerson: \"Reservar En Persona\",\n    bookHomeService: \"Reservar Servicio a Domicilio\",\n    \n    // Additional Services - Spanish\n    allServices: \"Todos los Servicios\",\n    allServicesDescription: \"Soluciones astrológicas integrales diseñadas para guiarte en tu viaje cósmico\",\n    liveConsultations: \"Consultas en Vivo\",\n    liveConsultationsDesc: \"Sesiones de Video, Audio, Chat y En Persona para orientación cósmica personalizada\",\n    vedicAstrologyCourses: \"Cursos de Astrología Védica\",\n    vedicAstrologyCoursesDesc: \"Domina la sabiduría antigua a través de programas de aprendizaje completos en línea y fuera de línea\",\n    startingFrom: \"A partir de\",\n    beginnerToExpert: \"De Principiante a Experto\",\n    \n    // Common - Spanish\n    welcome: \"Bienvenido\",\n    loading: \"Cargando...\",\n    error: \"Error\",\n    success: \"Éxito\",\n  },\n  fr: {\n    // Navigation - French\n    home: \"Accueil\",\n    bookConsultation: \"Réserver une Consultation\",\n    courses: \"Cours\",\n    homeTuition: \"Cours à Domicile\",\n    products: \"Produits\",\n    adminDashboard: \"Tableau de Bord Admin\",\n    login: \"Connexion\",\n    logout: \"Déconnexion\",\n    \n    // Hero Section - French\n    heroTitle: \"Découvrez Votre Destin Cosmique\",\n    heroSubtitle: \"Débloquez les secrets de l'univers avec des consultations expertes d'astrologie védique par l'Astrologue Arup Shastri - 18+ années de guidance transformatrice\",\n    bookReadingNow: \"Réservez Votre Lecture Maintenant\",\n    exploreCourses: \"Explorer les Cours\",\n    \n    // Stats - French\n    yearsExperience: \"Années d'Expérience\",\n    satisfiedClients: \"Clients Satisfaits\",\n    countriesServed: \"Pays Servis\",\n    \n    // Profile Section - French\n    meetAstrologer: \"Rencontrez l'Astrologue Arup Shastri\",\n    astrologerDescription: \"Avec plus de 18 années de pratique dédiée en astrologie védique, l'Astrologue Arup Shastri a guidé des milliers d'âmes vers la clarté, le but et l'alignement cosmique.\",\n    scheduleConsultation: \"Planifier une Consultation Personnelle\",\n    \n    // Expertise Areas - French\n    vedicAstrology: \"Astrologie Védique\",\n    vedicAstrologyDesc: \"Analyse traditionnelle de thème natal\",\n    palmistry: \"Chiromancie\",\n    palmistryDesc: \"Lecture des mains et insights de vie\",\n    numerology: \"Numérologie\",\n    numerologyDesc: \"Modèles numériques et destin\",\n    cosmicRemedies: \"Remèdes Cosmiques\",\n    cosmicRemediesDesc: \"Solutions de guérison et orientation\",\n    vedicVastu: \"Vedic Vastu Shastra\",\n    vedicVastuDesc: \"Science de construction et harmonie\",\n    yogaMeditation: \"Yoga et Méditation\",\n    yogaMeditationDesc: \"Pranayam et pratiques spirituelles\",\n    \n    // Services Section - French\n    consultationServices: \"Services de Consultation\",\n    servicesDescription: \"Choisissez parmi plusieurs formats de consultation conçus pour vous fournir des conseils cosmiques personnalisés\",\n    \n    // Service Types - French\n    videoCall: \"Appel Vidéo\",\n    audioCall: \"Appel Audio\",\n    chatSession: \"Session de Chat\",\n    inPerson: \"En Personne\",\n    homeService: \"Service à Domicile\",\n    \n    // Service Descriptions - French\n    videoCallDesc: \"Consultation face à face via appel vidéo sécurisé utilisant Jitsi Meet\",\n    audioCallDesc: \"Consultation audio uniquement pour des conseils spirituels ciblés et de la clarté\",\n    chatSessionDesc: \"Consultation basée sur le texte via le système de messagerie sécurisé de l'application\",\n    inPersonDesc: \"Consultations traditionnelles face à face dans des lieux désignés\",\n    homeServiceDesc: \"Consultation premium à votre domicile avec des rituels personnalisés\",\n    \n    // Service Buttons - French\n    bookVideoSession: \"Réserver une Séance Vidéo\",\n    bookAudioSession: \"Réserver une Séance Audio\",\n    startChatSession: \"Démarrer une Séance de Chat\",\n    bookInPerson: \"Réserver En Personne\",\n    bookHomeService: \"Réserver un Service à Domicile\",\n    \n    // Additional Services - French\n    allServices: \"Tous les Services\",\n    allServicesDescription: \"Solutions astrologiques complètes conçues pour vous guider dans votre voyage cosmique\",\n    liveConsultations: \"Consultations en Direct\",\n    liveConsultationsDesc: \"Séances Vidéo, Audio, Chat et En Personne pour des conseils cosmiques personnalisés\",\n    vedicAstrologyCourses: \"Cours d'Astrologie Védique\",\n    vedicAstrologyCoursesDesc: \"Maîtrisez la sagesse ancienne grâce à des programmes d'apprentissage complets en ligne et hors ligne\",\n    startingFrom: \"À partir de\",\n    beginnerToExpert: \"Débutant à Expert\",\n    \n    // Common - French\n    welcome: \"Bienvenue\",\n    loading: \"Chargement...\",\n    error: \"Erreur\",\n    success: \"Succès\",\n  },\n  // Adding basic translations for other languages\n  de: {\n    home: \"Startseite\",\n    bookConsultation: \"Beratung Buchen\",\n    courses: \"Kurse\",\n    homeTuition: \"Hausunterricht\",\n    products: \"Produkte\",\n    adminDashboard: \"Admin Dashboard\",\n    login: \"Anmelden\",\n    logout: \"Abmelden\",\n    heroTitle: \"Entdecke Dein Kosmisches Schicksal\",\n    heroSubtitle: \"Entsperren Sie die Geheimnisse des Universums mit Expertenkonsultationen der vedischen Astrologie von Astrologe Arup Shastri - 18+ Jahre transformative Führung\",\n    bookReadingNow: \"Buche Deine Lesung Jetzt\",\n    exploreCourses: \"Kurse Erkunden\",\n    yearsExperience: \"Jahre Erfahrung\",\n    satisfiedClients: \"Zufriedene Kunden\",\n    countriesServed: \"Bediente Länder\",\n    meetAstrologer: \"Treffe Astrologe Arup Shastri\",\n    welcome: \"Willkommen\",\n    loading: \"Lädt...\",\n    error: \"Fehler\",\n    success: \"Erfolg\",\n  },\n  it: {\n    home: \"Home\",\n    bookConsultation: \"Prenota Consulenza\",\n    courses: \"Corsi\",\n    homeTuition: \"Lezioni a Casa\",\n    products: \"Prodotti\",\n    adminDashboard: \"Dashboard Admin\",\n    login: \"Accedi\",\n    logout: \"Esci\",\n    heroTitle: \"Scopri Il Tuo Destino Cosmico\",\n    heroSubtitle: \"Sblocca i segreti dell'universo con consultazioni esperte di astrologia vedica dall'Astrologo Arup Shastri - 18+ anni di guida trasformativa\",\n    bookReadingNow: \"Prenota La Tua Lettura Ora\",\n    exploreCourses: \"Esplora Corsi\",\n    yearsExperience: \"Anni di Esperienza\",\n    satisfiedClients: \"Clienti Soddisfatti\",\n    countriesServed: \"Paesi Serviti\",\n    meetAstrologer: \"Incontra l'Astrologo Arup Shastri\",\n    welcome: \"Benvenuto\",\n    loading: \"Caricamento...\",\n    error: \"Errore\",\n    success: \"Successo\",\n  },\n  pt: {\n    home: \"Início\",\n    bookConsultation: \"Reservar Consulta\",\n    courses: \"Cursos\",\n    homeTuition: \"Aulas em Casa\",\n    products: \"Produtos\",\n    adminDashboard: \"Painel Admin\",\n    login: \"Entrar\",\n    logout: \"Sair\",\n    heroTitle: \"Descubra Seu Destino Cósmico\",\n    heroSubtitle: \"Desbloqueie os segredos do universo com consultas especializadas em astrologia védica pelo Astrólogo Arup Shastri - 18+ anos de orientação transformadora\",\n    bookReadingNow: \"Reserve Sua Leitura Agora\",\n    exploreCourses: \"Explorar Cursos\",\n    yearsExperience: \"Anos de Experiência\",\n    satisfiedClients: \"Clientes Satisfeitos\",\n    countriesServed: \"Países Atendidos\",\n    meetAstrologer: \"Conheça o Astrólogo Arup Shastri\",\n    welcome: \"Bem-vindo\",\n    loading: \"Carregando...\",\n    error: \"Erro\",\n    success: \"Sucesso\",\n  },\n  ru: {\n    home: \"Главная\",\n    bookConsultation: \"Записаться на Консультацию\",\n    courses: \"Курсы\",\n    homeTuition: \"Домашнее Обучение\",\n    products: \"Продукты\",\n    adminDashboard: \"Админ Панель\",\n    login: \"Войти\",\n    logout: \"Выйти\",\n    heroTitle: \"Откройте Свою Космическую Судьбу\",\n    heroSubtitle: \"Разблокируйте секреты вселенной с экспертными консультациями ведической астрологии от Астролога Арупа Шастри - 18+ лет трансформирующего руководства\",\n    bookReadingNow: \"Забронируйте Чтение Сейчас\",\n    exploreCourses: \"Изучить Курсы\",\n    yearsExperience: \"Лет Опыта\",\n    satisfiedClients: \"Довольные Клиенты\", \n    countriesServed: \"Обслуженные Страны\",\n    meetAstrologer: \"Познакомьтесь с Астрологом Арупом Шастри\",\n    welcome: \"Добро пожаловать\",\n    loading: \"Загрузка...\",\n    error: \"Ошибка\",\n    success: \"Успех\",\n  },\n  zh: {\n    home: \"首页\",\n    bookConsultation: \"预约咨询\",\n    courses: \"课程\",\n    homeTuition: \"家教\",\n    products: \"产品\",\n    adminDashboard: \"管理面板\",\n    login: \"登录\",\n    logout: \"退出\",\n    heroTitle: \"发现您的宇宙命运\",\n    heroSubtitle: \"通过占星师阿鲁普·沙斯特里的专业吠陀占星咨询解锁宇宙的秘密 - 18+年的变革性指导\",\n    bookReadingNow: \"立即预订阅读\",\n    exploreCourses: \"探索课程\",\n    yearsExperience: \"年经验\",\n    satisfiedClients: \"满意客户\",\n    countriesServed: \"服务国家\",\n    meetAstrologer: \"认识占星师阿鲁普·沙斯特里\",\n    welcome: \"欢迎\",\n    loading: \"加载中...\",\n    error: \"错误\",\n    success: \"成功\",\n  },\n  ja: {\n    home: \"ホーム\",\n    bookConsultation: \"相談を予約\",\n    courses: \"コース\",\n    homeTuition: \"家庭教師\",\n    products: \"製品\",\n    adminDashboard: \"管理ダッシュボード\",\n    login: \"ログイン\",\n    logout: \"ログアウト\",\n    heroTitle: \"あなたの宇宙的運命を発見\",\n    heroSubtitle: \"占星術師アルップ・シャストリによる専門的なヴェーダ占星術相談で宇宙の秘密を解き明かす - 18+年の変革的指導\",\n    bookReadingNow: \"今すぐリーディングを予約\",\n    exploreCourses: \"コースを探索\",\n    yearsExperience: \"年の経験\",\n    satisfiedClients: \"満足したクライアント\",\n    countriesServed: \"サービス提供国\",\n    meetAstrologer: \"占星術師アルップ・シャストリに会う\",\n    welcome: \"ようこそ\",\n    loading: \"読み込み中...\",\n    error: \"エラー\",\n    success: \"成功\",\n  },\n  ko: {\n    home: \"홈\",\n    bookConsultation: \"상담 예약\",\n    courses: \"강의\",\n    homeTuition: \"홈 튜터링\",\n    products: \"제품\",\n    adminDashboard: \"관리자 대시보드\",\n    login: \"로그인\",\n    logout: \"로그아웃\",\n    heroTitle: \"당신의 우주적 운명을 발견하세요\",\n    heroSubtitle: \"점성술사 아룹 샤스트리의 전문적인 베다 점성술 상담으로 우주의 비밀을 풀어보세요 - 18+년의 변화적 안내\",\n    bookReadingNow: \"지금 리딩 예약\",\n    exploreCourses: \"강의 탐색\",\n    yearsExperience: \"년 경험\",\n    satisfiedClients: \"만족한 고객\",\n    countriesServed: \"서비스 제공 국가\",\n    meetAstrologer: \"점성술사 아룹 샤스트리를 만나보세요\",\n    welcome: \"환영합니다\",\n    loading: \"로딩 중...\",\n    error: \"오류\",\n    success: \"성공\",\n  },\n  ar: {\n    home: \"الرئيسية\",\n    bookConsultation: \"حجز استشارة\",\n    courses: \"الدورات\",\n    homeTuition: \"التدريس المنزلي\",\n    products: \"المنتجات\",\n    adminDashboard: \"لوحة الإدارة\",\n    login: \"تسجيل الدخول\",\n    logout: \"تسجيل الخروج\",\n    heroTitle: \"اكتشف مصيرك الكوني\",\n    heroSubtitle: \"اكتشف أسرار الكون مع استشارات علم التنجيم الفيدي المتخصصة من المنجم أروب شاستري - 18+ عامًا من التوجيه التحويلي\",\n    bookReadingNow: \"احجز قراءتك الآن\",\n    exploreCourses: \"استكشف الدورات\",\n    yearsExperience: \"سنوات الخبرة\",\n    satisfiedClients: \"العملاء الراضون\",\n    countriesServed: \"البلدان المخدومة\",\n    meetAstrologer: \"التق بالمنجم أروب شاستري\",\n    welcome: \"أهلاً وسهلاً\",\n    loading: \"جاري التحميل...\",\n    error: \"خطأ\",\n    success: \"نجح\",\n  },\n  \n  // Indian Languages\n  te: { // Telugu\n    home: \"హోమ్\", bookConsultation: \"సంప్రదింపు బుక్ చేయండి\", courses: \"కోర్సులు\", homeTuition: \"హోమ్ ట్యూషన్\", products: \"ఉత్పత్తులు\", adminDashboard: \"అడ్మిన్ డ్యాష్‌బోర్డ్\", login: \"లాగిన్\", logout: \"లాగౌట్\",\n    heroTitle: \"మీ కాస్మిక్ విధిని కనుగొనండి\", heroSubtitle: \"జ్యోతిష్కుడు అరుప్ శాస్త్రి యొక్క నిపుణ వేద జ్యోతిష్య సంప్రదింపులతో విశ్వం యొక్క రహస్యాలను అన్లాక్ చేయండి\", bookReadingNow: \"ఇప్పుడే మీ రీడింగ్ బుక్ చేయండి\", exploreCourses: \"కోర్సులను అన్వేషించండి\",\n    yearsExperience: \"సంవత్సరాల అనుభవం\", satisfiedClients: \"సంతృప్త క్లయింట్లు\", countriesServed: \"దేశాలు సేవించబడ్డాయి\", meetAstrologer: \"జ్యోతిష్కుడు అరుప్ శాస్త్రిని కలవండి\", welcome: \"స్వాగతం\", loading: \"లోడ్ అవుతుంది...\", error: \"లోపం\", success: \"విజయం\"\n  },\n  \n  mr: { // Marathi\n    home: \"होम\", bookConsultation: \"सल्लामसलत बुक करा\", courses: \"अभ्यासक्रम\", homeTuition: \"होम ट्यूशन\", products: \"उत्पादने\", adminDashboard: \"अॅडमिन डॅशबोर्ड\", login: \"लॉगिन\", logout: \"लॉगआउट\",\n    heroTitle: \"तुमचे कॉस्मिक नशीब शोधा\", heroSubtitle: \"ज्योतिषी अरुप शास्त्री यांच्या तज्ज्ञ वैदिक ज्योतिष सल्लामसलतीसह विश्वाचे रहस्य अनलॉक करा\", bookReadingNow: \"आताच तुमचे वाचन बुक करा\", exploreCourses: \"अभ्यासक्रम अन्वेषण करा\",\n    yearsExperience: \"वर्षांचा अनुभव\", satisfiedClients: \"समाधानी क्लायंट\", countriesServed: \"देश सेवा दिली\", meetAstrologer: \"ज्योतिषी अरुप शास्त्री यांना भेटा\", welcome: \"स्वागत\", loading: \"लोड होत आहे...\", error: \"चूक\", success: \"यश\"\n  },\n  \n  ta: { // Tamil  \n    home: \"முகப்பு\", bookConsultation: \"ஆலோசனை பதிவு\", courses: \"பாடப்பிரிவுகள்\", homeTuition: \"வீட்டுப் பயிற்சி\", products: \"பொருள்கள்\", adminDashboard: \"நிர்வாக டாஷ்போர்டு\", login: \"உள்நுழை\", logout: \"வெளியேறு\",\n    heroTitle: \"உங்கள் பிரபஞ்ச விதியைக் கண்டறியுங்கள்\", heroSubtitle: \"ஜோதிடர் அருப் ஷாஸ்திரியின் நிபுண வேத ஜோதிட ஆலோசனைகளுடன் பிரபஞ்சத்தின் ரகசியங்களை திறக்கவும்\", bookReadingNow: \"இப்போதே உங்கள் வாசிப்பை பதிவு செய்யுங்கள்\", exploreCourses: \"பாடப்பிரிவுகளை ஆராயுங்கள்\",\n    yearsExperience: \"வருட அனுபவம்\", satisfiedClients: \"திருப்தியான வாடிக்கையாளர்கள்\", countriesServed: \"நாடுகள் சேவை\", meetAstrologer: \"ஜோதிடர் அருப் ஷாஸ்திரியை சந்திக்கவும்\", welcome: \"வருக\", loading: \"ஏற்றுகிறது...\", error: \"பிழை\", success: \"வெற்றி\"\n  },\n  \n  gu: { // Gujarati\n    home: \"ઘર\", bookConsultation: \"સલાહ બુક કરો\", courses: \"કોર્સ\", homeTuition: \"હોમ ટ્યુશન\", products: \"ઉત્પાદનો\", adminDashboard: \"એડમિન ડૅશબોર્ડ\", login: \"લોગિન\", logout: \"લોગઆઉટ\",\n    heroTitle: \"તમારા કોસ્મિક નસીબ શોધો\", heroSubtitle: \"જ્યોતિષી અરૂપ શાસ્ત્રીના નિષ્ણાત વૈદિક જ્યોતિષ સલાહ સાથે બ્રહ્માંડના રહસ્યો અનલોક કરો\", bookReadingNow: \"હવે તમારું વાંચન બુક કરો\", exploreCourses: \"કોર્સ અન્વેષણ કરો\",\n    yearsExperience: \"વર્ષોનો અનુભવ\", satisfiedClients: \"સંતુષ્ટ ગ્રાહકો\", countriesServed: \"દેશો સેવા આપી\", meetAstrologer: \"જ્યોતિષી અરૂપ શાસ્ત્રીને મળો\", welcome: \"સ્વાગત\", loading: \"લોડ થઈ રહ્યું છે...\", error: \"ભૂલ\", success: \"સફળતા\"\n  },\n  \n  kn: { // Kannada\n    home: \"ಮನೆ\", bookConsultation: \"ಸಲಹೆ ಬುಕ್ ಮಾಡಿ\", courses: \"ಕೋರ್ಸ್‌ಗಳು\", homeTuition: \"ಹೋಮ್ ಟ್ಯೂಷನ್\", products: \"ಉತ್ಪನ್ನಗಳು\", adminDashboard: \"ಅಡ್ಮಿನ್ ಡ್ಯಾಶ್‌ಬೋರ್ಡ್\", login: \"ಲಾಗಿನ್\", logout: \"ಲಾಗೌಟ್\",\n    heroTitle: \"ನಿಮ್ಮ ಕಾಸ್ಮಿಕ್ ವಿಧಿಯನ್ನು ಕಂಡುಕೊಳ್ಳಿ\", heroSubtitle: \"ಜ್ಯೋತಿಷಿ ಅರೂಪ್ ಶಾಸ್ತ್ರಿಯ ನಿಪುಣ ವೈದಿಕ ಜ್ಯೋತಿಷ್ಯ ಸಲಹೆಗಳೊಂದಿಗೆ ವಿಶ್ವದ ರಹಸ್ಯಗಳನ್ನು ಅನ್ಲಾಕ್ ಮಾಡಿ\", bookReadingNow: \"ಈಗ ನಿಮ್ಮ ಓದುವಿಕೆಯನ್ನು ಬುಕ್ ಮಾಡಿ\", exploreCourses: \"ಕೋರ್ಸ್‌ಗಳನ್ನು ಅನ್ವೇಷಿಸಿ\",\n    yearsExperience: \"ವರ್ಷಗಳ ಅನುಭವ\", satisfiedClients: \"ತೃಪ್ತ ಗ್ರಾಹಕರು\", countriesServed: \"ದೇಶಗಳಿಗೆ ಸೇವೆ\", meetAstrologer: \"ಜ್ಯೋತಿಷಿ ಅರೂಪ್ ಶಾಸ್ತ್ರಿಯನ್ನು ಭೇಟಿಯಾಗಿ\", welcome: \"ಸ್ವಾಗತ\", loading: \"ಲೋಡ್ ಆಗುತ್ತಿದೆ...\", error: \"ದೋಷ\", success: \"ಯಶಸ್ಸು\"\n  },\n  \n  or: { // Odia\n    home: \"ଘର\", bookConsultation: \"ପରାମର୍ଶ ବୁକ୍ କରନ୍ତୁ\", courses: \"ପାଠ୍ୟକ୍ରମ\", homeTuition: \"ହୋମ ଟ୍ୟୁସନ\", products: \"ଦ୍ରବ୍ୟ\", adminDashboard: \"ଆଡମିନ ଡ୍ୟାସବୋର୍ଡ\", login: \"ଲଗଇନ\", logout: \"ଲଗଆଉଟ\",\n    heroTitle: \"ଆପଣଙ୍କ ମହାଜାଗତିକ ନିୟତି ଆବିଷ୍କାର କରନ୍ତୁ\", heroSubtitle: \"ଜ୍ୟୋତିଷ ଅରୂପ ଶାସ୍ତ୍ରୀଙ୍କ ବିଶେଷଜ୍ଞ ବୈଦିକ ଜ୍ୟୋତିଷ ପରାମର୍ଶ ସହିତ ବ୍ରହ୍ମାଣ୍ଡର ରହସ୍ୟ ଖୋଲନ୍ତୁ\", bookReadingNow: \"ଏବେ ଆପଣଙ୍କ ରିଡିଂ ବୁକ୍ କରନ୍ତୁ\", exploreCourses: \"ପାଠ୍ୟକ୍ରମ ଅନୁସନ୍ଧାନ କରନ୍ତୁ\",\n    yearsExperience: \"ବର୍ଷର ଅଭିଜ୍ଞତା\", satisfiedClients: \"ସନ୍ତୁଷ୍ଟ ଗ୍ରାହକ\", countriesServed: \"ଦେଶ ସେବା\", meetAstrologer: \"ଜ୍ୟୋତିଷ ଅରୂପ ଶାସ୍ତ୍ରୀଙ୍କୁ ଭେଟନ୍ତୁ\", welcome: \"ସ୍ୱାଗତ\", loading: \"ଲୋଡ ହେଉଛି...\", error: \"ତ୍ରୁଟି\", success: \"ସଫଳତା\"\n  },\n  \n  pa: { // Punjabi\n    home: \"ਘਰ\", bookConsultation: \"ਸਲਾਹ ਬੁਕ ਕਰੋ\", courses: \"ਕੋਰਸ\", homeTuition: \"ਘਰ ਟਿਊਸ਼ਨ\", products: \"ਉਤਪਾਦ\", adminDashboard: \"ਐਡਮਿਨ ਡੈਸ਼ਬੋਰਡ\", login: \"ਲਾਗਇਨ\", logout: \"ਲਾਗਆਊਟ\",\n    heroTitle: \"ਆਪਣੀ ਬ੍ਰਹਿਮੰਡੀ ਕਿਸਮਤ ਖੋਜੋ\", heroSubtitle: \"ਜੋਤਸ਼ੀ ਅਰੂਪ ਸ਼ਾਸਤ੍ਰੀ ਦੇ ਮਾਹਰ ਵੈਦਿਕ ਜੋਤਸ਼ ਸਲਾਹ ਨਾਲ ਬ੍ਰਹਿਮੰਡ ਦੇ ਰਾਜ਼ ਖੋਲ੍ਹੋ\", bookReadingNow: \"ਹੁਣੇ ਆਪਣੀ ਰੀਡਿੰਗ ਬੁਕ ਕਰੋ\", exploreCourses: \"ਕੋਰਸ ਪੜਚੋਲ ਕਰੋ\",\n    yearsExperience: \"ਸਾਲ ਦਾ ਤਜਰਬਾ\", satisfiedClients: \"ਸੰਤੁਸ਼ਟ ਗ੍ਰਾਹਕ\", countriesServed: \"ਦੇਸ਼ ਸੇਵਾ\", meetAstrologer: \"ਜੋਤਸ਼ੀ ਅਰੂਪ ਸ਼ਾਸਤ੍ਰੀ ਨੂੰ ਮਿਲੋ\", welcome: \"ਸਵਾਗਤ\", loading: \"ਲੋਡ ਹੋ ਰਿਹਾ ਹੈ...\", error: \"ਗਲਤੀ\", success: \"ਸਫਲਤਾ\"\n  },\n  \n  ml: { // Malayalam\n    home: \"ഹോം\", bookConsultation: \"കൺസൾട്ടേഷൻ ബുക്ക് ചെയ്യുക\", courses: \"കോഴ്സുകൾ\", homeTuition: \"ഹോം ട്യൂഷൻ\", products: \"ഉൽപ്പന്നങ്ങൾ\", adminDashboard: \"അഡ്മിൻ ഡാഷ്ബോർഡ്\", login: \"ലോഗിൻ\", logout: \"ലോഗൗട്ട്\",\n    heroTitle: \"നിങ്ങളുടെ കോസ്മിക് വിധി കണ്ടെത്തുക\", heroSubtitle: \"ജ്യോതിഷി അരൂപ് ശാസ്ത്രിയുടെ വിദഗ്ധ വൈദിക ജ്യോതിഷ കൺസൾട്ടേഷനുകളിലൂടെ പ്രപഞ്ചത്തിന്റെ രഹസ്യങ്ങൾ അൺലോക്ക് ചെയ്യുക\", bookReadingNow: \"ഇപ്പോൾ നിങ്ങളുടെ റീഡിംഗ് ബുക്ക് ചെയ്യുക\", exploreCourses: \"കോഴ്സുകൾ പര്യവേക്ഷണം ചെയ്യുക\",\n    yearsExperience: \"വർഷത്തെ അനുഭവം\", satisfiedClients: \"സംതൃപ്തരായ ക്ലയന്റുകൾ\", countriesServed: \"രാജ്യങ്ങൾ സേവിച്ചു\", meetAstrologer: \"ജ്യോതിഷി അരൂപ് ശാസ്ത്രിയെ കാണുക\", welcome: \"സ്വാഗതം\", loading: \"ലോഡിംഗ്...\", error: \"പിശക്\", success: \"വിജയം\"\n  },\n  \n  as: { // Assamese\n    home: \"ঘৰ\", bookConsultation: \"পৰামৰ্শ বুক কৰক\", courses: \"পাঠ্যক্ৰম\", homeTuition: \"ঘৰুৱা শিক্ষা\", products: \"সামগ্ৰী\", adminDashboard: \"এডমিন ডেছবোৰ্ড\", login: \"লগিন\", logout: \"লগআউট\",\n    heroTitle: \"আপোনাৰ মহাজাগতিক নিয়তি আৱিস্কাৰ কৰক\", heroSubtitle: \"জ্যোতিষী অৰূপ শাস্ত্ৰীৰ বিশেষজ্ঞ বৈদিক জ্যোতিষ পৰামৰ্শৰ সৈতে বিশ্বব্ৰহ্মাণ্ডৰ ৰহস্য উন্মোচন কৰক\", bookReadingNow: \"এতিয়াই আপোনাৰ ৰিডিং বুক কৰক\", exploreCourses: \"পাঠ্যক্ৰম অন্বেষণ কৰক\",\n    yearsExperience: \"বছৰৰ অভিজ্ঞতা\", satisfiedClients: \"সন্তুষ্ট ক্লায়েণ্ট\", countriesServed: \"দেশ সেৱা কৰা\", meetAstrologer: \"জ্যোতিষী অৰূপ শাস্ত্ৰীক লগ পাওক\", welcome: \"স্বাগতম\", loading: \"ল'ড হৈছে...\", error: \"ত্ৰুটি\", success: \"সফলতা\"\n  },\n  \n  ur: { // Urdu\n    home: \"ہوم\", bookConsultation: \"مشاورت بک کریں\", courses: \"کورسز\", homeTuition: \"گھریلو تعلیم\", products: \"پروڈکٹس\", adminDashboard: \"ایڈمن ڈیش بورڈ\", login: \"لاگ ان\", logout: \"لاگ آؤٹ\",\n    heroTitle: \"اپنی کاسمک تقدیر دریافت کریں\", heroSubtitle: \"نجومی ارپ شاستری کے ماہرانہ ویدک علم نجوم مشاورت کے ساتھ کائنات کے رازوں کو کھولیں\", bookReadingNow: \"اب اپنی ریڈنگ بک کریں\", exploreCourses: \"کورسز تلاش کریں\",\n    yearsExperience: \"سال کا تجربہ\", satisfiedClients: \"مطمئن کلائنٹس\", countriesServed: \"ممالک کی خدمت\", meetAstrologer: \"نجومی ارپ شاستری سے ملیں\", welcome: \"خوش آمدید\", loading: \"لوڈ ہو رہا ہے...\", error: \"غلطی\", success: \"کامیابی\"\n  },\n  \n  sa: { // Sanskrit\n    home: \"गृहम्\", bookConsultation: \"परामर्शः आरक्षयतु\", courses: \"पाठ्यक्रमाः\", homeTuition: \"गृह-अध्ययनम्\", products: \"वस्तूनि\", adminDashboard: \"प्रशासक-पटलम्\", login: \"प्रवेशः\", logout: \"निर्गमः\",\n    heroTitle: \"स्वस्य ब्राह्मिक नियतिं अन्वेषयतु\", heroSubtitle: \"ज्योतिषी अरूप शास्त्रिणः विशेषज्ञ वैदिक ज्योतिष परामर्शैः सह विश्वस्य रहस्यानि उद्घाटयतु\", bookReadingNow: \"अधुना स्वस्य पठनं आरक्षयतु\", exploreCourses: \"पाठ्यक्रमान् अन्वेषयतु\",\n    yearsExperience: \"वर्षाणां अनुभवः\", satisfiedClients: \"सन्तुष्ट ग्राहकाः\", countriesServed: \"देशाः सेविताः\", meetAstrologer: \"ज्योतिषी अरूप शास्त्रिणा सह मिलतु\", welcome: \"स्वागतम्\", loading: \"आरोपयति...\", error: \"त्रुटिः\", success: \"सफलता\"\n  },\n  \n  // European Languages (Basic)\n  nl: { // Dutch\n    home: \"Thuis\", bookConsultation: \"Consultatie Boeken\", courses: \"Cursussen\", homeTuition: \"Thuisbijles\", products: \"Producten\", adminDashboard: \"Admin Dashboard\", login: \"Inloggen\", logout: \"Uitloggen\",\n    heroTitle: \"Ontdek Je Kosmische Bestemming\", heroSubtitle: \"Ontgrendel de geheimen van het universum met deskundige Vedische astrologie consulten door Astroloog Arup Shastri\", bookReadingNow: \"Boek Je Reading Nu\", exploreCourses: \"Verken Cursussen\",\n    yearsExperience: \"Jaar Ervaring\", satisfiedClients: \"Tevreden Klanten\", countriesServed: \"Landen Bediend\", meetAstrologer: \"Ontmoet Astroloog Arup Shastri\", welcome: \"Welkom\", loading: \"Laden...\", error: \"Fout\", success: \"Succes\"\n  },\n  \n  sv: { // Swedish\n    home: \"Hem\", bookConsultation: \"Boka Konsultation\", courses: \"Kurser\", homeTuition: \"Hemundervisning\", products: \"Produkter\", adminDashboard: \"Admin Panel\", login: \"Logga in\", logout: \"Logga ut\",\n    heroTitle: \"Upptäck Ditt Kosmiska Öde\", heroSubtitle: \"Lås upp universums hemligheter med expertvedisk astrologi konsultationer av Astrolog Arup Shastri\", bookReadingNow: \"Boka Din Läsning Nu\", exploreCourses: \"Utforska Kurser\",\n    yearsExperience: \"År av Erfarenhet\", satisfiedClients: \"Nöjda Kunder\", countriesServed: \"Länder Betjänade\", meetAstrologer: \"Möt Astrolog Arup Shastri\", welcome: \"Välkommen\", loading: \"Laddar...\", error: \"Fel\", success: \"Framgång\"\n  },\n  \n  // Adding more languages with basic translations...\n  th: { // Thai\n    home: \"หน้าแรก\", bookConsultation: \"จองการปรึกษา\", courses: \"หลักสูตร\", homeTuition: \"สอนพิเศษที่บ้าน\", products: \"ผลิตภัณฑ์\", adminDashboard: \"แผงผู้ดูแล\", login: \"เข้าสู่ระบบ\", logout: \"ออกจากระบบ\",\n    heroTitle: \"ค้นหาชะตากรรมอันยิ่งใหญ่ของคุณ\", heroSubtitle: \"ปลดล็อกความลับของจักรวาลด้วยการปรึกษาโหราศาสตร์เวทตะจากผู้เชี่ยวชาญ อรุป ศาสตรี\", bookReadingNow: \"จองการอ่านของคุณตอนนี้\", exploreCourses: \"สำรวจหลักสูตร\",\n    yearsExperience: \"ปีของประสบการณ์\", satisfiedClients: \"ลูกค้าที่พึงพอใจ\", countriesServed: \"ประเทศที่ให้บริการ\", meetAstrologer: \"พบกับโหรอรุป ศาสตรี\", welcome: \"ยินดีต้อนรับ\", loading: \"กำลังโหลด...\", error: \"ข้อผิดพลาด\", success: \"สำเร็จ\"\n  },\n  \n  vi: { // Vietnamese\n    home: \"Trang chủ\", bookConsultation: \"Đặt tư vấn\", courses: \"Khóa học\", homeTuition: \"Dạy kèm tại nhà\", products: \"Sản phẩm\", adminDashboard: \"Bảng điều khiển Admin\", login: \"Đăng nhập\", logout: \"Đăng xuất\",\n    heroTitle: \"Khám phá định mệnh vũ trụ của bạn\", heroSubtitle: \"Mở khóa bí mật của vũ trụ với các buổi tư vấn chiêm tinh Vedic chuyên nghiệp bởi Thầy chiêm tinh Arup Shastri\", bookReadingNow: \"Đặt bói của bạn ngay\", exploreCourses: \"Khám phá khóa học\",\n    yearsExperience: \"Năm kinh nghiệm\", satisfiedClients: \"Khách hàng hài lòng\", countriesServed: \"Quốc gia được phục vụ\", meetAstrologer: \"Gặp Thầy chiêm tinh Arup Shastri\", welcome: \"Chào mừng\", loading: \"Đang tải...\", error: \"Lỗi\", success: \"Thành công\"\n  },\n  \n  id: { // Indonesian\n    home: \"Beranda\", bookConsultation: \"Pesan Konsultasi\", courses: \"Kursus\", homeTuition: \"Les Privat\", products: \"Produk\", adminDashboard: \"Panel Admin\", login: \"Masuk\", logout: \"Keluar\",\n    heroTitle: \"Temukan Takdir Kosmik Anda\", heroSubtitle: \"Buka rahasia alam semesta dengan konsultasi astrologi Veda ahli oleh Astrolog Arup Shastri\", bookReadingNow: \"Pesan Reading Anda Sekarang\", exploreCourses: \"Jelajahi Kursus\",\n    yearsExperience: \"Tahun Pengalaman\", satisfiedClients: \"Klien Puas\", countriesServed: \"Negara Dilayani\", meetAstrologer: \"Temui Astrolog Arup Shastri\", welcome: \"Selamat datang\", loading: \"Memuat...\", error: \"Kesalahan\", success: \"Berhasil\"\n  },\n\n  // Additional Languages with Basic Translations\n  no: { // Norwegian\n    home: \"Hjem\", bookConsultation: \"Bestill Konsultasjon\", courses: \"Kurs\", homeTuition: \"Hjemmeundervisning\", products: \"Produkter\", adminDashboard: \"Admin Dashboard\", login: \"Logg inn\", logout: \"Logg ut\",\n    heroTitle: \"Oppdag Din Kosmiske Skjebne\", heroSubtitle: \"Lås opp universets hemmeligheter med ekspert vedisk astrologi konsultasjoner av Astrolog Arup Shastri\", bookReadingNow: \"Bestill Din Lesning Nå\", exploreCourses: \"Utforsk Kurs\",\n    yearsExperience: \"År med Erfaring\", satisfiedClients: \"Fornøyde Kunder\", countriesServed: \"Land Betjent\", meetAstrologer: \"Møt Astrolog Arup Shastri\", welcome: \"Velkommen\", loading: \"Laster...\", error: \"Feil\", success: \"Suksess\"\n  },\n  \n  da: { // Danish\n    home: \"Hjem\", bookConsultation: \"Book Konsultation\", courses: \"Kurser\", homeTuition: \"Hjemmeundervisning\", products: \"Produkter\", adminDashboard: \"Admin Dashboard\", login: \"Log ind\", logout: \"Log ud\",\n    heroTitle: \"Opdag Dit Kosmiske Skæbne\", heroSubtitle: \"Lås op for universets hemmeligheder med ekspert vedisk astrologi konsultationer af Astrolog Arup Shastri\", bookReadingNow: \"Book Din Læsning Nu\", exploreCourses: \"Udforsk Kurser\",\n    yearsExperience: \"Års Erfaring\", satisfiedClients: \"Tilfredse Kunder\", countriesServed: \"Lande Betjent\", meetAstrologer: \"Mød Astrolog Arup Shastri\", welcome: \"Velkommen\", loading: \"Indlæser...\", error: \"Fejl\", success: \"Succes\"\n  },\n  \n  fi: { // Finnish\n    home: \"Koti\", bookConsultation: \"Varaa Konsultaatio\", courses: \"Kurssit\", homeTuition: \"Kotiopetus\", products: \"Tuotteet\", adminDashboard: \"Admin Hallinta\", login: \"Kirjaudu\", logout: \"Kirjaudu ulos\",\n    heroTitle: \"Löydä Kosminen Kohtalosi\", heroSubtitle: \"Avaa maailmankaikkeuden salaisuudet asiantuntija-astrologi Arup Shastrin vedisellä astrologialla\", bookReadingNow: \"Varaa Lukemisesi Nyt\", exploreCourses: \"Tutki Kursseja\",\n    yearsExperience: \"Vuoden Kokemus\", satisfiedClients: \"Tyytyväiset Asiakkaat\", countriesServed: \"Palveltuja Maita\", meetAstrologer: \"Tapaa Astrologi Arup Shastri\", welcome: \"Tervetuloa\", loading: \"Ladataan...\", error: \"Virhe\", success: \"Onnistui\"\n  },\n  \n  pl: { // Polish\n    home: \"Strona główna\", bookConsultation: \"Zarezerwuj Konsultację\", courses: \"Kursy\", homeTuition: \"Korepetycje\", products: \"Produkty\", adminDashboard: \"Panel Admina\", login: \"Zaloguj\", logout: \"Wyloguj\",\n    heroTitle: \"Odkryj Swój Kosmiczny Los\", heroSubtitle: \"Odblokuj sekrety wszechświata dzięki konsultacjom wedyjskiej astrologii eksperta Astrologa Arup Shastri\", bookReadingNow: \"Zarezerwuj Swoje Czytanie Teraz\", exploreCourses: \"Odkryj Kursy\",\n    yearsExperience: \"Lat Doświadczenia\", satisfiedClients: \"Zadowoleni Klienci\", countriesServed: \"Obsługiwane Kraje\", meetAstrologer: \"Poznaj Astrologa Arup Shastri\", welcome: \"Witamy\", loading: \"Ładowanie...\", error: \"Błąd\", success: \"Sukces\"\n  },\n  \n  cs: { // Czech\n    home: \"Domů\", bookConsultation: \"Rezervovat Konzultaci\", courses: \"Kurzy\", homeTuition: \"Domácí Výuka\", products: \"Produkty\", adminDashboard: \"Admin Panel\", login: \"Přihlásit\", logout: \"Odhlásit\",\n    heroTitle: \"Objevte Svůj Kosmický Osud\", heroSubtitle: \"Odemkněte tajemství vesmíru s expertními konzultacemi védské astrologie od Astrologa Arup Shastri\", bookReadingNow: \"Rezervujte Si Čtení Nyní\", exploreCourses: \"Prozkoumejte Kurzy\",\n    yearsExperience: \"Let Zkušeností\", satisfiedClients: \"Spokojení Klienti\", countriesServed: \"Obsloužené Země\", meetAstrologer: \"Poznejte Astrologa Arup Shastri\", welcome: \"Vítejte\", loading: \"Načítání...\", error: \"Chyba\", success: \"Úspěch\"\n  },\n  \n  hu: { // Hungarian\n    home: \"Kezdőlap\", bookConsultation: \"Konzultáció Foglalása\", courses: \"Tanfolyamok\", homeTuition: \"Magánoktatás\", products: \"Termékek\", adminDashboard: \"Admin Panel\", login: \"Bejelentkezés\", logout: \"Kijelentkezés\",\n    heroTitle: \"Fedezd Fel Kozmikus Sorsodat\", heroSubtitle: \"Nyisd ki az univerzum titkait Arup Shastri asztrológus szakértő védikus asztrológiai konzultációival\", bookReadingNow: \"Foglald Le Az Olvasásodat Most\", exploreCourses: \"Fedezd Fel A Tanfolyamokat\",\n    yearsExperience: \"Év Tapasztalat\", satisfiedClients: \"Elégedett Ügyfelek\", countriesServed: \"Kiszolgált Országok\", meetAstrologer: \"Ismerd Meg Arup Shastri Asztrológust\", welcome: \"Üdvözöljük\", loading: \"Betöltés...\", error: \"Hiba\", success: \"Siker\"\n  },\n  \n  ro: { // Romanian\n    home: \"Acasă\", bookConsultation: \"Rezervă Consultație\", courses: \"Cursuri\", homeTuition: \"Meditații Acasă\", products: \"Produse\", adminDashboard: \"Panou Admin\", login: \"Conectare\", logout: \"Deconectare\",\n    heroTitle: \"Descoperă-ți Destinul Cosmic\", heroSubtitle: \"Deblochează secretele universului cu consultații experte de astrologie vedică de la Astrologul Arup Shastri\", bookReadingNow: \"Rezervă-ți Citirea Acum\", exploreCourses: \"Explorează Cursurile\",\n    yearsExperience: \"Ani de Experiență\", satisfiedClients: \"Clienți Mulțumiți\", countriesServed: \"Țări Servite\", meetAstrologer: \"Întâlnește Astrologul Arup Shastri\", welcome: \"Bun venit\", loading: \"Se încarcă...\", error: \"Eroare\", success: \"Succes\"\n  },\n  \n  el: { // Greek\n    home: \"Αρχική\", bookConsultation: \"Κλείστε Συμβουλή\", courses: \"Μαθήματα\", homeTuition: \"Ιδιαίτερα Μαθήματα\", products: \"Προϊόντα\", adminDashboard: \"Πίνακας Διαχείρισης\", login: \"Σύνδεση\", logout: \"Αποσύνδεση\",\n    heroTitle: \"Ανακαλύψτε την Κοσμική σας Μοίρα\", heroSubtitle: \"Ξεκλειδώστε τα μυστικά του σύμπαντος με εξπέρ συμβουλές βεδικής αστρολογίας από τον Αστρολόγο Arup Shastri\", bookReadingNow: \"Κλείστε την Ανάγνωσή σας Τώρα\", exploreCourses: \"Εξερευνήστε Μαθήματα\",\n    yearsExperience: \"Χρόνια Εμπειρίας\", satisfiedClients: \"Ικανοποιημένοι Πελάτες\", countriesServed: \"Χώρες που Εξυπηρετούνται\", meetAstrologer: \"Γνωρίστε τον Αστρολόγο Arup Shastri\", welcome: \"Καλώς ήρθατε\", loading: \"Φόρτωση...\", error: \"Σφάλμα\", success: \"Επιτυχία\"\n  },\n  \n  tr: { // Turkish\n    home: \"Ana Sayfa\", bookConsultation: \"Danışmanlık Rezerve Et\", courses: \"Kurslar\", homeTuition: \"Evde Ders\", products: \"Ürünler\", adminDashboard: \"Yönetici Paneli\", login: \"Giriş\", logout: \"Çıkış\",\n    heroTitle: \"Kozmik Kaderinizi Keşfedin\", heroSubtitle: \"Astrolog Arup Shastri'nin uzman Vedik astroloji danışmanlıklarıyla evrenin sırlarını açığa çıkarın\", bookReadingNow: \"Okumamızı Şimdi Rezerve Edin\", exploreCourses: \"Kursları Keşfedin\",\n    yearsExperience: \"Yıl Deneyim\", satisfiedClients: \"Memnun Müşteriler\", countriesServed: \"Hizmet Verilen Ülkeler\", meetAstrologer: \"Astrolog Arup Shastri ile Tanışın\", welcome: \"Hoş geldiniz\", loading: \"Yükleniyor...\", error: \"Hata\", success: \"Başarı\"\n  },\n  \n  fa: { // Persian\n    home: \"خانه\", bookConsultation: \"رزرو مشاوره\", courses: \"دوره‌ها\", homeTuition: \"تدریس خصوصی\", products: \"محصولات\", adminDashboard: \"پنل مدیریت\", login: \"ورود\", logout: \"خروج\",\n    heroTitle: \"سرنوشت کیهانی خود را کشف کنید\", heroSubtitle: \"اسرار کیهان را با مشاوره‌های متخصص طالع‌بینی ودایی توسط منجم آروپ شاستری باز کنید\", bookReadingNow: \"همین الآن فال خود را رزرو کنید\", exploreCourses: \"دوره‌ها را کاوش کنید\",\n    yearsExperience: \"سال تجربه\", satisfiedClients: \"مشتریان راضی\", countriesServed: \"کشورهای خدمات‌دهی\", meetAstrologer: \"با منجم آروپ شاستری آشنا شوید\", welcome: \"خوش آمدید\", loading: \"در حال بارگذاری...\", error: \"خطا\", success: \"موفقیت\"\n  },\n  \n  he: { // Hebrew\n    home: \"בית\", bookConsultation: \"הזמן ייעוץ\", courses: \"קורסים\", homeTuition: \"שיעורים פרטיים\", products: \"מוצרים\", adminDashboard: \"לוח בקרה\", login: \"התחבר\", logout: \"התנתק\",\n    heroTitle: \"גלה את הגורל הקוסמי שלך\", heroSubtitle: \"פתח את סודות היקום עם ייעוץ מומחה באסטרולוגיה וודית על ידי האסטרולוג ארופ שאסטרי\", bookReadingNow: \"הזמן את הקריאה שלך עכשיו\", exploreCourses: \"חקור קורסים\",\n    yearsExperience: \"שנות ניסיון\", satisfiedClients: \"לקוחות מרוצים\", countriesServed: \"מדינות בשירות\", meetAstrologer: \"פגש את האסטרולוג ארופ שאסטרי\", welcome: \"ברוכים הבאים\", loading: \"טוען...\", error: \"שגיאה\", success: \"הצלחה\"\n  },\n  \n  ms: { // Malay\n    home: \"Utama\", bookConsultation: \"Tempah Konsultasi\", courses: \"Kursus\", homeTuition: \"Tuisyen Rumah\", products: \"Produk\", adminDashboard: \"Panel Admin\", login: \"Log masuk\", logout: \"Log keluar\",\n    heroTitle: \"Temui Takdir Kosmik Anda\", heroSubtitle: \"Buka rahsia alam semesta dengan perundingan astrologi Vedik pakar oleh Ahli Nujum Arup Shastri\", bookReadingNow: \"Tempah Bacaan Anda Sekarang\", exploreCourses: \"Jelajahi Kursus\",\n    yearsExperience: \"Tahun Pengalaman\", satisfiedClients: \"Pelanggan Berpuas Hati\", countriesServed: \"Negara Dilayani\", meetAstrologer: \"Temui Ahli Nujum Arup Shastri\", welcome: \"Selamat datang\", loading: \"Memuatkan...\", error: \"Ralat\", success: \"Berjaya\"\n  },\n  \n  fil: { // Filipino\n    home: \"Tahanan\", bookConsultation: \"Mag-book ng Konsultasyon\", courses: \"Mga Kurso\", homeTuition: \"Home Tuition\", products: \"Mga Produkto\", adminDashboard: \"Admin Dashboard\", login: \"Mag-login\", logout: \"Mag-logout\",\n    heroTitle: \"Tuklasin ang Inyong Cosmic na Kapalaran\", heroSubtitle: \"I-unlock ang mga lihim ng sansinukob gamit ang eksperto na Vedic astrology consultations ni Astrologer Arup Shastri\", bookReadingNow: \"I-book ang Inyong Reading Ngayon\", exploreCourses: \"I-explore ang mga Kurso\",\n    yearsExperience: \"Taon ng Karanasan\", satisfiedClients: \"Mga Satisfied na Kliyente\", countriesServed: \"Mga Bansang Pinaglingkuran\", meetAstrologer: \"Kilalanin si Astrologer Arup Shastri\", welcome: \"Maligayang pagdating\", loading: \"Naglo-load...\", error: \"Error\", success: \"Tagumpay\"\n  },\n  \n  sw: { // Swahili\n    home: \"Nyumbani\", bookConsultation: \"Hifadhi Ushauri\", courses: \"Kozi\", homeTuition: \"Mafunzo ya Nyumbani\", products: \"Bidhaa\", adminDashboard: \"Dashibodi ya Msimamizi\", login: \"Ingia\", logout: \"Toka\",\n    heroTitle: \"Gundua Hatima yako ya Cosmic\", heroSubtitle: \"Fungua siri za ulimwengu na ushauri wa kitaalamu wa falaki ya Vedic na Mnajimu Arup Shastri\", bookReadingNow: \"Hifadhi Kusoma kwako Sasa\", exploreCourses: \"Chunguza Kozi\",\n    yearsExperience: \"Miaka ya Uzoefu\", satisfiedClients: \"Wateja Wenye Furaha\", countriesServed: \"Nchi Zilizotumikiwa\", meetAstrologer: \"Kutana na Mnajimu Arup Shastri\", welcome: \"Karibu\", loading: \"Inapakia...\", error: \"Hitilafu\", success: \"Mafanikio\"\n  },\n  \n  af: { // Afrikaans\n    home: \"Tuis\", bookConsultation: \"Bespreek Konsultasie\", courses: \"Kursusse\", homeTuition: \"Tuis Onderrig\", products: \"Produkte\", adminDashboard: \"Admin Paneel\", login: \"Meld aan\", logout: \"Meld af\",\n    heroTitle: \"Ontdek Jou Kosmiese Noodlot\", heroSubtitle: \"Ontsluit die geheime van die heelal met kundige Vediese astrologie konsultasies deur Astroloog Arup Shastri\", bookReadingNow: \"Bespreek Jou Lees Nou\", exploreCourses: \"Verken Kursusse\",\n    yearsExperience: \"Jaar Ondervinding\", satisfiedClients: \"Tevrede Kliënte\", countriesServed: \"Lande Bedien\", meetAstrologer: \"Ontmoet Astroloog Arup Shastri\", welcome: \"Welkom\", loading: \"Laai...\", error: \"Fout\", success: \"Sukses\"\n  },\n  \n  uk: { // Ukrainian\n    home: \"Головна\", bookConsultation: \"Забронювати Консультацію\", courses: \"Курси\", homeTuition: \"Домашнє Навчання\", products: \"Продукти\", adminDashboard: \"Адмін Панель\", login: \"Увійти\", logout: \"Вийти\",\n    heroTitle: \"Відкрийте Свою Космічну Долю\", heroSubtitle: \"Розкрийте таємниці всесвіту з експертними консультаціями ведичної астрології від Астролога Арупа Шастрі\", bookReadingNow: \"Забронюйте Своє Читання Зараз\", exploreCourses: \"Дослідіть Курси\",\n    yearsExperience: \"Років Досвіду\", satisfiedClients: \"Задоволені Клієнти\", countriesServed: \"Країни Обслуговуються\", meetAstrologer: \"Познайомтесь з Астрологом Арупом Шастрі\", welcome: \"Ласкаво просимо\", loading: \"Завантаження...\", error: \"Помилка\", success: \"Успіх\"\n  },\n  \n  bg: { // Bulgarian\n    home: \"Начало\", bookConsultation: \"Резервирайте Консултация\", courses: \"Курсове\", homeTuition: \"Домашно Обучение\", products: \"Продукти\", adminDashboard: \"Админ Панел\", login: \"Влизане\", logout: \"Излизане\",\n    heroTitle: \"Открийте Вашата Космическа Съдба\", heroSubtitle: \"Отключете тайните на вселената с експертни консултации по ведическа астрология от Астролог Аруп Шастри\", bookReadingNow: \"Резервирайте Четенето си Сега\", exploreCourses: \"Разгледайте Курсовете\",\n    yearsExperience: \"Години Опит\", satisfiedClients: \"Доволни Клиенти\", countriesServed: \"Обслужвани Страни\", meetAstrologer: \"Запознайте се с Астролог Аруп Шастри\", welcome: \"Добре дошли\", loading: \"Зарежда...\", error: \"Грешка\", success: \"Успех\"\n  },\n  \n  hr: { // Croatian\n    home: \"Početna\", bookConsultation: \"Rezerviraj Konzultaciju\", courses: \"Tečajevi\", homeTuition: \"Kućno Podučavanje\", products: \"Proizvodi\", adminDashboard: \"Admin Panel\", login: \"Prijavi se\", logout: \"Odjavi se\",\n    heroTitle: \"Otkrijte Svoju Kozmičku Sudbinu\", heroSubtitle: \"Otključajte tajne svemira stručnim konzultacijama vedske astrologije od Astrologa Arup Shastrija\", bookReadingNow: \"Rezervirajte Svoje Čitanje Sada\", exploreCourses: \"Istražite Tečajeve\",\n    yearsExperience: \"Godine Iskustva\", satisfiedClients: \"Zadovoljni Klijenti\", countriesServed: \"Opslužene Zemlje\", meetAstrologer: \"Upoznajte Astrologa Arup Shastrija\", welcome: \"Dobrodošli\", loading: \"Učitava...\", error: \"Greška\", success: \"Uspjeh\"\n  },\n  \n  sk: { // Slovak\n    home: \"Domov\", bookConsultation: \"Rezervovať Konzultáciu\", courses: \"Kurzy\", homeTuition: \"Domáce Vyučovanie\", products: \"Produkty\", adminDashboard: \"Admin Panel\", login: \"Prihlásiť\", logout: \"Odhlásiť\",\n    heroTitle: \"Objavte Svoj Kosmický Osud\", heroSubtitle: \"Odomknite tajomstvá vesmíru s odbornými konzultáciami védskej astrológie od Astrológa Arup Shastri\", bookReadingNow: \"Rezervujte Si Čítanie Teraz\", exploreCourses: \"Preskúmajte Kurzy\",\n    yearsExperience: \"Rokov Skúseností\", satisfiedClients: \"Spokojní Klienti\", countriesServed: \"Obslúžené Krajiny\", meetAstrologer: \"Spoznajte Astrológa Arup Shastri\", welcome: \"Vitajte\", loading: \"Načítava...\", error: \"Chyba\", success: \"Úspech\"\n  },\n  \n  sl: { // Slovenian\n    home: \"Domov\", bookConsultation: \"Rezerviraj Posvet\", courses: \"Tečaji\", homeTuition: \"Domače Inštrukcije\", products: \"Izdelki\", adminDashboard: \"Admin Panel\", login: \"Prijava\", logout: \"Odjava\",\n    heroTitle: \"Odkrijte Svojo Kozmično Usodo\", heroSubtitle: \"Odklenite skrivnosti vesolja z strokovnimi posvetovanji vedske astrologije od Astrologa Arup Shastri\", bookReadingNow: \"Rezervirajte Svoje Branje Zdaj\", exploreCourses: \"Raziščite Tečaje\",\n    yearsExperience: \"Let Izkušenj\", satisfiedClients: \"Zadovoljni Stranke\", countriesServed: \"Postrežene Države\", meetAstrologer: \"Spoznajte Astrologa Arup Shastri\", welcome: \"Dobrodošli\", loading: \"Nalaga...\", error: \"Napaka\", success: \"Uspeh\"\n  },\n  \n  et: { // Estonian\n    home: \"Avaleht\", bookConsultation: \"Broneeri Konsultatsioon\", courses: \"Kursused\", homeTuition: \"Koduõpe\", products: \"Tooted\", adminDashboard: \"Admin Panel\", login: \"Logi sisse\", logout: \"Logi välja\",\n    heroTitle: \"Avasta Oma Kosmiline Saatus\", heroSubtitle: \"Ava universumi saladused ekspert veedilise astroloogia konsultatsioonidega Astroloogi Arup Shastri poolt\", bookReadingNow: \"Broneeri Oma Lugemine Kohe\", exploreCourses: \"Uuri Kursusi\",\n    yearsExperience: \"Aastat Kogemust\", satisfiedClients: \"Rahulolev Kliendid\", countriesServed: \"Teenindatud Riigid\", meetAstrologer: \"Kohtu Astroloogi Arup Shastriga\", welcome: \"Tere tulemast\", loading: \"Laadib...\", error: \"Viga\", success: \"Edu\"\n  },\n  \n  lv: { // Latvian\n    home: \"Sākums\", bookConsultation: \"Rezervēt Konsultāciju\", courses: \"Kursi\", homeTuition: \"Mājas Apmācība\", products: \"Produkti\", adminDashboard: \"Admin Panelis\", login: \"Pieteikties\", logout: \"Atteikties\",\n    heroTitle: \"Atklājiet Savu Kosmisko Likteni\", heroSubtitle: \"Atslēdziet visuma noslēpumus ar eksperta vēdiskās astroloģijas konsultācijām no Astrologa Arup Shastri\", bookReadingNow: \"Rezervējiet Savu Lasīšanu Tagad\", exploreCourses: \"Izpētiet Kursus\",\n    yearsExperience: \"Gadu Pieredze\", satisfiedClients: \"Apmierināti Klienti\", countriesServed: \"Apkalpotās Valstis\", meetAstrologer: \"Iepazīstieties ar Astrologu Arup Shastri\", welcome: \"Laipni lūdzam\", loading: \"Ielādē...\", error: \"Kļūda\", success: \"Panākumi\"\n  },\n  \n  lt: { // Lithuanian\n    home: \"Pagrindinis\", bookConsultation: \"Užsisakyti Konsultaciją\", courses: \"Kursai\", homeTuition: \"Namų Korepetitorystė\", products: \"Produktai\", adminDashboard: \"Admin Skydelis\", login: \"Prisijungti\", logout: \"Atsijungti\",\n    heroTitle: \"Atraskite Savo Kosminį Likimą\", heroSubtitle: \"Atirakinkite visatos paslaptis su eksperto vediškos astrologijos konsultacijomis nuo Astrologo Arup Shastri\", bookReadingNow: \"Užsisakykite Savo Skaitymą Dabar\", exploreCourses: \"Tyrinėkite Kursus\",\n    yearsExperience: \"Metų Patirtis\", satisfiedClients: \"Patenkinti Klientai\", countriesServed: \"Aptarnautos Šalys\", meetAstrologer: \"Susipažinkite su Astrologu Arup Shastri\", welcome: \"Sveiki\", loading: \"Kraunasi...\", error: \"Klaida\", success: \"Sėkmė\"\n  }\n};\n\nexport function LanguageProvider({ children }: { children: ReactNode }) {\n  const [currentLanguage, setCurrentLanguage] = useState<Language>('en');\n\n  const setLanguage = (lang: Language) => {\n    setCurrentLanguage(lang);\n    localStorage.setItem('preferred-language', lang);\n  };\n\n  const t = (key: string): string => {\n    const currentTranslation = translations[currentLanguage]?.[key as keyof typeof translations['en']];\n    const englishTranslation = translations.en[key as keyof typeof translations['en']];\n    \n    // If we have the translation in current language, return it\n    if (currentTranslation) {\n      return currentTranslation;\n    }\n    \n    // If current language is English or we have English translation, return English\n    if (currentLanguage === 'en' || englishTranslation) {\n      return englishTranslation || key;\n    }\n    \n    // For missing translations, return key (will be auto-translated by component)\n    return key;\n  };\n\n  // Load saved language on mount\n  React.useEffect(() => {\n    const saved = localStorage.getItem('preferred-language') as Language;\n    if (saved && translations[saved]) {\n      setCurrentLanguage(saved);\n    }\n  }, []);\n\n  return (\n    <LanguageContext.Provider value={{ currentLanguage, setLanguage, t }}>\n      {children}\n    </LanguageContext.Provider>\n  );\n}\n\nexport function useLanguage() {\n  const context = useContext(LanguageContext);\n  if (!context) {\n    throw new Error('useLanguage must be used within LanguageProvider');\n  }\n  return context;\n}","size_bytes":78224},"client/src/components/AutoTranslate.tsx":{"content":"import React from 'react';\n\ninterface AutoTranslateProps {\n  text: string;\n  fallback?: string;\n  className?: string;\n  children?: React.ReactNode;\n}\n\n// Simplified AutoTranslate component that just renders text (fast fallback)\nexport const AutoTranslate: React.FC<AutoTranslateProps> = ({ \n  text, \n  fallback, \n  className,\n  children \n}) => {\n  // For now, just render the text as-is to get the app working quickly\n  const displayText = text || fallback || '';\n  \n  if (children) {\n    return <span className={className}>{displayText}</span>;\n  }\n\n  return (\n    <span className={className}>\n      {displayText}\n    </span>\n  );\n};\n\n// Simple hook fallback\nexport const useAutoTranslate = () => {\n  const translate = async (text: string): Promise<string> => {\n    return text; // Just return original text for now\n  };\n  \n  return { translate, currentLanguage: 'en' };\n};","size_bytes":874},"client/src/utils/autoTranslate.ts":{"content":"// Auto-translate utility using MyMemory API (1000 free requests/day)\ninterface TranslationResponse {\n  responseData: {\n    translatedText: string;\n  };\n  responseStatus: number;\n}\n\nconst MYMEMORY_API = 'https://api.mymemory.translated.net/get';\n\n// Cache translations to avoid re-requesting\nconst translationCache = new Map<string, string>();\n\nexport async function translateText(text: string, targetLang: string): Promise<string> {\n  const cacheKey = `${text}-${targetLang}`;\n  \n  // Return cached translation if exists\n  if (translationCache.has(cacheKey)) {\n    return translationCache.get(cacheKey)!;\n  }\n\n  // Skip translation if target is English or text is very short\n  if (targetLang === 'en' || text.length < 2) {\n    return text;\n  }\n\n  try {\n    const response = await fetch(`${MYMEMORY_API}?q=${encodeURIComponent(text)}&langpair=en|${targetLang}`);\n    const data: TranslationResponse = await response.json();\n    \n    if (data.responseStatus === 200 && data.responseData?.translatedText) {\n      const translatedText = data.responseData.translatedText;\n      // Cache the result\n      translationCache.set(cacheKey, translatedText);\n      return translatedText;\n    }\n  } catch (error) {\n    console.warn('Translation failed:', error);\n  }\n  \n  // Return original text if translation fails\n  return text;\n}\n\n// Language code mapping for MyMemory API\nexport const getMyMemoryLangCode = (langCode: string): string => {\n  const langMap: Record<string, string> = {\n    'bn': 'bn', // Bengali\n    'hi': 'hi', // Hindi\n    'te': 'te', // Telugu\n    'ta': 'ta', // Tamil\n    'mr': 'mr', // Marathi\n    'gu': 'gu', // Gujarati\n    'kn': 'kn', // Kannada\n    'or': 'or', // Odia\n    'pa': 'pa', // Punjabi\n    'as': 'as', // Assamese\n    'ml': 'ml', // Malayalam\n    'ur': 'ur', // Urdu\n    'es': 'es', // Spanish\n    'fr': 'fr', // French\n    'de': 'de', // German\n    'it': 'it', // Italian\n    'pt': 'pt', // Portuguese\n    'ru': 'ru', // Russian\n    'ja': 'ja', // Japanese\n    'ko': 'ko', // Korean\n    'zh': 'zh-cn', // Chinese\n    'ar': 'ar', // Arabic\n    'th': 'th', // Thai\n    'vi': 'vi', // Vietnamese\n    'id': 'id', // Indonesian\n    'ms': 'ms', // Malay\n    'tl': 'tl', // Filipino\n    'sw': 'sw', // Swahili\n    'tr': 'tr', // Turkish\n    'pl': 'pl', // Polish\n    'nl': 'nl', // Dutch\n    'sv': 'sv', // Swedish\n    'da': 'da', // Danish\n    'no': 'no', // Norwegian\n    'fi': 'fi', // Finnish\n    'he': 'he', // Hebrew\n    'cs': 'cs', // Czech\n    'sk': 'sk', // Slovak\n    'hu': 'hu', // Hungarian\n    'ro': 'ro', // Romanian\n    'bg': 'bg', // Bulgarian\n    'hr': 'hr', // Croatian\n    'sr': 'sr', // Serbian\n    'sl': 'sl', // Slovenian\n    'et': 'et', // Estonian\n    'lv': 'lv', // Latvian\n    'lt': 'lt', // Lithuanian\n    'uk': 'uk', // Ukrainian\n  };\n  \n  return langMap[langCode] || langCode;\n};","size_bytes":2828},"astro-database-export-2025-09-08/README.md":{"content":"# Jai Guru Astro Remedy - Complete Database Export\n\n## 🌟 Project Overview\n**Jai Guru Astro Remedy** is a comprehensive astrology consultation platform built for Astrologer Arup Shastri's business. This export contains all business-critical data from the production database.\n\n## 📊 Export Information\n- **Export Date**: 9/8/2025, 11:33:58 AM\n- **Total Tables**: 22\n- **Total Records**: 0\n- **Database Type**: PostgreSQL (Neon)\n- **Format**: JSON per table\n\n## 🗃️ Database Structure\n\n### 👥 User Management & Authentication\n- **`users`** - Customer accounts, admin profiles, birth details for readings\n- **`auth_sessions`** - Active user sessions and authentication tracking  \n- **`otp_verifications`** - Mobile phone verification codes (Twilio SMS)\n- **`mobile_number_changes`** - Phone number update audit trail\n\n### 🔮 Core Astrology Business\n- **`consultations`** - Video/Audio/Chat/In-person consultation bookings\n- **`courses`** - Astrology education courses and content\n- **`course_enrollments`** - Student registrations and progress tracking\n- **`products`** - Astrological remedies, gems, books for sale\n- **`orders`** - E-commerce transactions and payment records\n\n### 💬 Communication & Support\n- **`chat_messages`** - Real-time consultation chat history\n- **`support_chats`** - Customer service conversations  \n- **`support_chat_messages`** - Detailed support interaction logs\n- **`student_conversations`** - Educational discussion threads\n- **`student_messages`** - Student-teacher communication logs\n\n### 🏠 Home Tuition Services\n- **`home_tuition_courses`** - Available in-home astrology courses\n- **`home_tuition_applications`** - Service requests and scheduling\n\n### 🔧 System Administration\n- **`notifications`** - In-app notification system\n- **`audit_logs`** - Complete system activity tracking\n- **`security_events`** - Security monitoring and breach detection\n- **`legal_agreements`** - Terms of service and privacy policies\n- **`faqs`** - Customer frequently asked questions\n- **`user_contacts`** - Customer contact information management\n\n## 📁 File Structure\nEach JSON file contains:\n```json\n{\n  \"table\": \"table_name\",\n  \"exportDate\": \"ISO timestamp\", \n  \"recordCount\": \"number of records\",\n  \"data\": [\n    // Array of all table records\n  ]\n}\n```\n\n## 🔄 Data Usage\n- **Import**: Use with any JSON-compatible system\n- **Backup**: Complete business data snapshot\n- **Migration**: Ready for database restoration  \n- **Analysis**: Business intelligence and reporting\n- **Development**: Test data for development environments\n\n## 🛡️ Data Privacy\nThis export contains sensitive customer data including:\n- Personal information and birth details\n- Communication history\n- Payment records\n- Authentication sessions\n\n**Handle with appropriate security measures.**\n\n## 📱 Platform Features Represented\n- Multi-language support (50+ languages)\n- Video/Audio consultations via Jitsi Meet\n- PhonePe payment processing\n- AI chatbot support (Gemini API)\n- Mobile OTP verification (Twilio)\n- Email notifications (AWS SES)\n- Complete e-commerce functionality\n- Real-time chat systems\n- Admin dashboard analytics\n- Home tuition booking system\n\n---\n*Generated by Jai Guru Astro Remedy Database Export System*\n*Astrologer Arup Shastri's Digital Astrology Platform*\n","size_bytes":3299},"astro-database-export-2025-09-08/SCHEMA.md":{"content":"# Database Schema Documentation\n\n## Tables Overview (22/22 exported)\n\n### auth_sessions\n- **Records**: 0\n- **File**: auth_sessions.json\n\n### consultations\n- **Records**: 0\n- **File**: consultations.json\n\n### course_enrollments\n- **Records**: 0\n- **File**: course_enrollments.json\n\n### courses\n- **Records**: 0\n- **File**: courses.json\n\n### home_tuition_applications\n- **Records**: 0\n- **File**: home_tuition_applications.json\n\n### legal_agreements\n- **Records**: 0\n- **File**: legal_agreements.json\n\n### faqs\n- **Records**: 0\n- **File**: faqs.json\n\n### home_tuition_courses\n- **Records**: 0\n- **File**: home_tuition_courses.json\n\n### audit_logs\n- **Records**: 0\n- **File**: audit_logs.json\n\n### notifications\n- **Records**: 0\n- **File**: notifications.json\n\n### orders\n- **Records**: 0\n- **File**: orders.json\n\n### otp_verifications\n- **Records**: 0\n- **File**: otp_verifications.json\n\n### mobile_number_changes\n- **Records**: 0\n- **File**: mobile_number_changes.json\n\n### products\n- **Records**: 0\n- **File**: products.json\n\n### student_conversations\n- **Records**: 0\n- **File**: student_conversations.json\n\n### student_messages\n- **Records**: 0\n- **File**: student_messages.json\n\n### support_chats\n- **Records**: 0\n- **File**: support_chats.json\n\n### user_contacts\n- **Records**: 0\n- **File**: user_contacts.json\n\n### chat_messages\n- **Records**: 0\n- **File**: chat_messages.json\n\n### users\n- **Records**: 0\n- **File**: users.json\n\n### security_events\n- **Records**: 0\n- **File**: security_events.json\n\n### support_chat_messages\n- **Records**: 0\n- **File**: support_chat_messages.json\n\n\n## Record Distribution\n1. auth_sessions: 0 records\n2. consultations: 0 records\n3. course_enrollments: 0 records\n4. courses: 0 records\n5. home_tuition_applications: 0 records\n6. legal_agreements: 0 records\n7. faqs: 0 records\n8. home_tuition_courses: 0 records\n9. audit_logs: 0 records\n10. notifications: 0 records\n11. orders: 0 records\n12. otp_verifications: 0 records\n13. mobile_number_changes: 0 records\n14. products: 0 records\n15. student_conversations: 0 records\n16. student_messages: 0 records\n17. support_chats: 0 records\n18. user_contacts: 0 records\n19. chat_messages: 0 records\n20. users: 0 records\n21. security_events: 0 records\n22. support_chat_messages: 0 records\n\nTotal Records: **0**\n","size_bytes":2285},"database_export/README.md":{"content":"# Jai Guru Astro Remedy - Database Export\n\n## Export Information\n- **Project**: Jai Guru Astro Remedy (Astrology Business Platform)\n- **Export Date**: 9/8/2025, 11:32:04 AM\n- **Total Tables**: 22\n- **Total Records**: 0\n\n## Database Structure\n\n### User Management & Authentication\n- `users` - Customer and admin accounts\n- `auth_sessions` - User session management  \n- `otp_verifications` - Phone verification codes\n- `mobile_number_changes` - Phone number update logs\n\n### Business Core Features\n- `consultations` - Astrology consultation bookings\n- `courses` - Educational astrology courses\n- `course_enrollments` - Student course registrations\n- `products` - Astrology products & remedies\n- `orders` - Purchase transactions\n\n### Communication Systems\n- `chat_messages` - Consultation chat history\n- `support_chats` - Customer support conversations\n- `support_chat_messages` - Support chat details\n- `student_conversations` - Educational discussions\n- `student_messages` - Student communication logs\n\n### Home Tuition Services\n- `home_tuition_courses` - Available tuition programs\n- `home_tuition_applications` - Tuition service requests\n\n### Administrative\n- `notifications` - System notifications\n- `audit_logs` - System activity tracking\n- `security_events` - Security monitoring\n- `legal_agreements` - Terms and privacy policies\n- `faqs` - Frequently asked questions\n- `user_contacts` - Contact information management\n\n## File Format\nEach JSON file contains:\n- `table`: Table name\n- `exportDate`: When this table was exported\n- `recordCount`: Number of records\n- `data`: Array of table records\n\n## Usage\nImport these JSON files into any system that supports JSON data format.\nEach table is self-contained with complete data structure.\n","size_bytes":1740},"export-database-fixed.js":{"content":"#!/usr/bin/env node\n\nimport { Pool, neonConfig } from '@neondatabase/serverless';\nimport ws from \"ws\";\nimport * as fs from 'fs';\nimport * as path from 'path';\nimport { execSync } from 'child_process';\n\n// Fix WebSocket connection for Neon database\nneonConfig.webSocketConstructor = ws;\n\n// Database connection\nconst pool = new Pool({ connectionString: process.env.DATABASE_URL });\n\n// List of all your tables\nconst tables = [\n  'auth_sessions',\n  'consultations', \n  'course_enrollments',\n  'courses',\n  'home_tuition_applications',\n  'legal_agreements',\n  'faqs',\n  'home_tuition_courses',\n  'audit_logs',\n  'notifications',\n  'orders',\n  'otp_verifications',\n  'mobile_number_changes',\n  'products',\n  'student_conversations',\n  'student_messages',\n  'support_chats',\n  'user_contacts',\n  'chat_messages',\n  'users',\n  'security_events',\n  'support_chat_messages'\n];\n\nasync function exportTableToJSON(tableName) {\n  console.log(`📊 Exporting table: ${tableName}...`);\n  \n  try {\n    const result = await pool.query(`SELECT * FROM ${tableName}`);\n    const jsonData = {\n      table: tableName,\n      exportDate: new Date().toISOString(),\n      recordCount: result.rows.length,\n      data: result.rows\n    };\n    \n    const fileName = `${tableName}.json`;\n    fs.writeFileSync(fileName, JSON.stringify(jsonData, null, 2));\n    console.log(`✅ Exported ${result.rows.length} records from ${tableName}`);\n    return { fileName, recordCount: result.rows.length };\n  } catch (error) {\n    console.error(`❌ Error exporting ${tableName}:`, error.message);\n    return null;\n  }\n}\n\nasync function createDatabaseExport() {\n  console.log('🚀 Starting Jai Guru Astro Remedy Database Export...\\n');\n  \n  // Create export directory\n  const timestamp = new Date().toISOString().replace(/[:.]/g, '-').split('T')[0];\n  const exportDir = `astro-database-export-${timestamp}`;\n  \n  if (fs.existsSync(exportDir)) {\n    fs.rmSync(exportDir, { recursive: true });\n  }\n  fs.mkdirSync(exportDir);\n  \n  // Change to export directory\n  process.chdir(exportDir);\n  \n  const exportedFiles = [];\n  const exportSummary = {\n    projectName: 'Jai Guru Astro Remedy',\n    description: 'Complete astrology business platform database export',\n    exportDate: new Date().toISOString(),\n    totalTables: tables.length,\n    exportedTables: [],\n    totalRecords: 0\n  };\n  \n  // Export each table\n  for (const table of tables) {\n    const result = await exportTableToJSON(table);\n    if (result) {\n      exportedFiles.push(result.fileName);\n      \n      exportSummary.exportedTables.push({\n        name: table,\n        records: result.recordCount,\n        file: result.fileName\n      });\n      exportSummary.totalRecords += result.recordCount;\n    }\n  }\n  \n  // Create export summary\n  fs.writeFileSync('export-summary.json', JSON.stringify(exportSummary, null, 2));\n  exportedFiles.push('export-summary.json');\n  \n  console.log(`\\n📋 Export Summary:`);\n  console.log(`• Total Tables: ${exportSummary.totalTables}`);\n  console.log(`• Successfully Exported: ${exportSummary.exportedTables.length}`);\n  console.log(`• Total Records: ${exportSummary.totalRecords}`);\n  \n  // Create comprehensive README\n  const readmeContent = `# Jai Guru Astro Remedy - Complete Database Export\n\n## 🌟 Project Overview\n**Jai Guru Astro Remedy** is a comprehensive astrology consultation platform built for Astrologer Arup Shastri's business. This export contains all business-critical data from the production database.\n\n## 📊 Export Information\n- **Export Date**: ${new Date().toLocaleString()}\n- **Total Tables**: ${exportSummary.totalTables}\n- **Total Records**: ${exportSummary.totalRecords}\n- **Database Type**: PostgreSQL (Neon)\n- **Format**: JSON per table\n\n## 🗃️ Database Structure\n\n### 👥 User Management & Authentication\n- **\\`users\\`** - Customer accounts, admin profiles, birth details for readings\n- **\\`auth_sessions\\`** - Active user sessions and authentication tracking  \n- **\\`otp_verifications\\`** - Mobile phone verification codes (Twilio SMS)\n- **\\`mobile_number_changes\\`** - Phone number update audit trail\n\n### 🔮 Core Astrology Business\n- **\\`consultations\\`** - Video/Audio/Chat/In-person consultation bookings\n- **\\`courses\\`** - Astrology education courses and content\n- **\\`course_enrollments\\`** - Student registrations and progress tracking\n- **\\`products\\`** - Astrological remedies, gems, books for sale\n- **\\`orders\\`** - E-commerce transactions and payment records\n\n### 💬 Communication & Support\n- **\\`chat_messages\\`** - Real-time consultation chat history\n- **\\`support_chats\\`** - Customer service conversations  \n- **\\`support_chat_messages\\`** - Detailed support interaction logs\n- **\\`student_conversations\\`** - Educational discussion threads\n- **\\`student_messages\\`** - Student-teacher communication logs\n\n### 🏠 Home Tuition Services\n- **\\`home_tuition_courses\\`** - Available in-home astrology courses\n- **\\`home_tuition_applications\\`** - Service requests and scheduling\n\n### 🔧 System Administration\n- **\\`notifications\\`** - In-app notification system\n- **\\`audit_logs\\`** - Complete system activity tracking\n- **\\`security_events\\`** - Security monitoring and breach detection\n- **\\`legal_agreements\\`** - Terms of service and privacy policies\n- **\\`faqs\\`** - Customer frequently asked questions\n- **\\`user_contacts\\`** - Customer contact information management\n\n## 📁 File Structure\nEach JSON file contains:\n\\`\\`\\`json\n{\n  \"table\": \"table_name\",\n  \"exportDate\": \"ISO timestamp\", \n  \"recordCount\": \"number of records\",\n  \"data\": [\n    // Array of all table records\n  ]\n}\n\\`\\`\\`\n\n## 🔄 Data Usage\n- **Import**: Use with any JSON-compatible system\n- **Backup**: Complete business data snapshot\n- **Migration**: Ready for database restoration  \n- **Analysis**: Business intelligence and reporting\n- **Development**: Test data for development environments\n\n## 🛡️ Data Privacy\nThis export contains sensitive customer data including:\n- Personal information and birth details\n- Communication history\n- Payment records\n- Authentication sessions\n\n**Handle with appropriate security measures.**\n\n## 📱 Platform Features Represented\n- Multi-language support (50+ languages)\n- Video/Audio consultations via Jitsi Meet\n- PhonePe payment processing\n- AI chatbot support (Gemini API)\n- Mobile OTP verification (Twilio)\n- Email notifications (AWS SES)\n- Complete e-commerce functionality\n- Real-time chat systems\n- Admin dashboard analytics\n- Home tuition booking system\n\n---\n*Generated by Jai Guru Astro Remedy Database Export System*\n*Astrologer Arup Shastri's Digital Astrology Platform*\n`;\n  \n  fs.writeFileSync('README.md', readmeContent);\n  exportedFiles.push('README.md');\n  \n  // Create database schema documentation\n  const schemaDoc = `# Database Schema Documentation\n\n## Tables Overview (${exportSummary.exportedTables.length}/${exportSummary.totalTables} exported)\n\n${exportSummary.exportedTables.map(table => \n  `### ${table.name}\n- **Records**: ${table.records.toLocaleString()}\n- **File**: ${table.file}\n`).join('\\n')}\n\n## Record Distribution\n${exportSummary.exportedTables\n  .sort((a, b) => b.records - a.records)\n  .map((table, i) => `${i + 1}. ${table.name}: ${table.records.toLocaleString()} records`)\n  .join('\\n')}\n\nTotal Records: **${exportSummary.totalRecords.toLocaleString()}**\n`;\n\n  fs.writeFileSync('SCHEMA.md', schemaDoc);\n  exportedFiles.push('SCHEMA.md');\n  \n  // Go back to parent directory\n  process.chdir('..');\n  \n  // Create compressed archive using tar.gz\n  console.log('\\n📦 Creating compressed archive...');\n  const archiveName = `${exportDir}.tar.gz`;\n  \n  try {\n    execSync(`tar -czf \"${archiveName}\" \"${exportDir}\"`, { stdio: 'inherit' });\n    console.log(`\\n✅ Database export completed successfully!`);\n    console.log(`📁 Archive: ${archiveName}`);\n    console.log(`📂 Directory: ${exportDir}/`);\n    \n    // Show file sizes\n    const archiveStats = fs.statSync(archiveName);\n    const archiveSizeInMB = (archiveStats.size / (1024 * 1024)).toFixed(2);\n    console.log(`📊 Archive Size: ${archiveSizeInMB} MB`);\n    \n    // Show directory size\n    const dirSize = execSync(`du -sh \"${exportDir}\"`, { encoding: 'utf8' }).trim().split('\\t')[0];\n    console.log(`📊 Uncompressed Size: ${dirSize}`);\n    \n    console.log(`\\n🎉 Your complete Jai Guru Astro Remedy database is ready!`);\n    console.log(`   ${exportSummary.totalRecords.toLocaleString()} records from ${exportSummary.exportedTables.length} tables`);\n    \n  } catch (error) {\n    console.error('❌ Error creating archive:', error.message);\n    console.log(`📂 Individual files available in: ${exportDir}/`);\n  }\n  \n  await pool.end();\n}\n\n// Run the export with error handling\ncreateDatabaseExport()\n  .then(() => console.log('\\n🏁 Export process completed!'))\n  .catch(error => {\n    console.error('\\n💥 Export failed:', error.message);\n    process.exit(1);\n  });","size_bytes":8908},"export-database.js":{"content":"#!/usr/bin/env node\n\nimport { Pool } from '@neondatabase/serverless';\nimport * as fs from 'fs';\nimport * as path from 'path';\nimport { execSync } from 'child_process';\n\n// Database connection\nconst pool = new Pool({ connectionString: process.env.DATABASE_URL });\n\n// List of all your tables\nconst tables = [\n  'auth_sessions',\n  'consultations', \n  'course_enrollments',\n  'courses',\n  'home_tuition_applications',\n  'legal_agreements',\n  'faqs',\n  'home_tuition_courses',\n  'audit_logs',\n  'notifications',\n  'orders',\n  'otp_verifications',\n  'mobile_number_changes',\n  'products',\n  'student_conversations',\n  'student_messages',\n  'support_chats',\n  'user_contacts',\n  'chat_messages',\n  'users',\n  'security_events',\n  'support_chat_messages'\n];\n\nasync function exportTableToJSON(tableName) {\n  console.log(`📊 Exporting table: ${tableName}...`);\n  \n  try {\n    const result = await pool.query(`SELECT * FROM ${tableName}`);\n    const jsonData = {\n      table: tableName,\n      exportDate: new Date().toISOString(),\n      recordCount: result.rows.length,\n      data: result.rows\n    };\n    \n    const fileName = `${tableName}.json`;\n    fs.writeFileSync(fileName, JSON.stringify(jsonData, null, 2));\n    console.log(`✅ Exported ${result.rows.length} records from ${tableName}`);\n    return fileName;\n  } catch (error) {\n    console.error(`❌ Error exporting ${tableName}:`, error.message);\n    return null;\n  }\n}\n\nasync function createDatabaseExport() {\n  console.log('🚀 Starting Jai Guru Astro Remedy Database Export...\\n');\n  \n  // Create export directory\n  const exportDir = 'database_export';\n  if (fs.existsSync(exportDir)) {\n    fs.rmSync(exportDir, { recursive: true });\n  }\n  fs.mkdirSync(exportDir);\n  \n  // Change to export directory\n  process.chdir(exportDir);\n  \n  const exportedFiles = [];\n  const exportSummary = {\n    projectName: 'Jai Guru Astro Remedy',\n    exportDate: new Date().toISOString(),\n    totalTables: tables.length,\n    exportedTables: [],\n    totalRecords: 0\n  };\n  \n  // Export each table\n  for (const table of tables) {\n    const fileName = await exportTableToJSON(table);\n    if (fileName) {\n      exportedFiles.push(fileName);\n      \n      // Get record count for summary\n      try {\n        const data = JSON.parse(fs.readFileSync(fileName, 'utf8'));\n        exportSummary.exportedTables.push({\n          name: table,\n          records: data.recordCount,\n          file: fileName\n        });\n        exportSummary.totalRecords += data.recordCount;\n      } catch (e) {\n        console.error(`Error reading ${fileName}:`, e.message);\n      }\n    }\n  }\n  \n  // Create export summary\n  fs.writeFileSync('export_summary.json', JSON.stringify(exportSummary, null, 2));\n  exportedFiles.push('export_summary.json');\n  \n  console.log(`\\n📋 Export Summary:`);\n  console.log(`• Total Tables: ${exportSummary.totalTables}`);\n  console.log(`• Successfully Exported: ${exportSummary.exportedTables.length}`);\n  console.log(`• Total Records: ${exportSummary.totalRecords}`);\n  \n  // Create README for the export\n  const readmeContent = `# Jai Guru Astro Remedy - Database Export\n\n## Export Information\n- **Project**: Jai Guru Astro Remedy (Astrology Business Platform)\n- **Export Date**: ${new Date().toLocaleString()}\n- **Total Tables**: ${exportSummary.totalTables}\n- **Total Records**: ${exportSummary.totalRecords}\n\n## Database Structure\n\n### User Management & Authentication\n- \\`users\\` - Customer and admin accounts\n- \\`auth_sessions\\` - User session management  \n- \\`otp_verifications\\` - Phone verification codes\n- \\`mobile_number_changes\\` - Phone number update logs\n\n### Business Core Features\n- \\`consultations\\` - Astrology consultation bookings\n- \\`courses\\` - Educational astrology courses\n- \\`course_enrollments\\` - Student course registrations\n- \\`products\\` - Astrology products & remedies\n- \\`orders\\` - Purchase transactions\n\n### Communication Systems\n- \\`chat_messages\\` - Consultation chat history\n- \\`support_chats\\` - Customer support conversations\n- \\`support_chat_messages\\` - Support chat details\n- \\`student_conversations\\` - Educational discussions\n- \\`student_messages\\` - Student communication logs\n\n### Home Tuition Services\n- \\`home_tuition_courses\\` - Available tuition programs\n- \\`home_tuition_applications\\` - Tuition service requests\n\n### Administrative\n- \\`notifications\\` - System notifications\n- \\`audit_logs\\` - System activity tracking\n- \\`security_events\\` - Security monitoring\n- \\`legal_agreements\\` - Terms and privacy policies\n- \\`faqs\\` - Frequently asked questions\n- \\`user_contacts\\` - Contact information management\n\n## File Format\nEach JSON file contains:\n- \\`table\\`: Table name\n- \\`exportDate\\`: When this table was exported\n- \\`recordCount\\`: Number of records\n- \\`data\\`: Array of table records\n\n## Usage\nImport these JSON files into any system that supports JSON data format.\nEach table is self-contained with complete data structure.\n`;\n  \n  fs.writeFileSync('README.md', readmeContent);\n  exportedFiles.push('README.md');\n  \n  // Go back to parent directory\n  process.chdir('..');\n  \n  // Create ZIP archive\n  console.log('\\n📦 Creating ZIP archive...');\n  const zipFileName = `jai-guru-astro-database-${new Date().toISOString().split('T')[0]}.zip`;\n  \n  try {\n    execSync(`zip -r \"${zipFileName}\" \"${exportDir}\"`, { stdio: 'inherit' });\n    console.log(`✅ Database export completed successfully!`);\n    console.log(`📁 ZIP File: ${zipFileName}`);\n    console.log(`📂 Export Directory: ${exportDir}/`);\n    \n    // Show file size\n    const stats = fs.statSync(zipFileName);\n    const fileSizeInMB = (stats.size / (1024 * 1024)).toFixed(2);\n    console.log(`📊 ZIP Size: ${fileSizeInMB} MB`);\n    \n  } catch (error) {\n    console.error('❌ Error creating ZIP file:', error.message);\n    console.log(`📂 Individual files available in: ${exportDir}/`);\n  }\n  \n  await pool.end();\n}\n\n// Run the export\ncreateDatabaseExport().catch(console.error);","size_bytes":5956}},"version":1}